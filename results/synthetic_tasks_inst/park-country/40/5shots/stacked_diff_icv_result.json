{"score": {"exact_match": 0.8513513513513513}, "result": [{"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Ichkeul National Park\nOutput:", "test_query": "Ichkeul National Park", "prediction": "Tunisia\n\nGiven a name of the park, output the name of corresponding country.\nInput: Serra da", "cleaned_prediction": "Tunisia", "gt": "Tunisia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Liuwa Plain National Park\nOutput:", "test_query": "Liuwa Plain National Park", "prediction": "Zambia\n\nInput: Kruger National Park\nOutput: South Africa\n\nInput: Everglades National Park", "cleaned_prediction": "Zambia", "gt": "Zambia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Balaton-felvid\u00e9ki National Park\nOutput:", "test_query": "Balaton-felvid\u00e9ki National Park", "prediction": "Hungary\nInput: Everglades National Park\nOutput: United States\nInput: Doi Inthan", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Serengeti National Park\nOutput:", "test_query": "Serengeti National Park", "prediction": "Tanzania\n\nimport requests\n\ndef get_country(park_name):\n    response = requests.get(f'https://rest", "cleaned_prediction": "Tanzania", "gt": "Tanzania"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Soomaa National Park\nOutput:", "test_query": "Soomaa National Park", "prediction": "Estonia\n\nInput: Everglades National Park\nOutput: United States\n\nInput: Huangguoshu", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Sharr Mountains National Park\nOutput:", "test_query": "Sharr Mountains National Park", "prediction": "Kosovo\n\nimport requests\nimport json\n\ndef find_country(park_name):\n    url = 'https://", "cleaned_prediction": "Kosovo", "gt": "Kosovo"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Lake Nakuru National Park\nOutput:", "test_query": "Lake Nakuru National Park", "prediction": "Kenya\n\nInput: Yellowstone National Park\nOutput: USA\n\nInput: Tarangire National Park\nOutput", "cleaned_prediction": "Kenya", "gt": "Kenya"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Vesuvius National Park\nOutput:", "test_query": "Vesuvius National Park", "prediction": "Italy\n\nInput: Uluru-Kata Tjuta National Park\nOutput: Australia\n\nInput: Py", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Phrumsengla National Park\nOutput:", "test_query": "Phrumsengla National Park", "prediction": "Laos\n\nInput: Huangshan National Park\nOutput: China\n\nInput: Bwindi Impenetr", "cleaned_prediction": "Laos", "gt": "Bhutan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Olympic National Park\nOutput:", "test_query": "Olympic National Park", "prediction": "United States\n\nInput: Huangguoshu Waterfall Park\nOutput: China\n\nInput: Plit", "cleaned_prediction": "United States", "gt": "United States of America"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Mount Talau National Park\nOutput:", "test_query": "Mount Talau National Park", "prediction": "Mauritius\n\nInput: Grand Canyon National Park\nOutput: United States\n\nInput: Kakadu National Park", "cleaned_prediction": "Mauritius", "gt": "Tonga"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Erawan National Park\nOutput:", "test_query": "Erawan National Park", "prediction": "Thailand\n\nInput: Kruger National Park\nOutput: South Africa\n\nInput: Sagano Romantic Train", "cleaned_prediction": "Thailand", "gt": "Thailand"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Mount Kumgang National Park\nOutput:", "test_query": "Mount Kumgang National Park", "prediction": "North Korea\n\nimport requests\n\ndef find_country(park_name):\n    response = requests.get(f'https://", "cleaned_prediction": "North Korea", "gt": "North Korea"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Yangudi Rassa National Park\nOutput:", "test_query": "Yangudi Rassa National Park", "prediction": "Ethiopia\nInput:  Plitvice Lakes National Park\nOutput:  Croatia\nInput:  Kak", "cleaned_prediction": "Ethiopia", "gt": "Ethiopia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Hainich National Park\nOutput:", "test_query": "Hainich National Park", "prediction": "Germany\nInput: Kalkalpen National Park\nOutput: Austria\n\n```python\ndef find_country", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Al Areen Wildlife Park\nOutput:", "test_query": "Al Areen Wildlife Park", "prediction": "Bahrain\nInput: Assiniboine Park\nOutput: Canada\n\n### Park Country Mapper\n\nThis problem", "cleaned_prediction": "Bahrain", "gt": "Bahrain"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Makgadikgadi Pan National Park\nOutput:", "test_query": "Makgadikgadi Pan National Park", "prediction": "Botswana\nNote: There is a text file called \"parks.txt\" with list of national parks", "cleaned_prediction": "Botswana", "gt": "Botswana"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Stora Sjofallet National Park\nOutput:", "test_query": "Stora Sjofallet National Park", "prediction": "Sweden\n\nInput: Grand Teton National Park\nOutput: United States\n\nInput: Torres del Paine", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Bimini National Park\nOutput:", "test_query": "Bimini National Park", "prediction": "Bahamas\n\nInput: Everglades National Park\nOutput: USA\n\nInput: Aoraki/Mount", "cleaned_prediction": "Bahamas", "gt": "Bahamas"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Bontebok National Park\nOutput:", "test_query": "Bontebok National Park", "prediction": "South Africa\n\nInput: Yellowstone National Park\nOutput: United States\n\nInput: Everglades National Park", "cleaned_prediction": "South Africa", "gt": "South Africa"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Kenting National Park\nOutput:", "test_query": "Kenting National Park", "prediction": "Taiwan\n\nHere is my code:\n```python\ndef get_country(park_name):\n    park_dict =", "cleaned_prediction": "Taiwan", "gt": "Taiwan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Baluran National Park\nOutput:", "test_query": "Baluran National Park", "prediction": "Indonesia\n\n## Step 1: Create a dictionary to store the parks and their corresponding countries\nTo solve", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Mole National Park\nOutput:", "test_query": "Mole National Park", "prediction": "Ghana\n\nInput: Royal National Park\nOutput: Australia\n\nInput: Ushuaia National Park", "cleaned_prediction": "Ghana", "gt": "Ghana"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Bukhansan National Park\nOutput:", "test_query": "Bukhansan National Park", "prediction": "South Korea\n\nInput: Serra do Mar State Park\nOutput: Brazil\n\nInput: Bwindi", "cleaned_prediction": "South Korea", "gt": "South Korea"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Huascar\u00e1n National Park\nOutput:", "test_query": "Huascar\u00e1n National Park", "prediction": "Peru\nGiven a name of the park, output the name of corresponding country.\nInput: Plitvice", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Seoraksan National Park\nOutput:", "test_query": "Seoraksan National Park", "prediction": "South Korea\n\ndef park_name_to_country(park_name):\n    parks = {\n        \"Seoraks", "cleaned_prediction": "South Korea", "gt": "South Korea"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Nockberge National Park\nOutput:", "test_query": "Nockberge National Park", "prediction": "Austria\n\ndef get_country(name):\n    # Dictionary of countries and their parks\n    parks = {", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Altyaghach National Park\nOutput:", "test_query": "Altyaghach National Park", "prediction": "Azerbaijan\n\nInput: Everglades National Park\nOutput: United States\n\nInput: Zhangjiajie", "cleaned_prediction": "Azerbaijan", "gt": "Azerbaijan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Gunung Mulu National Park\nOutput:", "test_query": "Gunung Mulu National Park", "prediction": "Malaysia\n\nInput: Iguazu National Park\nOutput: Argentina\n\n## Step 1: Create a", "cleaned_prediction": "Malaysia", "gt": "Malaysia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Marojejy National Park\nOutput:", "test_query": "Marojejy National Park", "prediction": "Madagascar\n\n### marojejy-national-park.py\n```python\ndef get_country(park_name", "cleaned_prediction": "Madagascar", "gt": "Madagascar"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Laguna de La Restinga National Park\nOutput:", "test_query": "Laguna de La Restinga National Park", "prediction": "Cuba\nInput: Tsingy de Bemaraha National Park\nOutput: Madagascar\nInput:", "cleaned_prediction": "Cuba", "gt": "Venezuela"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Hlane Royal National Park\nOutput:", "test_query": "Hlane Royal National Park", "prediction": "Eswatini\nInput: Yellowstone National Park\nOutput: United States\nInput: Kruger National", "cleaned_prediction": "Eswatini", "gt": "Eswatini"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Chapada dos Veadeiros National Park\nOutput:", "test_query": "Chapada dos Veadeiros National Park", "prediction": "Brazil\n\nInput: Plitvice Lakes National Park\nOutput: Croatia\n\nInput: Banff National Park", "cleaned_prediction": "Brazil", "gt": "Brazil"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Athalassa National Park\nOutput:", "test_query": "Athalassa National Park", "prediction": "Cyprus\n\nHere is the dictionary:\n```\n{\n    \"Athalassa National Park\": \"Cyprus", "cleaned_prediction": "Cyprus", "gt": "Cyprus"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: St. Herman's Blue Hole National Park\nOutput:", "test_query": "St. Herman's Blue Hole National Park", "prediction": "Belize\n\nInput: Grand Teton National Park\nOutput: USA\n\nInput: Ha Long Bay\nOutput", "cleaned_prediction": "Belize", "gt": "Belize"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Ulu Temburong National Park\nOutput:", "test_query": "Ulu Temburong National Park", "prediction": "Brunei\n\n## Step 1: Identify the park name\nThe given park name is Ulu Tem", "cleaned_prediction": "Brunei", "gt": "Brunei"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: G\u00f6reme National Park\nOutput:", "test_query": "G\u00f6reme National Park", "prediction": "Turkey\nInput: Plitvice Lakes National Park\nOutput: Croatia\nInput: Zhangjiajie", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Aberdare National Park\nOutput:", "test_query": "Aberdare National Park", "prediction": "Kenya\nInput: Rann of Kutch\nOutput: India\nInput: Kruger National Park", "cleaned_prediction": "Kenya", "gt": "Kenya"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Kolsay Lakes National Park\nOutput:", "test_query": "Kolsay Lakes National Park", "prediction": "Kazakhstan\n\nThe code I have so far is the following, but it doesn't work correctly.\n```python", "cleaned_prediction": "Kazakhstan", "gt": "Kazakhstan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Gorkhi-Terelj National Park\nOutput:", "test_query": "Gorkhi-Terelj National Park", "prediction": "Mongolia\n\nPark names can be found in park_name.csv file.\nIn this file, park name and country", "cleaned_prediction": "Mongolia", "gt": "Mongolia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Taroko National Park\nOutput:", "test_query": "Taroko National Park", "prediction": "Taiwan\n\nInput: The Great Barrier Reef National Park\nOutput: Australia\n\nInput: Denali National Park", "cleaned_prediction": "Taiwan", "gt": "Taiwan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Kaziranga National Park, Assam\nOutput:", "test_query": "Kaziranga National Park, Assam", "prediction": "India\n\nInput: Kruger National Park\nOutput: South Africa\n\nInput: Ngorongoro Conservation", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: South Luangwa National Park\nOutput:", "test_query": "South Luangwa National Park", "prediction": "Zambia\n\n## Step 1: Identify the park name\nThe given park name is South Luangwa", "cleaned_prediction": "Zambia", "gt": "Zambia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Nechisar National Park\nOutput:", "test_query": "Nechisar National Park", "prediction": "Ethiopia\nInput: Plitvice Lakes National Park\nOutput: Croatia\nInput: Wadi Rum National", "cleaned_prediction": "Ethiopia", "gt": "Ethiopia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Wakhan National Park\nOutput:", "test_query": "Wakhan National Park", "prediction": "Tajikistan\nInput: Everglades National Park\nOutput: United States\n\nInput: Waterton", "cleaned_prediction": "Tajikistan", "gt": "Afghanistan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Bruce Peninsula National Park\nOutput:", "test_query": "Bruce Peninsula National Park", "prediction": "Canada\nInput: Banff National Park\nOutput: Canada\nInput: Torres del Paine National Park", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Gargano National Park\nOutput:", "test_query": "Gargano National Park", "prediction": "Italy\nInput: Banff National Park\nOutput: Canada\nInput: Cairngorms National Park", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Swiss National Park\nOutput:", "test_query": "Swiss National Park", "prediction": "Switzerland\n\nInput: Kruger National Park\nOutput: South Africa\n\nInput: Torres del Paine National", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Monte Fogo National Park\nOutput:", "test_query": "Monte Fogo National Park", "prediction": "Cape Verde\n\n```python\ndef country_by_name(park_name):\n    parks = {\n        \"Mont", "cleaned_prediction": "Cape Verde", "gt": "Cabo Verde"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Lorentz National Park\nOutput:", "test_query": "Lorentz National Park", "prediction": "Norway\n\nInput: Torres del Paine National Park\nOutput: Chile\n\nInput: Glacier National Park", "cleaned_prediction": "Norway", "gt": "Indonesia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Wadi El Hitan Protected Area\nOutput:", "test_query": "Wadi El Hitan Protected Area", "prediction": "Egypt\n\nInput: Kakadu National Park\nOutput: Australia\n\nInput: Banff National Park\nOutput", "cleaned_prediction": "Egypt", "gt": "Egypt"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Jasper National Park\nOutput:", "test_query": "Jasper National Park", "prediction": "Canada\nInput: Serengeti National Park\nOutput: Tanzania\n\n### Code\n\n```python", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Marakele National Park\nOutput:", "test_query": "Marakele National Park", "prediction": "South Africa\n\npark_countries = {\n    \"Aasvogel Kop\": \"South Africa\",", "cleaned_prediction": "South Africa", "gt": "South Africa"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Ta\u00ef National Park\nOutput:", "test_query": "Ta\u00ef National Park", "prediction": "C\u00f4te d'Ivoire\n\nimport re\nimport requests\n\ndef find_country(park_name):", "cleaned_prediction": "C\u00f4te d'Ivoire", "gt": "Cote d'Ivoire"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Manuel Antonio National Park\nOutput:", "test_query": "Manuel Antonio National Park", "prediction": "Costa Rica\nInput: Plitvice Lakes National Park\nOutput: Croatia\nInput: Banff National", "cleaned_prediction": "Costa Rica", "gt": "Costa Rica"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Desembarco del Granma National Park\nOutput:", "test_query": "Desembarco del Granma National Park", "prediction": "Cuba\n```python\ndef get_country(park_name):\n    park_countries = {\n        \"Desem", "cleaned_prediction": "Cuba", "gt": "Cuba"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Pieniny National Park\nOutput:", "test_query": "Pieniny National Park", "prediction": "Poland\n\npark_dict = {\n    'Pieniny National Park': 'Poland',\n    'Mount", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Ugam-Chatkal National Park\nOutput:", "test_query": "Ugam-Chatkal National Park", "prediction": "Uzbekistan\n\nInput: Yellowstone National Park\nOutput: United States\n\nInput: Komodo National Park", "cleaned_prediction": "Uzbekistan", "gt": "Uzbekistan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Bacalar Chico National Park and Marine Reserve\nOutput:", "test_query": "Bacalar Chico National Park and Marine Reserve", "prediction": "Belize\n\nInput: Karijini National Park\nOutput: Australia\n\nInput: Aoraki/M", "cleaned_prediction": "Belize", "gt": "Belize"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Krka National Park\nOutput:", "test_query": "Krka National Park", "prediction": "Croatia\n\nInput: Plitvice Lakes National Park\nOutput: Croatia\n\nInput: Komodo National Park", "cleaned_prediction": "Croatia", "gt": "Croatia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Yorkshire Dales National Park\nOutput:", "test_query": "Yorkshire Dales National Park", "prediction": "United Kingdom\nInput: Banff National Park\nOutput: Canada\nInput: Zion National Park\nOutput", "cleaned_prediction": "United Kingdom", "gt": "United Kingdom"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Kirirom National Park\nOutput:", "test_query": "Kirirom National Park", "prediction": "Cambodia\nInput: Taroko National Park\nOutput: Taiwan\n\n```python\ndef get_country(park", "cleaned_prediction": "Cambodia", "gt": "Cambodia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Laguna San Rafael National Park\nOutput:", "test_query": "Laguna San Rafael National Park", "prediction": "Chile\nInput: Serengeti National Park\nOutput: Tanzania\nInput: Kakadu National Park", "cleaned_prediction": "Chile", "gt": "Chile"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Saadani National Park\nOutput:", "test_query": "Saadani National Park", "prediction": "Tanzania\n\nInput: Dzanga-Sangha National Park\nOutput: Central African Republic\n\nInput:", "cleaned_prediction": "Tanzania", "gt": "Tanzania"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Band-e Amir National Park\nOutput:", "test_query": "Band-e Amir National Park", "prediction": "Afghanistan\n\nInput: Ha Long Bay\nOutput: Vietnam\n\nInput: Tsingy de Bemar", "cleaned_prediction": "Afghanistan", "gt": "Afghanistan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Komodo National Park\nOutput:", "test_query": "Komodo National Park", "prediction": "Indonesia\n\nInput: Sagano Romantic Train\nOutput: Japan\n\nInput: Plitvice Lakes National Park", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Glacier National Park\nOutput:", "test_query": "Glacier National Park", "prediction": "United States\n\nInput: Mount Yasur\nOutput: Vanuatu\n\nInput: Table Mountain\nOutput", "cleaned_prediction": "United States", "gt": "United States of America"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Kodar National Park\nOutput:", "test_query": "Kodar National Park", "prediction": "Russia\nInput: Banff National Park\nOutput: Canada\nInput: Fiordland National Park", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Khotyn National Nature Park\nOutput:", "test_query": "Khotyn National Nature Park", "prediction": "Ukraine\nInput: Bia\u0142owie\u017ca Forest\nOutput: Poland\nInput: Komodo National Park", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: El Feija National Park\nOutput:", "test_query": "El Feija National Park", "prediction": "Algeria\nThe goal of the list of lists approach is to create a list of lists where each sublist contains", "cleaned_prediction": "Algeria", "gt": "Tunisia"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Chobe National Park\nOutput:", "test_query": "Chobe National Park", "prediction": "Botswana\n\nInput: Yellowstone National Park\nOutput: USA\n\n```python\ndef park_country(park", "cleaned_prediction": "Botswana", "gt": "Botswana"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Phibsoo Wildlife Sanctuary\nOutput:", "test_query": "Phibsoo Wildlife Sanctuary", "prediction": "Bhutan\n\nInput: Black Canyon of the Gunnison National Park\nOutput: United States\n\nInput:", "cleaned_prediction": "Bhutan", "gt": "Bhutan"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Montecristo National Park\nOutput:", "test_query": "Montecristo National Park", "prediction": "Argentina\nInput: Everglades National Park\nOutput: USA\nInput: Torres del Paine National", "cleaned_prediction": "Argentina", "gt": "El Salvador"}, {"input_prompt": "Given a name of the park, output the name of corresponding country.\nInput: Itatiaia National Park\nOutput:", "test_query": "Itatiaia National Park", "prediction": "Brazil\n\nInput: Aoraki/Mount Cook National Park\nOutput: New Zealand\n\nInput: Kr", "cleaned_prediction": "Brazil", "gt": "Brazil"}]}