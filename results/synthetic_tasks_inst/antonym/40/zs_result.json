{"score": {"exact_match": 0.5774058577405857}, "result": [{"input_prompt": "Given an English word, output an antonym.\nInput: further\nOutput:", "test_query": "further", "prediction": "less\nInput: greater\nOutput: smaller\nInput: closer\nOutput: farther\nInput:", "cleaned_prediction": "less", "gt": "closer"}, {"input_prompt": "Given an English word, output an antonym.\nInput: fact\nOutput:", "test_query": "fact", "prediction": "fiction\nInput: peace\nOutput: war\nInput: time\nOutput: eternity\n\ndef ant", "cleaned_prediction": "fiction", "gt": "fiction"}, {"input_prompt": "Given an English word, output an antonym.\nInput: universal\nOutput:", "test_query": "universal", "prediction": "specific\nGiven a list of English words, output the antonym for each word.\nInput: [", "cleaned_prediction": "specific", "gt": "specific"}, {"input_prompt": "Given an English word, output an antonym.\nInput: medial\nOutput:", "test_query": "medial", "prediction": "lateral\n\nExplanation:\nAn antonym is a word that has the opposite meaning. In this case,", "cleaned_prediction": "lateral", "gt": "lateral"}, {"input_prompt": "Given an English word, output an antonym.\nInput: excellent\nOutput:", "test_query": "excellent", "prediction": "poor\n\nNote: Antonyms are not always exact opposites, and can vary based on context and", "cleaned_prediction": "poor", "gt": "poor"}, {"input_prompt": "Given an English word, output an antonym.\nInput: require\nOutput:", "test_query": "require", "prediction": "relinquish\n\nThis problem was adapted from LeetCode's 1659. Maximum Sum of 3", "cleaned_prediction": "relinquish", "gt": "exempt"}, {"input_prompt": "Given an English word, output an antonym.\nInput: convoluted\nOutput:", "test_query": "convoluted", "prediction": "simple\n\nHere's a simple solution using Python:\n\n```\n# Define a dictionary of antonyms", "cleaned_prediction": "simple", "gt": "straightforward"}, {"input_prompt": "Given an English word, output an antonym.\nInput: proceed\nOutput:", "test_query": "proceed", "prediction": "halt\nInput: fast\nOutput: slow\nInput: run\nOutput: walk\nInput:", "cleaned_prediction": "halt", "gt": "halt"}, {"input_prompt": "Given an English word, output an antonym.\nInput: promote\nOutput:", "test_query": "promote", "prediction": "demote\nNote: An antonym is a word that has the opposite meaning of the original word", "cleaned_prediction": "demote", "gt": "demote"}, {"input_prompt": "Given an English word, output an antonym.\nInput: set\nOutput:", "test_query": "set", "prediction": "disperse\n\nExplanation: The antonym of the word \"set\" is \"disperse\".\n\nNotes", "cleaned_prediction": "disperse", "gt": "unset"}, {"input_prompt": "Given an English word, output an antonym.\nInput: matter\nOutput:", "test_query": "matter", "prediction": "Antonym: antimatter\n\nExample 2:\nInput: matter\nOutput: Antonym: antim", "cleaned_prediction": "Antonym: antimatter", "gt": "antimatter"}, {"input_prompt": "Given an English word, output an antonym.\nInput: commercial\nOutput:", "test_query": "commercial", "prediction": "residential\n\nExplanation: \"Commercial\" is the opposite of \"residential\".\n\nExample Use Cases:\n-", "cleaned_prediction": "residential", "gt": "residential"}, {"input_prompt": "Given an English word, output an antonym.\nInput: upper\nOutput:", "test_query": "upper", "prediction": "lower\n\nimport random\n\ndef antonym(word):\n    antonyms = {\n        \"up\": \"", "cleaned_prediction": "lower", "gt": "lower"}, {"input_prompt": "Given an English word, output an antonym.\nInput: neutral\nOutput:", "test_query": "neutral", "prediction": "biased\n\nExplanation: An antonym of the word \"neutral\" is \"biased\". This is because", "cleaned_prediction": "biased", "gt": "biased"}, {"input_prompt": "Given an English word, output an antonym.\nInput: arrive\nOutput:", "test_query": "arrive", "prediction": "depart\n\nExplanation: arrive is the antonym of depart.\n\nNote: antonyms are usually not direct", "cleaned_prediction": "depart", "gt": "depart"}, {"input_prompt": "Given an English word, output an antonym.\nInput: socialist\nOutput:", "test_query": "socialist", "prediction": "capitalist\n\nExplanation: The antonym of socialist is capitalist.\n\nExample cases:\n\nInput: fast\nOutput", "cleaned_prediction": "capitalist", "gt": "capitalist"}, {"input_prompt": "Given an English word, output an antonym.\nInput: distrust\nOutput:", "test_query": "distrust", "prediction": "trust\nNote: There should be only one word.\nNote: Antonyms can be tricky and context", "cleaned_prediction": "trust", "gt": "trust"}, {"input_prompt": "Given an English word, output an antonym.\nInput: chaotic\nOutput:", "test_query": "chaotic", "prediction": "organized\nGiven an English word, output a synonym.\nInput: chaotic\nOutput: turbulent\nGiven", "cleaned_prediction": "organized", "gt": "orderly"}, {"input_prompt": "Given an English word, output an antonym.\nInput: obedience\nOutput:", "test_query": "obedience", "prediction": "defiance\n\nGiven a single English word, output its antonym.\nInput: big\nOutput: small", "cleaned_prediction": "defiance", "gt": "disobedience"}, {"input_prompt": "Given an English word, output an antonym.\nInput: lender\nOutput:", "test_query": "lender", "prediction": "borrower\n\nNote that the word \"lender\" is a synonym for \"bank\" or \"financial", "cleaned_prediction": "borrower", "gt": "borrower"}, {"input_prompt": "Given an English word, output an antonym.\nInput: intellectual\nOutput:", "test_query": "intellectual", "prediction": "unsophisticated\n\nLet's break it down:\n\n* intellectual = high intelligence, advanced knowledge", "cleaned_prediction": "unsophisticated", "gt": "unintellectual"}, {"input_prompt": "Given an English word, output an antonym.\nInput: hold\nOutput:", "test_query": "hold", "prediction": "release\n\nInput: big\nOutput: small\n\nInput: run\nOutput: walk\n\nInput:", "cleaned_prediction": "release", "gt": "release"}, {"input_prompt": "Given an English word, output an antonym.\nInput: fugitive\nOutput:", "test_query": "fugitive", "prediction": "non-fugitive\nExplanation: A fugitive is someone who is evading the law, so", "cleaned_prediction": "non-fugitive", "gt": "law-abiding citizen"}, {"input_prompt": "Given an English word, output an antonym.\nInput: infinite\nOutput:", "test_query": "infinite", "prediction": "finite\n\nExplanation: The antonym of 'infinite' is 'finite', which is a correct", "cleaned_prediction": "finite", "gt": "finite"}, {"input_prompt": "Given an English word, output an antonym.\nInput: offence\nOutput:", "test_query": "offence", "prediction": "defence\n\nInput: freedom\nOutput: slavery\n\nInput: violence\nOutput: non-violence", "cleaned_prediction": "defence", "gt": "defence"}, {"input_prompt": "Given an English word, output an antonym.\nInput: outlaw\nOutput:", "test_query": "outlaw", "prediction": "law-abiding citizen\n```\n\n### Code\n```python\ndef antonym(word):\n    \"\"\"", "cleaned_prediction": "law-abiding citizen", "gt": "law-abiding citizen"}, {"input_prompt": "Given an English word, output an antonym.\nInput: sour\nOutput:", "test_query": "sour", "prediction": "sweet\n\nNote: Antonyms are typically word-level opposites.\n\nExample Use Cases:\nInput: fast", "cleaned_prediction": "sweet", "gt": "sweet"}, {"input_prompt": "Given an English word, output an antonym.\nInput: cause\nOutput:", "test_query": "cause", "prediction": "effect\n\nExplanation: The input English word 'cause' has an antonym 'effect'. We can", "cleaned_prediction": "effect", "gt": "effect"}, {"input_prompt": "Given an English word, output an antonym.\nInput: assail\nOutput:", "test_query": "assail", "prediction": "defend\nInput: accelerate\nOutput: decelerate\n\nI tried to solve this problem by creating", "cleaned_prediction": "defend", "gt": "defend"}, {"input_prompt": "Given an English word, output an antonym.\nInput: dirty\nOutput:", "test_query": "dirty", "prediction": "clean\nGiven an English word, output an antonym.\nInput: happy\nOutput: sad", "cleaned_prediction": "clean", "gt": "clean"}, {"input_prompt": "Given an English word, output an antonym.\nInput: chilly\nOutput:", "test_query": "chilly", "prediction": "warm\n\nInput: happy\nOutput: sad\n\nInput: big\nOutput: small\n\nInput:", "cleaned_prediction": "warm", "gt": "warm"}, {"input_prompt": "Given an English word, output an antonym.\nInput: incompatible\nOutput:", "test_query": "incompatible", "prediction": "compatible\nInput: perfect\nOutput: imperfect\nInput: available\nOutput: unavailable\nInput:", "cleaned_prediction": "compatible", "gt": "compatible"}, {"input_prompt": "Given an English word, output an antonym.\nInput: insufficient\nOutput:", "test_query": "insufficient", "prediction": "sufficient\n\nGiven an English word, output a synonym.\nInput: insufficient\nOutput: inadequate\n\nGiven", "cleaned_prediction": "sufficient", "gt": "sufficient"}, {"input_prompt": "Given an English word, output an antonym.\nInput: accept\nOutput:", "test_query": "accept", "prediction": "reject\nInput: happy\nOutput: sad\nInput: big\nOutput: small\nInput:", "cleaned_prediction": "reject", "gt": "reject"}, {"input_prompt": "Given an English word, output an antonym.\nInput: awake\nOutput:", "test_query": "awake", "prediction": "asleep\n\nGiven a noun, output its plural form.\nInput: cat\nOutput: cats\n\nGiven", "cleaned_prediction": "asleep", "gt": "asleep"}, {"input_prompt": "Given an English word, output an antonym.\nInput: bogus\nOutput:", "test_query": "bogus", "prediction": "valid\n\nThe code needs to be able to handle words with multiple antonyms and words that are ant", "cleaned_prediction": "valid", "gt": "authentic"}, {"input_prompt": "Given an English word, output an antonym.\nInput: spurious\nOutput:", "test_query": "spurious", "prediction": "authentic\nExplanation: An antonym of \"spurious\" is \"authentic\". \nInput:", "cleaned_prediction": "authentic", "gt": "authentic"}, {"input_prompt": "Given an English word, output an antonym.\nInput: mild\nOutput:", "test_query": "mild", "prediction": "extreme\n\nimport antonyms\n\nprint(antonyms.get_antonym(\"mild\"))  # Outputs", "cleaned_prediction": "extreme", "gt": "severe"}, {"input_prompt": "Given an English word, output an antonym.\nInput: incoming\nOutput:", "test_query": "incoming", "prediction": "outgoing\n\nHere is a simple Python solution for this problem. This solution works by creating a dictionary that", "cleaned_prediction": "outgoing", "gt": "outgoing"}, {"input_prompt": "Given an English word, output an antonym.\nInput: advanced\nOutput:", "test_query": "advanced", "prediction": "unadvanced\nNote: Antonyms of the word 'advanced' are 'primitive','retarded", "cleaned_prediction": "unadvanced", "gt": "basic"}, {"input_prompt": "Given an English word, output an antonym.\nInput: admit\nOutput:", "test_query": "admit", "prediction": "deny\nInput: happy\nOutput: unhappy\nInput: light\nOutput: dark\nInput:", "cleaned_prediction": "deny", "gt": "deny"}, {"input_prompt": "Given an English word, output an antonym.\nInput: someone\nOutput:", "test_query": "someone", "prediction": "nobody\nExplanation: \"someone\" and \"nobody\" are antonyms.\n \n\nConstraints:\n1", "cleaned_prediction": "nobody", "gt": "no one"}, {"input_prompt": "Given an English word, output an antonym.\nInput: clumsy\nOutput:", "test_query": "clumsy", "prediction": "skillful\n\nExplanation: The antonym of \"clumsy\" is \"skillful\".\n\n```", "cleaned_prediction": "skillful", "gt": "graceful"}, {"input_prompt": "Given an English word, output an antonym.\nInput: falsehood\nOutput:", "test_query": "falsehood", "prediction": "truth\nExplanation: Antonyms are words that have opposite meanings.\nExample 2:\nInput: beautiful", "cleaned_prediction": "truth", "gt": "truth"}, {"input_prompt": "Given an English word, output an antonym.\nInput: refined\nOutput:", "test_query": "refined", "prediction": "coarse\nExplanation: Refined means fine or delicate, so an antonym is Coarse.\n```", "cleaned_prediction": "coarse", "gt": "crude"}, {"input_prompt": "Given an English word, output an antonym.\nInput: bitter\nOutput:", "test_query": "bitter", "prediction": "sweet\n\n## Step 1: Identify the type of word and its connotation\nThe given word", "cleaned_prediction": "sweet", "gt": "sweet"}, {"input_prompt": "Given an English word, output an antonym.\nInput: let\nOutput:", "test_query": "let", "prediction": "left\n\nExplanation: antonyms are given based on the prefixes\n\nProblem\n================\n\nWrite a function", "cleaned_prediction": "left", "gt": "prevent"}, {"input_prompt": "Given an English word, output an antonym.\nInput: familiar\nOutput:", "test_query": "familiar", "prediction": "strange\n\nExplanation: An antonym of \"familiar\" is \"strange\". It is because", "cleaned_prediction": "strange", "gt": "unfamiliar"}, {"input_prompt": "Given an English word, output an antonym.\nInput: humility\nOutput:", "test_query": "humility", "prediction": "haughtiness\nNote: Antonyms are not always exact opposites, but in this case,", "cleaned_prediction": "haughtiness", "gt": "pride"}, {"input_prompt": "Given an English word, output an antonym.\nInput: dense\nOutput:", "test_query": "dense", "prediction": "sparse\n\nGiven an English word, output a synonym.\nInput: dense\nOutput: thick\n\nGiven", "cleaned_prediction": "sparse", "gt": "sparse"}, {"input_prompt": "Given an English word, output an antonym.\nInput: miss\nOutput:", "test_query": "miss", "prediction": "Hit\n\nNote: There are many possible antonyms for \"miss\". I will be accepting any one", "cleaned_prediction": "Hit", "gt": "hit"}, {"input_prompt": "Given an English word, output an antonym.\nInput: optional\nOutput:", "test_query": "optional", "prediction": "required\nExplanation:\nWe are given an English word and we need to output an antonym. The", "cleaned_prediction": "required", "gt": "mandatory"}, {"input_prompt": "Given an English word, output an antonym.\nInput: local\nOutput:", "test_query": "local", "prediction": "global\n\nGiven an English word, output a synonym.\nInput: small\nOutput: tiny\n\nGiven", "cleaned_prediction": "global", "gt": "foreign"}, {"input_prompt": "Given an English word, output an antonym.\nInput: uneasy\nOutput:", "test_query": "uneasy", "prediction": "calm\n\nIn this example, the antonym of \"uneasy\" is \"calm\".", "cleaned_prediction": "calm", "gt": "comfortable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: wisdom\nOutput:", "test_query": "wisdom", "prediction": "foolishness\n\nFunction to find the antonym of an English word\n```python\ndef antonym", "cleaned_prediction": "foolishness", "gt": "foolishness"}, {"input_prompt": "Given an English word, output an antonym.\nInput: speed\nOutput:", "test_query": "speed", "prediction": "slowness\n\nGiven a time in 12-hour AM/PM format, determine if it is", "cleaned_prediction": "slowness", "gt": "slowness"}, {"input_prompt": "Given an English word, output an antonym.\nInput: catalyst\nOutput:", "test_query": "catalyst", "prediction": "inhibitor\n\nIt seems the antonyms are based on the second letter of the word. For example:", "cleaned_prediction": "inhibitor", "gt": "inhibitor"}, {"input_prompt": "Given an English word, output an antonym.\nInput: protagonist\nOutput:", "test_query": "protagonist", "prediction": "antagonist\n\nInput: positive\nOutput: negative\n\nInput: hot\nOutput: cold\n\nInput:", "cleaned_prediction": "antagonist", "gt": "antagonist"}, {"input_prompt": "Given an English word, output an antonym.\nInput: white\nOutput:", "test_query": "white", "prediction": "black\n\nInput: fast\nOutput: slow\n\nInput: big\nOutput: small\n\nYou can", "cleaned_prediction": "black", "gt": "black"}, {"input_prompt": "Given an English word, output an antonym.\nInput: specified\nOutput:", "test_query": "specified", "prediction": "designated\n\nGiven an English word, output a synonym.\nInput: specified\nOutput: designated\n\n###", "cleaned_prediction": "designated", "gt": "unspecified"}, {"input_prompt": "Given an English word, output an antonym.\nInput: rude\nOutput:", "test_query": "rude", "prediction": "polite\nInput: happy\nOutput: sad\n\n### Antonyms Dictionary\n\nWe'll use a dictionary", "cleaned_prediction": "polite", "gt": "polite"}, {"input_prompt": "Given an English word, output an antonym.\nInput: tall\nOutput:", "test_query": "tall", "prediction": "short\n\nHere is how you can do it with JavaScript:\n\n```javascript\nfunction getAntonym(word", "cleaned_prediction": "short", "gt": "short"}, {"input_prompt": "Given an English word, output an antonym.\nInput: sink\nOutput:", "test_query": "sink", "prediction": "rise\nGiven an English word, output a rhyme.\nInput: cake\nOutput: make\nGiven", "cleaned_prediction": "rise", "gt": "float"}, {"input_prompt": "Given an English word, output an antonym.\nInput: intelligent\nOutput:", "test_query": "intelligent", "prediction": "stupid\n\nNote: This is a simple version of the antonym problem.  The antonyms I", "cleaned_prediction": "stupid", "gt": "unintelligent"}, {"input_prompt": "Given an English word, output an antonym.\nInput: overt\nOutput:", "test_query": "overt", "prediction": "covert\n\nGiven an English word, output a synonym.\nInput: quick\nOutput: speedy\n\nGiven", "cleaned_prediction": "covert", "gt": "covert"}, {"input_prompt": "Given an English word, output an antonym.\nInput: foul\nOutput:", "test_query": "foul", "prediction": "clean\n\n## Step 1: Understand the task\nWe need to find an antonym for the", "cleaned_prediction": "clean", "gt": "fair"}, {"input_prompt": "Given an English word, output an antonym.\nInput: improvement\nOutput:", "test_query": "improvement", "prediction": "deterioration\n\nGiven a set of English words, output the antonyms of the words.\nInput: [", "cleaned_prediction": "deterioration", "gt": "deterioration"}, {"input_prompt": "Given an English word, output an antonym.\nInput: terrestrial\nOutput:", "test_query": "terrestrial", "prediction": "extraterrestrial\n\nTo solve this problem, we need to understand the meaning of the word \"ter", "cleaned_prediction": "extraterrestrial", "gt": "aquatic"}, {"input_prompt": "Given an English word, output an antonym.\nInput: martial\nOutput:", "test_query": "martial", "prediction": "pacifist\n\nInput: fierce\nOutput: mild\n\nInput: calm\nOutput: chaotic", "cleaned_prediction": "pacifist", "gt": "civilian"}, {"input_prompt": "Given an English word, output an antonym.\nInput: front\nOutput:", "test_query": "front", "prediction": "back\n\nGiven a string, output the string with all characters lowercased.\nInput: FOO", "cleaned_prediction": "back", "gt": "back"}, {"input_prompt": "Given an English word, output an antonym.\nInput: lie\nOutput:", "test_query": "lie", "prediction": "truth\n\nThis problem is very simple, but requires knowledge of antonyms of English words.\nThis is", "cleaned_prediction": "truth", "gt": "truth"}, {"input_prompt": "Given an English word, output an antonym.\nInput: northwest\nOutput:", "test_query": "northwest", "prediction": "southeast\n\nNote: Antonyms are typically the opposite of the word, in this direction. For this", "cleaned_prediction": "southeast", "gt": "southeast"}, {"input_prompt": "Given an English word, output an antonym.\nInput: red\nOutput:", "test_query": "red", "prediction": "green\nGiven an English word, output a synonym.\nInput: hot\nOutput: warm\nGiven", "cleaned_prediction": "green", "gt": "blue"}, {"input_prompt": "Given an English word, output an antonym.\nInput: worn\nOutput:", "test_query": "worn", "prediction": "new\nInput: old\nOutput: new\nInput: new\nOutput: old\n\nI don", "cleaned_prediction": "new", "gt": "new"}, {"input_prompt": "Given an English word, output an antonym.\nInput: kid\nOutput:", "test_query": "kid", "prediction": "adult\n\nInput: big\nOutput: small\n\nInput: happy\nOutput: sad\n\nI tried", "cleaned_prediction": "adult", "gt": "adult"}, {"input_prompt": "Given an English word, output an antonym.\nInput: periodic\nOutput:", "test_query": "periodic", "prediction": "aperiodic\n\ndef antonym(word):\n    antonyms = {\n        'periodic': '", "cleaned_prediction": "aperiodic", "gt": "aperiodic"}, {"input_prompt": "Given an English word, output an antonym.\nInput: misconception\nOutput:", "test_query": "misconception", "prediction": "perception\nNote: In this problem, we assume that the antonym of a word is the word", "cleaned_prediction": "perception", "gt": "understanding"}, {"input_prompt": "Given an English word, output an antonym.\nInput: difficult\nOutput:", "test_query": "difficult", "prediction": "easy\nInput: big\nOutput: small\nInput: happy\nOutput: sad\nInput:", "cleaned_prediction": "easy", "gt": "easy"}, {"input_prompt": "Given an English word, output an antonym.\nInput: lower\nOutput:", "test_query": "lower", "prediction": "upper\nInput: fast\nOutput: slow\nInput: long\nOutput: short\nInput:", "cleaned_prediction": "upper", "gt": "upper"}, {"input_prompt": "Given an English word, output an antonym.\nInput: drunk\nOutput:", "test_query": "drunk", "prediction": "sober\n\nInput: happy\nOutput: sad\n\nInput: good\nOutput: bad\n\nInput:", "cleaned_prediction": "sober", "gt": "sober"}, {"input_prompt": "Given an English word, output an antonym.\nInput: unorthodox\nOutput:", "test_query": "unorthodox", "prediction": "conventional\n\nNote: There are many possible antonyms. This solution uses WordNet, a lexical database", "cleaned_prediction": "conventional", "gt": "orthodox"}, {"input_prompt": "Given an English word, output an antonym.\nInput: union\nOutput:", "test_query": "union", "prediction": "division\n\nExplanation: \"union\" and \"division\" are antonyms.\n\nNote: The antonym", "cleaned_prediction": "division", "gt": "division"}, {"input_prompt": "Given an English word, output an antonym.\nInput: stuff\nOutput:", "test_query": "stuff", "prediction": "emptiness\nInput: happy\nOutput: sad\nInput: light\nOutput: dark\n\n```", "cleaned_prediction": "emptiness", "gt": "empty"}, {"input_prompt": "Given an English word, output an antonym.\nInput: major\nOutput:", "test_query": "major", "prediction": "minor\nGiven an English word, output an antonym.\nInput: loud\nOutput: soft", "cleaned_prediction": "minor", "gt": "minor"}, {"input_prompt": "Given an English word, output an antonym.\nInput: peripheral\nOutput:", "test_query": "peripheral", "prediction": "central\n\nimport random\ndef find_antonym(word):\n    antonyms = {\n        \"peripheral", "cleaned_prediction": "central", "gt": "central"}, {"input_prompt": "Given an English word, output an antonym.\nInput: worldly\nOutput:", "test_query": "worldly", "prediction": "worldly is antonymous to unworldly.\n\nExplanation:\n- \"worldly\" refers to earthly,", "cleaned_prediction": "worldly is antonymous to unworldly.", "gt": "spiritual"}, {"input_prompt": "Given an English word, output an antonym.\nInput: rapid\nOutput:", "test_query": "rapid", "prediction": "slow\nExplanation: A word with the opposite meaning of rapid.\nNote: In this case, \"", "cleaned_prediction": "slow", "gt": "slow"}, {"input_prompt": "Given an English word, output an antonym.\nInput: unmarked\nOutput:", "test_query": "unmarked", "prediction": "marked\nExample Inputs and Outputs:\n\nInput: perfect\nOutput: imperfect\n\nInput: beautiful\nOutput", "cleaned_prediction": "marked", "gt": "marked"}, {"input_prompt": "Given an English word, output an antonym.\nInput: ladies\nOutput:", "test_query": "ladies", "prediction": "gentlemen\nExplanation: ladies is a female noun, and its antonym would be a male noun.", "cleaned_prediction": "gentlemen", "gt": "gentlemen"}, {"input_prompt": "Given an English word, output an antonym.\nInput: lesbian\nOutput:", "test_query": "lesbian", "prediction": "heterosexual\n\nGiven a number, output its Roman numeral representation.\nInput: 123\nOutput: C", "cleaned_prediction": "heterosexual", "gt": "straight"}, {"input_prompt": "Given an English word, output an antonym.\nInput: plain\nOutput:", "test_query": "plain", "prediction": "ornate\n\nHere's a simple solution in Java that uses a dictionary to map antonyms:\n```", "cleaned_prediction": "ornate", "gt": "fancy"}, {"input_prompt": "Given an English word, output an antonym.\nInput: head\nOutput:", "test_query": "head", "prediction": "tail\nInput: dark\nOutput: light\nInput: fast\nOutput: slow\nInput:", "cleaned_prediction": "tail", "gt": "tail"}, {"input_prompt": "Given an English word, output an antonym.\nInput: displeasure\nOutput:", "test_query": "displeasure", "prediction": "pleasure\nGiven a number, output the word \"one\" if the number is 1, otherwise", "cleaned_prediction": "pleasure", "gt": "pleasure"}, {"input_prompt": "Given an English word, output an antonym.\nInput: arise\nOutput:", "test_query": "arise", "prediction": "sink\n\nFor the purpose of this problem, an antonym is defined as a word that is derived", "cleaned_prediction": "sink", "gt": "settle"}, {"input_prompt": "Given an English word, output an antonym.\nInput: symptom\nOutput:", "test_query": "symptom", "prediction": "remission\n\nIn this exercise, we will use a dictionary to store antonyms for certain words.", "cleaned_prediction": "remission", "gt": "cure"}, {"input_prompt": "Given an English word, output an antonym.\nInput: dusty\nOutput:", "test_query": "dusty", "prediction": "clean\n\nGiven an English word, output a synonym.\nInput: dusty\nOutput: dirty\n\nGiven", "cleaned_prediction": "clean", "gt": "clean"}, {"input_prompt": "Given an English word, output an antonym.\nInput: location\nOutput:", "test_query": "location", "prediction": "displacement\n\nExplanation: The antonym of location is displacement.\nNote: Antonyms of words can sometimes", "cleaned_prediction": "displacement", "gt": "displacement"}, {"input_prompt": "Given an English word, output an antonym.\nInput: coloured\nOutput:", "test_query": "coloured", "prediction": "monochromatic\n\nInput: random\nOutput: predictable\n\nInput: digital\nOutput: analog", "cleaned_prediction": "monochromatic", "gt": "monochrome"}, {"input_prompt": "Given an English word, output an antonym.\nInput: retrieve\nOutput:", "test_query": "retrieve", "prediction": "store\n\nHere is a simple Python code to solve the antonyms of words:\n```python\nant", "cleaned_prediction": "store", "gt": "discard"}, {"input_prompt": "Given an English word, output an antonym.\nInput: mad\nOutput:", "test_query": "mad", "prediction": "glad\n\nInput: big\nOutput: small\n\nInput: happy\nOutput: sad\n\nInput:", "cleaned_prediction": "glad", "gt": "sane"}, {"input_prompt": "Given an English word, output an antonym.\nInput: dark\nOutput:", "test_query": "dark", "prediction": "light\nExplanation: dark and light are antonyms, i.e., they mean the opposite.\n\nExample", "cleaned_prediction": "light", "gt": "light"}, {"input_prompt": "Given an English word, output an antonym.\nInput: constructive\nOutput:", "test_query": "constructive", "prediction": "destructive\n\nExplanation: The antonym of a word is found by removing its prefix and suffix until a", "cleaned_prediction": "destructive", "gt": "destructive"}, {"input_prompt": "Given an English word, output an antonym.\nInput: shallow\nOutput:", "test_query": "shallow", "prediction": "deep\n\nExplanation: The word'shallow' is an adjective. Its antonym is 'deep", "cleaned_prediction": "deep", "gt": "deep"}, {"input_prompt": "Given an English word, output an antonym.\nInput: genuine\nOutput:", "test_query": "genuine", "prediction": "fake\nGiven an English word, output a synonym.\nInput: happy\nOutput: joyful\n\n##", "cleaned_prediction": "fake", "gt": "fake"}, {"input_prompt": "Given an English word, output an antonym.\nInput: short\nOutput:", "test_query": "short", "prediction": "long\nExplanation: Short and long are antonyms.\nInput: cold\nOutput: hot\nExplanation", "cleaned_prediction": "long", "gt": "long"}, {"input_prompt": "Given an English word, output an antonym.\nInput: evolution\nOutput:", "test_query": "evolution", "prediction": "devolution\n\nExplanation: The antonym of evolution is devolution. An antonym is a word", "cleaned_prediction": "devolution", "gt": "devolution"}, {"input_prompt": "Given an English word, output an antonym.\nInput: line\nOutput:", "test_query": "line", "prediction": "solitude\n\nGiven an English word, output a word with the same length, but not the same word", "cleaned_prediction": "solitude", "gt": "curve"}, {"input_prompt": "Given an English word, output an antonym.\nInput: field\nOutput:", "test_query": "field", "prediction": "city\n\nGiven a number, output the opposite of that number.\nInput: 5\nOutput:", "cleaned_prediction": "city", "gt": "city"}, {"input_prompt": "Given an English word, output an antonym.\nInput: convergence\nOutput:", "test_query": "convergence", "prediction": "divergence\nExplanation: Convergence is the act of coming together, whereas divergence is the act of moving", "cleaned_prediction": "divergence", "gt": "divergence"}, {"input_prompt": "Given an English word, output an antonym.\nInput: dim\nOutput:", "test_query": "dim", "prediction": "bright\nGiven an English word, output an first letter of the word.\nInput: cat\nOutput", "cleaned_prediction": "bright", "gt": "bright"}, {"input_prompt": "Given an English word, output an antonym.\nInput: venerable\nOutput:", "test_query": "venerable", "prediction": "youthful\nExplanation: youthful is antonym of venerable\nInput: beautiful\nOutput: ugly", "cleaned_prediction": "youthful", "gt": "disreputable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: irresponsible\nOutput:", "test_query": "irresponsible", "prediction": "responsible\n\nExplanation: \nTo generate an antonym, we need to find a word that is opposite", "cleaned_prediction": "responsible", "gt": "responsible"}, {"input_prompt": "Given an English word, output an antonym.\nInput: northwestern\nOutput:", "test_query": "northwestern", "prediction": "southeastern\nGiven an English word, output an direct opposite in meaning.\n\nInput: happy\nOutput:", "cleaned_prediction": "southeastern", "gt": "southeastern"}, {"input_prompt": "Given an English word, output an antonym.\nInput: defensive\nOutput:", "test_query": "defensive", "prediction": "offensive\nInput: aggressive\nOutput: passive\nInput: calm\nOutput: frantic\nInput:", "cleaned_prediction": "offensive", "gt": "offensive"}, {"input_prompt": "Given an English word, output an antonym.\nInput: original\nOutput:", "test_query": "original", "prediction": "foreign\n\n## Step 1: Understand the concept of antonyms\nAn antonym is a word", "cleaned_prediction": "foreign", "gt": "copy"}, {"input_prompt": "Given an English word, output an antonym.\nInput: subconscious\nOutput:", "test_query": "subconscious", "prediction": "conscious\nExplanation: The antonym of \"subconscious\" is \"conscious\".\nInput: happiness", "cleaned_prediction": "conscious", "gt": "conscious"}, {"input_prompt": "Given an English word, output an antonym.\nInput: copy\nOutput:", "test_query": "copy", "prediction": "delete\n\nHere is a simple solution in Python:\n```\ndef find_antonym(word):\n    ant", "cleaned_prediction": "delete", "gt": "original"}, {"input_prompt": "Given an English word, output an antonym.\nInput: attract\nOutput:", "test_query": "attract", "prediction": "repel\n\nInput: grow\nOutput: shrink\n\nInput: happy\nOutput: sad\n\nInput", "cleaned_prediction": "repel", "gt": "repel"}, {"input_prompt": "Given an English word, output an antonym.\nInput: magnetic\nOutput:", "test_query": "magnetic", "prediction": "nonmagnetic\nExplanation:\nThe word \"magnetic\" can be divided into \"magnetic\"", "cleaned_prediction": "nonmagnetic", "gt": "nonmagnetic"}, {"input_prompt": "Given an English word, output an antonym.\nInput: injustice\nOutput:", "test_query": "injustice", "prediction": "justice\n\nExplanation: The antonym of injustice is justice.\n\n```python\ndef find_antonym(word", "cleaned_prediction": "justice", "gt": "justice"}, {"input_prompt": "Given an English word, output an antonym.\nInput: mortality\nOutput:", "test_query": "mortality", "prediction": "immortality\n\nHere is a simple Python function that does this:\n\n```python\ndef antonym(word", "cleaned_prediction": "immortality", "gt": "immortality"}, {"input_prompt": "Given an English word, output an antonym.\nInput: laughter\nOutput:", "test_query": "laughter", "prediction": "sobbing\nGiven an English word, output a synonym.\nInput: laughter\nOutput: guff", "cleaned_prediction": "sobbing", "gt": "tears"}, {"input_prompt": "Given an English word, output an antonym.\nInput: inhuman\nOutput:", "test_query": "inhuman", "prediction": "human\n\nExplanation: \"inhuman\" means \"not human\". Therefore, an antonym of \"", "cleaned_prediction": "human", "gt": "human"}, {"input_prompt": "Given an English word, output an antonym.\nInput: heavenly\nOutput:", "test_query": "heavenly", "prediction": "hellish\n\nExplanation: Antonyms of 'heavenly' are 'hellish' or '", "cleaned_prediction": "hellish", "gt": "hellish"}, {"input_prompt": "Given an English word, output an antonym.\nInput: half\nOutput:", "test_query": "half", "prediction": "Whole\n\n## Step 1: Understand the concept of antonyms\nAntonyms are words that are", "cleaned_prediction": "Whole", "gt": "full"}, {"input_prompt": "Given an English word, output an antonym.\nInput: unpopular\nOutput:", "test_query": "unpopular", "prediction": "popular\nNote: The antonym is not always a simple reversal or a word that sounds similar,", "cleaned_prediction": "popular", "gt": "popular"}, {"input_prompt": "Given an English word, output an antonym.\nInput: recession\nOutput:", "test_query": "recession", "prediction": "boom\nGiven a string of single characters, output the same string.\nInput: hello\nOutput:", "cleaned_prediction": "boom", "gt": "boom"}, {"input_prompt": "Given an English word, output an antonym.\nInput: poor\nOutput:", "test_query": "poor", "prediction": "rich\nInput: happy\nOutput: sad\nInput: big\nOutput: small\nInput:", "cleaned_prediction": "rich", "gt": "rich"}, {"input_prompt": "Given an English word, output an antonym.\nInput: noisy\nOutput:", "test_query": "noisy", "prediction": "silent\nExplanation: Noisy means having a high level of noise or loud sounds. Silent means having", "cleaned_prediction": "silent", "gt": "quiet"}, {"input_prompt": "Given an English word, output an antonym.\nInput: specialize\nOutput:", "test_query": "specialize", "prediction": "generalize\nNote: Antonyms can be subjective, and there are many possible antonyms for a given", "cleaned_prediction": "generalize", "gt": "generalize"}, {"input_prompt": "Given an English word, output an antonym.\nInput: polite\nOutput:", "test_query": "polite", "prediction": "rude\n\nInput: fast\nOutput: slow\nInput: happy\nOutput: sad\n\nInput:", "cleaned_prediction": "rude", "gt": "rude"}, {"input_prompt": "Given an English word, output an antonym.\nInput: spacious\nOutput:", "test_query": "spacious", "prediction": "cramped\n\nExplanation:\nThe antonym of \"spacious\" is \"cramped\". Both words have", "cleaned_prediction": "cramped", "gt": "cramped"}, {"input_prompt": "Given an English word, output an antonym.\nInput: hideous\nOutput:", "test_query": "hideous", "prediction": "beautiful\n\nInput: fast\nOutput: slow\n\nInput: tired\nOutput: awake\n```python", "cleaned_prediction": "beautiful", "gt": "beautiful"}, {"input_prompt": "Given an English word, output an antonym.\nInput: judicial\nOutput:", "test_query": "judicial", "prediction": "political\n\nNote: Judicial and political are antonyms in this case because a judicial body (such as", "cleaned_prediction": "political", "gt": "extrajudicial"}, {"input_prompt": "Given an English word, output an antonym.\nInput: observational\nOutput:", "test_query": "observational", "prediction": "participatory\n\nGiven an English word, output its opposite meaning.\nInput: huge\nOutput: small", "cleaned_prediction": "participatory", "gt": "theoretical"}, {"input_prompt": "Given an English word, output an antonym.\nInput: shorten\nOutput:", "test_query": "shorten", "prediction": "lengthen\n\n## Step 1: Understand the task\nThe task is to write a function that", "cleaned_prediction": "lengthen", "gt": "lengthen"}, {"input_prompt": "Given an English word, output an antonym.\nInput: gay\nOutput:", "test_query": "gay", "prediction": "straight\n\nNote: Antonyms are not always perfect, but they can be useful as a rough approximation", "cleaned_prediction": "straight", "gt": "straight"}, {"input_prompt": "Given an English word, output an antonym.\nInput: insignificant\nOutput:", "test_query": "insignificant", "prediction": "significant\n\nExplanation:\nInsignificant means lacking importance or consequence. An antonym of insignificant is significant,", "cleaned_prediction": "significant", "gt": "significant"}, {"input_prompt": "Given an English word, output an antonym.\nInput: stable\nOutput:", "test_query": "stable", "prediction": "unstable\n\nInput: calm\nOutput: turbulent\n\nInput: peaceful\nOutput: violent\n\nInput:", "cleaned_prediction": "unstable", "gt": "unstable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: concentration\nOutput:", "test_query": "concentration", "prediction": "distraction\n\nInput: silence\nOutput: noise\n\nInput: chaos\nOutput: order\n\nHere is", "cleaned_prediction": "distraction", "gt": "distraction"}, {"input_prompt": "Given an English word, output an antonym.\nInput: fertile\nOutput:", "test_query": "fertile", "prediction": "barren\n\nInput: fast\nOutput: slow\n\nInput: large\nOutput: small\n\nInput:", "cleaned_prediction": "barren", "gt": "infertile"}, {"input_prompt": "Given an English word, output an antonym.\nInput: delete\nOutput:", "test_query": "delete", "prediction": "Insert\n\nExplanation: Delete is the opposite of insert.\nThis is a simple implementation of word antonyms", "cleaned_prediction": "Insert", "gt": "save"}, {"input_prompt": "Given an English word, output an antonym.\nInput: powdered\nOutput:", "test_query": "powdered", "prediction": "liquid\nInput: happy\nOutput: sad\n\nI am using Python as my programming language.", "cleaned_prediction": "liquid", "gt": "solid"}, {"input_prompt": "Given an English word, output an antonym.\nInput: conserve\nOutput:", "test_query": "conserve", "prediction": "waste\nGiven a date, output the date one month after.\nInput: 10/10/", "cleaned_prediction": "waste", "gt": "waste"}, {"input_prompt": "Given an English word, output an antonym.\nInput: central\nOutput:", "test_query": "central", "prediction": "peripheral\nInput: strong\nOutput: weak\nInput: big\nOutput: small\nInput:", "cleaned_prediction": "peripheral", "gt": "peripheral"}, {"input_prompt": "Given an English word, output an antonym.\nInput: bulky\nOutput:", "test_query": "bulky", "prediction": "slender\n\nInput: fast\nOutput: slow\n\nInput: sunny\nOutput: cloudy\n\nInput:", "cleaned_prediction": "slender", "gt": "compact"}, {"input_prompt": "Given an English word, output an antonym.\nInput: downhill\nOutput:", "test_query": "downhill", "prediction": "uphill\n\nExplanation: Antonyms are words that have opposite meanings.\n\nNote: This is a basic problem", "cleaned_prediction": "uphill", "gt": "uphill"}, {"input_prompt": "Given an English word, output an antonym.\nInput: alter\nOutput:", "test_query": "alter", "prediction": "change\n\nHere are some examples of antonyms:\n```\nInput: loud\nOutput: soft", "cleaned_prediction": "change", "gt": "preserve"}, {"input_prompt": "Given an English word, output an antonym.\nInput: note\nOutput:", "test_query": "note", "prediction": "warning\nInput: right\nOutput: left\nInput: fast\nOutput: slow\n\nHere are", "cleaned_prediction": "warning", "gt": "silence"}, {"input_prompt": "Given an English word, output an antonym.\nInput: death\nOutput:", "test_query": "death", "prediction": "life\n\nExplanation: An antonym is a word that has the opposite meaning to another word. In", "cleaned_prediction": "life", "gt": "life"}, {"input_prompt": "Given an English word, output an antonym.\nInput: sister\nOutput:", "test_query": "sister", "prediction": "brother\nInput: run\nOutput: walk\nInput: fast\nOutput: slow\nInput:", "cleaned_prediction": "brother", "gt": "brother"}, {"input_prompt": "Given an English word, output an antonym.\nInput: income\nOutput:", "test_query": "income", "prediction": "expense\n\nGiven an English word, output a synonym.\nInput: big\nOutput: large\n\nGiven", "cleaned_prediction": "expense", "gt": "expense"}, {"input_prompt": "Given an English word, output an antonym.\nInput: output\nOutput:", "test_query": "output", "prediction": "input\nInput: begin\nOutput: end\nInput: fast\nOutput: slow\nInput:", "cleaned_prediction": "input", "gt": "input"}, {"input_prompt": "Given an English word, output an antonym.\nInput: objective\nOutput:", "test_query": "objective", "prediction": "subjective\n\nObjective is an adjective meaning unbiased, impartial, or fair, so its antonym would be", "cleaned_prediction": "subjective", "gt": "subjective"}, {"input_prompt": "Given an English word, output an antonym.\nInput: beast\nOutput:", "test_query": "beast", "prediction": "animal\nExplanation: The antonym of \"beast\" is \"animal\".\nInput: flower", "cleaned_prediction": "animal", "gt": "beauty"}, {"input_prompt": "Given an English word, output an antonym.\nInput: everything\nOutput:", "test_query": "everything", "prediction": "nothing\nExplanation: The antonym of \"everything\" is \"nothing\". Given this, the program", "cleaned_prediction": "nothing", "gt": "nothing"}, {"input_prompt": "Given an English word, output an antonym.\nInput: nationalist\nOutput:", "test_query": "nationalist", "prediction": "cosmopolitan\nExplanation: These words are antonyms as nationalist refers to love of country or nation while", "cleaned_prediction": "cosmopolitan", "gt": "internationalist"}, {"input_prompt": "Given an English word, output an antonym.\nInput: appear\nOutput:", "test_query": "appear", "prediction": "disappear\n\nimport antonym\n\nprint(antonym.of(\"appear\")) # disappears\n```\nA", "cleaned_prediction": "disappear", "gt": "disappear"}, {"input_prompt": "Given an English word, output an antonym.\nInput: favorable\nOutput:", "test_query": "favorable", "prediction": "unfavorable\n\nInput: small\nOutput: large\n\nInput: hot\nOutput: cold\n\nI have", "cleaned_prediction": "unfavorable", "gt": "unfavorable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: tomorrow\nOutput:", "test_query": "tomorrow", "prediction": "yesterday\n\nGiven an English word, output an word that is synonymous to the given word.\nInput:", "cleaned_prediction": "yesterday", "gt": "yesterday"}, {"input_prompt": "Given an English word, output an antonym.\nInput: homeless\nOutput:", "test_query": "homeless", "prediction": "housed\nGiven an English word, output a synonym.\nInput: happy\nOutput: joyful\n\nGiven", "cleaned_prediction": "housed", "gt": "housed"}, {"input_prompt": "Given an English word, output an antonym.\nInput: unmanned\nOutput:", "test_query": "unmanned", "prediction": "manned\nExplanation: unmanned is an adjective describing a thing that is not under the control of a human", "cleaned_prediction": "manned", "gt": "manned"}, {"input_prompt": "Given an English word, output an antonym.\nInput: reward\nOutput:", "test_query": "reward", "prediction": "punishment\nInput: fast\nOutput: slow\nInput: strong\nOutput: weak\n\nIn order", "cleaned_prediction": "punishment", "gt": "punishment"}, {"input_prompt": "Given an English word, output an antonym.\nInput: absurd\nOutput:", "test_query": "absurd", "prediction": "reasonable\nExplanation: antonyms for absurd are reasonable, rational, and sensible.\nNote: antonyms", "cleaned_prediction": "reasonable", "gt": "sensible"}, {"input_prompt": "Given an English word, output an antonym.\nInput: confused\nOutput:", "test_query": "confused", "prediction": "clear\nExplanation: \"clear\" is an antonym of \"confused\".\nNote: The ant", "cleaned_prediction": "clear", "gt": "clear-minded"}, {"input_prompt": "Given an English word, output an antonym.\nInput: believable\nOutput:", "test_query": "believable", "prediction": "unbelievable\nGiven an English word, output the opposite of the word in English.\n\n## Step 1", "cleaned_prediction": "unbelievable", "gt": "unbelievable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: harass\nOutput:", "test_query": "harass", "prediction": "placate\n\n## Step 1: Understand the concept of antonyms\nTo find an antonym", "cleaned_prediction": "placate", "gt": "comfort"}, {"input_prompt": "Given an English word, output an antonym.\nInput: background\nOutput:", "test_query": "background", "prediction": "foreground\n\nInput: hot\nOutput: cold\n\nInput: expensive\nOutput: cheap\n\nInput:", "cleaned_prediction": "foreground", "gt": "foreground"}, {"input_prompt": "Given an English word, output an antonym.\nInput: fertility\nOutput:", "test_query": "fertility", "prediction": "infertile\n\nExplanation:\nWe can achieve this by taking the input word, splitting it into parts", "cleaned_prediction": "infertile", "gt": "infertility"}, {"input_prompt": "Given an English word, output an antonym.\nInput: dotted\nOutput:", "test_query": "dotted", "prediction": "undotted\n\nThe main idea is to swap the two parts of the word. The first part,", "cleaned_prediction": "undotted", "gt": "solid"}, {"input_prompt": "Given an English word, output an antonym.\nInput: civilian\nOutput:", "test_query": "civilian", "prediction": "military\n\nGiven a list of words, output all antonyms.\nInput: [civilian, brave", "cleaned_prediction": "military", "gt": "military"}, {"input_prompt": "Given an English word, output an antonym.\nInput: expenditure\nOutput:", "test_query": "expenditure", "prediction": "revenue\n\nExplanation: An antonym of the word \"expenditure\" is \"revenue\".", "cleaned_prediction": "revenue", "gt": "income"}, {"input_prompt": "Given an English word, output an antonym.\nInput: intentional\nOutput:", "test_query": "intentional", "prediction": "unintentional\n\nHere's a simple code snippet in Python that can generate an antonym for a given", "cleaned_prediction": "unintentional", "gt": "accidental"}, {"input_prompt": "Given an English word, output an antonym.\nInput: criticize\nOutput:", "test_query": "criticize", "prediction": "praise\n\nGiven an English word, output a synonym.\nInput: laugh\nOutput: smile\n\nGiven", "cleaned_prediction": "praise", "gt": "praise"}, {"input_prompt": "Given an English word, output an antonym.\nInput: discomfort\nOutput:", "test_query": "discomfort", "prediction": "comfort\n\nGiven a noun, output its plural form.\nInput: cat\nOutput: cats\n\nGiven", "cleaned_prediction": "comfort", "gt": "comfort"}, {"input_prompt": "Given an English word, output an antonym.\nInput: relax\nOutput:", "test_query": "relax", "prediction": "energize\n\nGiven an English word, output a synonym.\nInput: walk\nOutput: stroll", "cleaned_prediction": "energize", "gt": "stress"}, {"input_prompt": "Given an English word, output an antonym.\nInput: extra\nOutput:", "test_query": "extra", "prediction": "less\nGiven a pair of English words, output the antonym of the word with the greater value", "cleaned_prediction": "less", "gt": "lacking"}, {"input_prompt": "Given an English word, output an antonym.\nInput: sacred\nOutput:", "test_query": "sacred", "prediction": "profane\nGiven a word, output a synonym.\nInput: ancient\nOutput: archaic", "cleaned_prediction": "profane", "gt": "profane"}, {"input_prompt": "Given an English word, output an antonym.\nInput: plentiful\nOutput:", "test_query": "plentiful", "prediction": "scarce\n\nTo do this, we need a list of antonyms in a dictionary.  We can", "cleaned_prediction": "scarce", "gt": "scarce"}, {"input_prompt": "Given an English word, output an antonym.\nInput: moral\nOutput:", "test_query": "moral", "prediction": "immoral\nGiven a word in English, output a word that is its antonym.\n\nNote: Ant", "cleaned_prediction": "immoral", "gt": "immoral"}, {"input_prompt": "Given an English word, output an antonym.\nInput: smart\nOutput:", "test_query": "smart", "prediction": "dumb\n\nGiven a number, output the opposite number.\nInput: 5\nOutput: -5", "cleaned_prediction": "dumb", "gt": "dumb"}, {"input_prompt": "Given an English word, output an antonym.\nInput: mark\nOutput:", "test_query": "mark", "prediction": "demark\n\n```python\ndef antonym(word):\n    \"\"\"\n    Given an English word, output", "cleaned_prediction": "demark", "gt": "unmark"}, {"input_prompt": "Given an English word, output an antonym.\nInput: entire\nOutput:", "test_query": "entire", "prediction": "empty\n\nExplanation: The word \u201centire\u201d means whole or complete. Its antonym is \u201c", "cleaned_prediction": "empty", "gt": "partial"}, {"input_prompt": "Given an English word, output an antonym.\nInput: treacherous\nOutput:", "test_query": "treacherous", "prediction": "benevolent\n\nThis problem seems solvable in O(1) time complexity. We can create a", "cleaned_prediction": "benevolent", "gt": "trustworthy"}, {"input_prompt": "Given an English word, output an antonym.\nInput: inaccessible\nOutput:", "test_query": "inaccessible", "prediction": "accessible\nInput: old\nOutput: new\nInput: beautiful\nOutput: ugly\nInput:", "cleaned_prediction": "accessible", "gt": "accessible"}, {"input_prompt": "Given an English word, output an antonym.\nInput: inexpensive\nOutput:", "test_query": "inexpensive", "prediction": "expensive\nGiven an English word, output a synonym.\nInput: inexpensive\nOutput: affordable\nGiven", "cleaned_prediction": "expensive", "gt": "expensive"}, {"input_prompt": "Given an English word, output an antonym.\nInput: classify\nOutput:", "test_query": "classify", "prediction": "unify\nInput: change\nOutput: stay\n\nimport random\n\nantonyms = {\n    'classify", "cleaned_prediction": "unify", "gt": "disorganize"}, {"input_prompt": "Given an English word, output an antonym.\nInput: historical\nOutput:", "test_query": "historical", "prediction": "modern\n\nimport random\n\ndef antonym(word):\n    antonyms = {\n        \"historical\":", "cleaned_prediction": "modern", "gt": "contemporary"}, {"input_prompt": "Given an English word, output an antonym.\nInput: grow\nOutput:", "test_query": "grow", "prediction": "shrink\n\nExplanation: grow and shrink are antonyms. An antonym is a word that is opposite", "cleaned_prediction": "shrink", "gt": "shrink"}, {"input_prompt": "Given an English word, output an antonym.\nInput: repair\nOutput:", "test_query": "repair", "prediction": "damage\nInput: success\nOutput: failure\nInput: happy\nOutput: unhappy\nInput:", "cleaned_prediction": "damage", "gt": "damage"}, {"input_prompt": "Given an English word, output an antonym.\nInput: decrease\nOutput:", "test_query": "decrease", "prediction": "increase\nNote: This is a very simple task and the solution should be able to handle most common", "cleaned_prediction": "increase", "gt": "increase"}, {"input_prompt": "Given an English word, output an antonym.\nInput: visual\nOutput:", "test_query": "visual", "prediction": "invisible\n\nNote: This problem is a simple example of Natural Language Processing (NLP).\n\nTo solve", "cleaned_prediction": "invisible", "gt": "auditory"}, {"input_prompt": "Given an English word, output an antonym.\nInput: secret\nOutput:", "test_query": "secret", "prediction": "open\n\nInput: hot\nOutput: cold\n\nInput: large\nOutput: small\n\nInput:", "cleaned_prediction": "open", "gt": "public"}, {"input_prompt": "Given an English word, output an antonym.\nInput: unclear\nOutput:", "test_query": "unclear", "prediction": "clear\n\nGiven an English word, output an antonym.\nInput: large\nOutput: small", "cleaned_prediction": "clear", "gt": "clear"}, {"input_prompt": "Given an English word, output an antonym.\nInput: capable\nOutput:", "test_query": "capable", "prediction": "incapable\n\nGiven an English word, output a hyponym.\nInput: happy\nOutput: joyful", "cleaned_prediction": "incapable", "gt": "incapable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: feature\nOutput:", "test_query": "feature", "prediction": "drawback\nExplanation: The antonym of a positive word is a negative word, and vice versa.", "cleaned_prediction": "drawback", "gt": "bug"}, {"input_prompt": "Given an English word, output an antonym.\nInput: functional\nOutput:", "test_query": "functional", "prediction": "nonfunctional\nInput: useful\nOutput: useless\nInput: happy\nOutput: unhappy\nInput", "cleaned_prediction": "nonfunctional", "gt": "dysfunctional"}, {"input_prompt": "Given an English word, output an antonym.\nInput: subdued\nOutput:", "test_query": "subdued", "prediction": "wild\n\nExplanation:\nAn antonym of subdued is wild.  In the English language, subdued is", "cleaned_prediction": "wild", "gt": "vibrant"}, {"input_prompt": "Given an English word, output an antonym.\nInput: wake\nOutput:", "test_query": "wake", "prediction": "sleep\nInput: big\nOutput: small\nInput: happy\nOutput: sad\nInput:", "cleaned_prediction": "sleep", "gt": "sleep"}, {"input_prompt": "Given an English word, output an antonym.\nInput: decline\nOutput:", "test_query": "decline", "prediction": "incline\n\nExplanation: The input is a verb meaning to move downward or to refuse something. The", "cleaned_prediction": "incline", "gt": "increase"}, {"input_prompt": "Given an English word, output an antonym.\nInput: tolerance\nOutput:", "test_query": "tolerance", "prediction": "intolerance\n\nThis problem can be solved by using a dictionary and checking the antonym of a word in", "cleaned_prediction": "intolerance", "gt": "intolerance"}, {"input_prompt": "Given an English word, output an antonym.\nInput: rest\nOutput:", "test_query": "rest", "prediction": "unrest\n\nHere is the code I have so far, but I don't know how to proceed:", "cleaned_prediction": "unrest", "gt": "work"}, {"input_prompt": "Given an English word, output an antonym.\nInput: shameful\nOutput:", "test_query": "shameful", "prediction": "proud\n\nGiven an English word, output an first letter of the word.\nInput: python\nOutput", "cleaned_prediction": "proud", "gt": "honorable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: main\nOutput:", "test_query": "main", "prediction": "minor\n\nExplanation:\nThe word \"main\" can be broken down into its roots and prefixes, which", "cleaned_prediction": "minor", "gt": "secondary"}, {"input_prompt": "Given an English word, output an antonym.\nInput: analysis\nOutput:", "test_query": "analysis", "prediction": "synthesis\nNote: Synthesis is an antonym of analysis, because they are both words that describe", "cleaned_prediction": "synthesis", "gt": "synthesis"}, {"input_prompt": "Given an English word, output an antonym.\nInput: soil\nOutput:", "test_query": "soil", "prediction": "air\n\nExplanation:\nA word is a synonym of itself.\n\nInput: cold\nOutput: hot", "cleaned_prediction": "air", "gt": "sky"}, {"input_prompt": "Given an English word, output an antonym.\nInput: downside\nOutput:", "test_query": "downside", "prediction": "upside\nInput: happiness\nOutput: misery\n\ndef find_antonym(word):\n    antonyms =", "cleaned_prediction": "upside", "gt": "upside"}, {"input_prompt": "Given an English word, output an antonym.\nInput: tail\nOutput:", "test_query": "tail", "prediction": "head\nGiven an English word, output a synonym.\nInput: tail\nOutput: end\n\nGiven", "cleaned_prediction": "head", "gt": "head"}, {"input_prompt": "Given an English word, output an antonym.\nInput: contradict\nOutput:", "test_query": "contradict", "prediction": "confirm\nInput: destroy\nOutput: construct\nInput: confuse\nOutput: clarify\nInput:", "cleaned_prediction": "confirm", "gt": "agree"}, {"input_prompt": "Given an English word, output an antonym.\nInput: medieval\nOutput:", "test_query": "medieval", "prediction": "modern\n\nGiven a English word, output a synonym.\nInput: medieval\nOutput: ancient\n\nGiven", "cleaned_prediction": "modern", "gt": "modern"}, {"input_prompt": "Given an English word, output an antonym.\nInput: antagonist\nOutput:", "test_query": "antagonist", "prediction": "ally\nExplanation: An antagonist is an opponent or adversary, and an ally is a supporter or helper", "cleaned_prediction": "ally", "gt": "protagonist"}, {"input_prompt": "Given an English word, output an antonym.\nInput: lineman\nOutput:", "test_query": "lineman", "prediction": "dispatcher\nInput: driver\nOutput: passenger\nInput: student\nOutput: teacher\nInput:", "cleaned_prediction": "dispatcher", "gt": "receiver"}, {"input_prompt": "Given an English word, output an antonym.\nInput: differentiate\nOutput:", "test_query": "differentiate", "prediction": "unify\n\n# My solution\ndef antonym(word):\n    antonyms = {\n        \"differentiate", "cleaned_prediction": "unify", "gt": "integrate"}, {"input_prompt": "Given an English word, output an antonym.\nInput: colored\nOutput:", "test_query": "colored", "prediction": "uncolored\n\nGiven a word, output a synonym.\nInput: happy\nOutput: joyful", "cleaned_prediction": "uncolored", "gt": "colorless"}, {"input_prompt": "Given an English word, output an antonym.\nInput: file\nOutput:", "test_query": "file", "prediction": "open\nInput: happy\nOutput: sad\n\nThe program takes a word as input and checks if", "cleaned_prediction": "open", "gt": "delete"}, {"input_prompt": "Given an English word, output an antonym.\nInput: solid\nOutput:", "test_query": "solid", "prediction": "hollow\nInput: sharp\nOutput: dull\n\ndef antonym(word):\n    antonyms = {", "cleaned_prediction": "hollow", "gt": "liquid"}, {"input_prompt": "Given an English word, output an antonym.\nInput: playful\nOutput:", "test_query": "playful", "prediction": "dull\n```python\ndef antonym(word):\n    \"\"\"\n    Returns an antonym of the input", "cleaned_prediction": "dull", "gt": "serious"}, {"input_prompt": "Given an English word, output an antonym.\nInput: mistaken\nOutput:", "test_query": "mistaken", "prediction": "correct\n\nExplanation: An antonym of \"mistaken\" is \"correct\".\n\nNote: Antonyms", "cleaned_prediction": "correct", "gt": "correct"}, {"input_prompt": "Given an English word, output an antonym.\nInput: imaginative\nOutput:", "test_query": "imaginative", "prediction": "unimaginative\nExplanation: Antonyms for \"imaginative\" are unimaginative, uncreative, unins", "cleaned_prediction": "unimaginative", "gt": "practical"}, {"input_prompt": "Given an English word, output an antonym.\nInput: marvelous\nOutput:", "test_query": "marvelous", "prediction": "terrible\nInput: sad\nOutput: happy\nInput: fast\nOutput: slow\n\n```python", "cleaned_prediction": "terrible", "gt": "terrible"}, {"input_prompt": "Given an English word, output an antonym.\nInput: condemn\nOutput:", "test_query": "condemn", "prediction": "approve\n\nExplanation: \"Condemn\" and \"approve\" are antonyms.\nNote: The", "cleaned_prediction": "approve", "gt": "praise"}, {"input_prompt": "Given an English word, output an antonym.\nInput: outfield\nOutput:", "test_query": "outfield", "prediction": "infield\n\nGiven an English word, output a synonym.\nInput: outfield\nOutput: defense\n\nGiven", "cleaned_prediction": "infield", "gt": "infield"}, {"input_prompt": "Given an English word, output an antonym.\nInput: procedural\nOutput:", "test_query": "procedural", "prediction": "intuitive\n\nExplanation: Intuitive is the opposite of procedural, as procedural implies step-by-step and detailed", "cleaned_prediction": "intuitive", "gt": "conceptual"}, {"input_prompt": "Given an English word, output an antonym.\nInput: nuclear\nOutput:", "test_query": "nuclear", "prediction": "harmless\nExplanation: The word \"nuclear\" means capable of or related to nuclear weapons or energy", "cleaned_prediction": "harmless", "gt": "renewable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: charge\nOutput:", "test_query": "charge", "prediction": "discharge\n\nGiven a decimal number, output its Roman numeral representation.\nInput: 4\nOutput:", "cleaned_prediction": "discharge", "gt": "discharge"}, {"input_prompt": "Given an English word, output an antonym.\nInput: undergraduate\nOutput:", "test_query": "undergraduate", "prediction": "graduate\nExplanation: The antonym of \"undergraduate\" is \"graduate\", as a graduate has", "cleaned_prediction": "graduate", "gt": "graduate"}, {"input_prompt": "Given an English word, output an antonym.\nInput: new\nOutput:", "test_query": "new", "prediction": "old\n\nInput: fast\nOutput: slow\n\nInput: tall\nOutput: short\n\nNote:", "cleaned_prediction": "old", "gt": "old"}, {"input_prompt": "Given an English word, output an antonym.\nInput: penal\nOutput:", "test_query": "penal", "prediction": "remit\nGiven an English word, output a synonym.\nInput: quick\nOutput: rapid", "cleaned_prediction": "remit", "gt": "rewarding"}, {"input_prompt": "Given an English word, output an antonym.\nInput: meaningful\nOutput:", "test_query": "meaningful", "prediction": "meaningless\nInput: empty\nOutput: full\nInput: possible\nOutput: impossible\nInput:", "cleaned_prediction": "meaningless", "gt": "meaningless"}, {"input_prompt": "Given an English word, output an antonym.\nInput: thin\nOutput:", "test_query": "thin", "prediction": "plump\n\nGiven an English word, output a synonym.\nInput: big\nOutput: large", "cleaned_prediction": "plump", "gt": "thick"}, {"input_prompt": "Given an English word, output an antonym.\nInput: rivalry\nOutput:", "test_query": "rivalry", "prediction": "harmony\n\nNote: You can take this as a simple dictionary-based approach or a more complex approach that", "cleaned_prediction": "harmony", "gt": "cooperation"}, {"input_prompt": "Given an English word, output an antonym.\nInput: run\nOutput:", "test_query": "run", "prediction": "walk\nInput: big\nOutput: small\nInput: happy\nOutput: sad\nInput:", "cleaned_prediction": "walk", "gt": "walk"}, {"input_prompt": "Given an English word, output an antonym.\nInput: spiritual\nOutput:", "test_query": "spiritual", "prediction": "material\n\nimport random\nimport nltk\n\nnltk.download('wordnet')\nfrom nltk.corpus import", "cleaned_prediction": "material", "gt": "materialistic"}, {"input_prompt": "Given an English word, output an antonym.\nInput: comparative\nOutput:", "test_query": "comparative", "prediction": "Superlative\n\nGiven a date, output the date in a different format.\nInput: \"02", "cleaned_prediction": "Superlative", "gt": "superlative"}, {"input_prompt": "Given an English word, output an antonym.\nInput: probable\nOutput:", "test_query": "probable", "prediction": "improbable\n\nHow to implement the concept of antonyms? There are multiple ways to find antonyms for", "cleaned_prediction": "improbable", "gt": "improbable"}, {"input_prompt": "Given an English word, output an antonym.\nInput: circular\nOutput:", "test_query": "circular", "prediction": "non-circular\nExplanation: Non-circular is an antonym of circular, as circular refers to", "cleaned_prediction": "non-circular", "gt": "square"}, {"input_prompt": "Given an English word, output an antonym.\nInput: recreational\nOutput:", "test_query": "recreational", "prediction": "laborious\n\nNote: The antonym for recreational is laborious. This is a dictionary-based approach", "cleaned_prediction": "laborious", "gt": "professional"}, {"input_prompt": "Given an English word, output an antonym.\nInput: many\nOutput:", "test_query": "many", "prediction": "few\n\nInput: big\nOutput: small\n\nInput: hot\nOutput: cold\n\nInput:", "cleaned_prediction": "few", "gt": "few"}, {"input_prompt": "Given an English word, output an antonym.\nInput: relative\nOutput:", "test_query": "relative", "prediction": "stranger\n\nI can create a dictionary with antonyms to map words to their antonyms. The challenge", "cleaned_prediction": "stranger", "gt": "absolute"}]}