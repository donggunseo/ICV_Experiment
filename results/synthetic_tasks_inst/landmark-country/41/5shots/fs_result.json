{"score": {"exact_match": 0.8072289156626506}, "result": [{"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tudeshk Rural District\nOutput: Iran\n\nInput: Toulouges\nOutput: France\n\nInput: Montemitro\nOutput: Italy\n\nInput: Jafara\nOutput: Libya\n\nInput: Veysian Rural District\nOutput: Iran\n\nInput: Tampere Cathedral\nOutput:", "test_query": "Tampere Cathedral", "prediction": "Finland\n\nInput: Nakhon Ratchasima\nOutput: Thailand\n\nInput: Pieve", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ulundurpet\nOutput: India\n\nInput: Vinkeveen\nOutput: Netherlands\n\nInput: Tarq Rud Rural District\nOutput: Iran\n\nInput: Shoranur\nOutput: India\n\nInput: Chancelade\nOutput: France\n\nInput: Gulf of Bothnia\nOutput:", "test_query": "Gulf of Bothnia", "prediction": "Sweden\n\nInput: Murchison River\nOutput: Australia\n\nInput: Gora\u017ede", "cleaned_prediction": "Sweden", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Greater Rio de Janeiro\nOutput: Brazil\n\nInput: Piper Verlag\nOutput: Germany\n\nInput: Minamishitara District, Aichi\nOutput: Japan\n\nInput: Junnar\nOutput: India\n\nInput: Nkawkaw\nOutput: Ghana\n\nInput: Gazzola\nOutput:", "test_query": "Gazzola", "prediction": "Italy\n\nInput: Moxico\nOutput: Angola\nExplanation: The name of the province.", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Santo Stefano d'Aveto\nOutput: Italy\n\nInput: Trento\nOutput: Italy\n\nInput: Sebatik Island\nOutput: Malaysia\n\nInput: Union des forces progressistes\nOutput: Canada\n\nInput: Kluuvi\nOutput: Finland\n\nInput: Holmenkollen National Arena\nOutput:", "test_query": "Holmenkollen National Arena", "prediction": "Norway\n\nInput: Horseshoe Falls\nOutput: Canada\n\nInput: Qutub Min", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Welschnofen\nOutput: Italy\n\nInput: Minamiakita District\nOutput: Japan\n\nInput: Capolago\nOutput: Switzerland\n\nInput: Gammalsvenskby\nOutput: Ukraine\n\nInput: Steenwijk\nOutput: Netherlands\n\nInput: Desolation Lava Field\nOutput:", "test_query": "Desolation Lava Field", "prediction": "Iceland\n\nInput: Krasnoyarsk\nOutput: Russia\n\nInput: Sopron", "cleaned_prediction": "Iceland", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kfar Giladi\nOutput: Israel\n\nInput: Sulaimaniyah International Airport\nOutput: Iraq\n\nInput: Kitakami Station\nOutput: Japan\n\nInput: Manila Bay\nOutput: Philippines\n\nInput: Dawa River\nOutput: Somalia\n\nInput: Guggenheim Museum\nOutput:", "test_query": "Guggenheim Museum", "prediction": "Spain\n\nInput: National Museum of Anthropology\nOutput: Mexico\n\nInput: Saint Petersburg Metro", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Manyakheta\nOutput: India\n\nInput: Putyvl\nOutput: Ukraine\n\nInput: Kahrizak\nOutput: Iran\n\nInput: CFMJ\nOutput: Canada\n\nInput: Junnar\nOutput: India\n\nInput: Gasunie\nOutput:", "test_query": "Gasunie", "prediction": "Netherlands\n\nInput: Aitata\nOutput: Chile\n\nExplanation:\nThe given problem is a classic", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Isa Air Base\nOutput: Bahrain\n\nInput: Singel\nOutput: Netherlands\n\nInput: Pontigny Abbey\nOutput: France\n\nInput: Gmina Bodzentyn\nOutput: Poland\n\nInput: Canjuers\nOutput: France\n\nInput: Trans-Sahara Highway\nOutput:", "test_query": "Trans-Sahara Highway", "prediction": "Multiple\n```\ndef get_country(landmark):\n    landmark = landmark.title()\n    countries =", "cleaned_prediction": "Multiple", "gt": "Nigeria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: L'Escala\nOutput: Spain\n\nInput: Dewa Province\nOutput: Japan\n\nInput: Arjoun\nOutput: Syria\n\nInput: Anak Bukit\nOutput: Malaysia\n\nInput: Eibenstock\nOutput: Germany\n\nInput: Indus River\nOutput:", "test_query": "Indus River", "prediction": "Pakistan\n\nInput: Yucatan\nOutput: Mexico\n\nInput: Saint Petersburg\nOutput: Russia", "cleaned_prediction": "Pakistan", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sana'a International Airport\nOutput: Yemen\n\nInput: Ulundurpet\nOutput: India\n\nInput: Ky\u014dto Prefecture\nOutput: Japan\n\nInput: Entracque\nOutput: Italy\n\nInput: Maybach\nOutput: Germany\n\nInput: Mbale District\nOutput:", "test_query": "Mbale District", "prediction": "Uganda\n\nInput: New Hampshire\nOutput: United States\n\nInput: South Carolina\nOutput: United", "cleaned_prediction": "Uganda", "gt": "Uganda"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gmina Pokrzywnica\nOutput: Poland\n\nInput: Cubagua\nOutput: Venezuela\n\nInput: JVC Kenwood Victor Entertainment\nOutput: Japan\n\nInput: Dospat Municipality\nOutput: Bulgaria\n\nInput: Registro\nOutput: Brazil\n\nInput: Circuit des Ardennes\nOutput:", "test_query": "Circuit des Ardennes", "prediction": "Luxembourg\n\nInput: Kiskunf\u00e9legyh\u00e1zi\nOutput: Hungary\n\nInput: Gmina", "cleaned_prediction": "Luxembourg", "gt": "Belgium"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Piedecuesta\nOutput: Colombia\n\nInput: Knockmealdown Mountains\nOutput: Ireland\n\nInput: Maison du Peuple\nOutput: Belgium\n\nInput: Tsuno District, Yamaguchi\nOutput: Japan\n\nInput: Bad Camberg\nOutput: Germany\n\nInput: Mediolanum Forum\nOutput:", "test_query": "Mediolanum Forum", "prediction": "Italy\n\nInput: St Mary's Lighthouse\nOutput: England\n\nInput: Ch\u00e2teau de", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Knockmealdown Mountains\nOutput: Ireland\n\nInput: Bliesgau\nOutput: Germany\n\nInput: Ankenes\nOutput: Norway\n\nInput: Club Aurora\nOutput: Bolivia\n\nInput: Autonomous District Lok Sabha constituency\nOutput: India\n\nInput: Kaniv Reservoir\nOutput:", "test_query": "Kaniv Reservoir", "prediction": "Ukraine\n\nInput: Grand Bassa\nOutput: Liberia\n\nInput: Lake Tanganyika\nOutput", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Addanki mandal\nOutput: India\n\nInput: Avord\nOutput: France\n\nInput: Pully\nOutput: Switzerland\n\nInput: Fairfield West\nOutput: Australia\n\nInput: Mannheim City Airport\nOutput: Germany\n\nInput: Blennerville\nOutput:", "test_query": "Blennerville", "prediction": "Ireland\n\nInput: Poulton le Fylde\nOutput: England\n\nInput: Hig", "cleaned_prediction": "Ireland", "gt": "Ireland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bay\nOutput: Philippines\n\nInput: Olot\nOutput: Spain\n\nInput: Minamiarupusu\nOutput: Japan\n\nInput: Suwayq\nOutput: Oman\n\nInput: National Republican Greek League\nOutput: Greece\n\nInput: Khasavyurt\nOutput:", "test_query": "Khasavyurt", "prediction": "Russia\n\nInput: Khabarovsk\nOutput: Russia\n\nInput: G\u00e4llivare", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mirbag-e Shomali Rural District\nOutput: Iran\n\nInput: 2004 Indian Ocean earthquake\nOutput: Indonesia\n\nInput: Dwarka\nOutput: India\n\nInput: Banesh Rural District\nOutput: Iran\n\nInput: Second Rutte cabinet\nOutput: Netherlands\n\nInput: Askola\nOutput:", "test_query": "Askola", "prediction": "Iran\n\nInput: Umm Qasr\nOutput: Iraq\n\nInput: Umm Qas", "cleaned_prediction": "Iran", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guelma Province\nOutput: Algeria\n\nInput: Bliesgau\nOutput: Germany\n\nInput: Enghien-les-Bains\nOutput: France\n\nInput: Gaiola\nOutput: Italy\n\nInput: Southern Savonia\nOutput: Finland\n\nInput: Tartessos\nOutput:", "test_query": "Tartessos", "prediction": "Spain\n\nInput: Chah Bahar\nOutput: Iran\n\nInput: Kongsberg\nOutput", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Waurn Ponds\nOutput: Australia\n\nInput: Singel\nOutput: Netherlands\n\nInput: FC Anker Wismar\nOutput: Germany\n\nInput: Gmina Stara Kornica\nOutput: Poland\n\nInput: Borghetto di Vara\nOutput: Italy\n\nInput: Valdemarsvik\nOutput:", "test_query": "Valdemarsvik", "prediction": "Sweden\n\nInput: Krasnoyarsk\nOutput: Russia\n\nInput: Pazardzh", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Garabit viaduct\nOutput: France\n\nInput: Pandoh Dam\nOutput: India\n\nInput: Erbil SC\nOutput: Iraq\n\nInput: Thamshavn Line\nOutput: Norway\n\nInput: Sakarya Province\nOutput: Turkey\n\nInput: Sarnia\nOutput:", "test_query": "Sarnia", "prediction": "Canada\n\nInput: Vatnaj\u00f6kull National Park\nOutput: Iceland\n\nInput: M", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Free National Movement\nOutput: Bahamas\n\nInput: Kowsar County\nOutput: Iran\n\nInput: Aden\nOutput: Yemen\n\nInput: Nagoya University\nOutput: Japan\n\nInput: Shoranur\nOutput: India\n\nInput: Moscato d'Asti\nOutput:", "test_query": "Moscato d'Asti", "prediction": "Italy\n\nInput: Central Anatolia Region\nOutput: Turkey\n\nInput: Gmina wiejska", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: ITE College East\nOutput: Singapore\n\nInput: Band-e Kaisar\nOutput: Iran\n\nInput: Morshi\nOutput: India\n\nInput: Bearpaw Shale\nOutput: Canada\n\nInput: Bolpur\nOutput: India\n\nInput: Neighbourhoods in Kolkata\nOutput:", "test_query": "Neighbourhoods in Kolkata", "prediction": "India\n\nInput: La Vega\nOutput: Spain\n\nInput: Foshan\nOutput: China", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ponoy River\nOutput: Russia\n\nInput: Barnhartvale, Kamloops\nOutput: Canada\n\nInput: Rantum\nOutput: Germany\n\nInput: Tesco Organisation\nOutput: Germany\n\nInput: Stentoften Runestone\nOutput: Sweden\n\nInput: Saint-Jacques-de-la-Lande\nOutput:", "test_query": "Saint-Jacques-de-la-Lande", "prediction": "France\n\nInput: 3D-Reichskriegsflagge\nOutput: Germany\n\nInput", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kaunas Cathedral Basilica\nOutput: Lithuania\n\nInput: Kosi Zone\nOutput: Nepal\n\nInput: Arjoun\nOutput: Syria\n\nInput: Papantla\nOutput: Mexico\n\nInput: Himmelbjerget\nOutput: Denmark\n\nInput: Nizhneserginsky District\nOutput:", "test_query": "Nizhneserginsky District", "prediction": "Russia\n\nInput: Wewak\nOutput: Papua New Guinea\n\nInput: Saint-Pierre and", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Orpheus Island National Park\nOutput: Australia\n\nInput: Lake Caliraya\nOutput: Philippines\n\nInput: Waalhaven\nOutput: Netherlands\n\nInput: Minu District\nOutput: Iran\n\nInput: Party of National Unity\nOutput: Kenya\n\nInput: Lamongan\nOutput:", "test_query": "Lamongan", "prediction": "Indonesia\n\nInput: Kuk Island\nOutput: Canada\n\nInput: Piatra Neamt", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Morshi\nOutput: India\n\nInput: Santo Stefano d'Aveto\nOutput: Italy\n\nInput: Lauterecken-Wolfstein\nOutput: Germany\n\nInput: Valvasone\nOutput: Italy\n\nInput: Drumheller-Stettler\nOutput: Canada\n\nInput: regiopolis\nOutput:", "test_query": "regiopolis", "prediction": "Brazil\n\nNote: The solution should run under 5 seconds for a 10000 entries dictionary.", "cleaned_prediction": "Brazil", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Veyrier\nOutput: Switzerland\n\nInput: Boguchany Dam\nOutput: Russia\n\nInput: Imperia\nOutput: Italy\n\nInput: Ariake Coliseum\nOutput: Japan\n\nInput: Indira Gandhi International Airport\nOutput: India\n\nInput: Sialkot district\nOutput:", "test_query": "Sialkot district", "prediction": "Pakistan\n\nInput: Qeshm Free Zone\nOutput: Iran\n\nInput: Qamdo", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bangarapet\nOutput: India\n\nInput: Tesco Organisation\nOutput: Germany\n\nInput: Saint Gayane Church\nOutput: Armenia\n\nInput: Swedish Orphan Biovitrum\nOutput: Sweden\n\nInput: Foothills-Rocky View\nOutput: Canada\n\nInput: Cunter\nOutput:", "test_query": "Cunter", "prediction": "Switzerland\n\nInput: Toulouse\nOutput: France\n\nInput: Gavle\nOutput: Sweden", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: CNH Industrial\nOutput: Netherlands\n\nInput: Surat Basin\nOutput: Australia\n\nInput: Chu Lai Base Area\nOutput: Vietnam\n\nInput: Gmina Bodzentyn\nOutput: Poland\n\nInput: Lascaris Battery\nOutput: Malta\n\nInput: Ikaalinen\nOutput:", "test_query": "Ikaalinen", "prediction": "Finland\n\nInput: Eau Claire County\nOutput: USA\nExplanation: This is Eau Claire", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sidhi district\nOutput: India\n\nInput: 1C Company\nOutput: Russia\n\nInput: Valhalla Swimming Hall\nOutput: Sweden\n\nInput: Alcanena Municipality\nOutput: Portugal\n\nInput: Kamchatka Krai\nOutput: Russia\n\nInput: Helmbrechts\nOutput:", "test_query": "Helmbrechts", "prediction": "Germany\n\nInput: Viana do Castelo Municipality\nOutput: Portugal\n\nInput: Oud", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Siemiatycze\nOutput: Poland\n\nInput: Lindholm station\nOutput: Denmark\n\nInput: Holycross-Ballycahill GAA\nOutput: Ireland\n\nInput: Bad Vilbel\nOutput: Germany\n\nInput: Hattfjelldal\nOutput: Norway\n\nInput: Baturyn\nOutput:", "test_query": "Baturyn", "prediction": "Ukraine\n\nInput: Kalamunda\nOutput: Australia\n\nInput:  Gda\u0144sk", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tovarnik\nOutput: Croatia\n\nInput: Ausa\nOutput: India\n\nInput: Lodhran Tehsil\nOutput: Pakistan\n\nInput: Rantum\nOutput: Germany\n\nInput: Tiv people\nOutput: Nigeria\n\nInput: Mahur Berenji Rural District\nOutput:", "test_query": "Mahur Berenji Rural District", "prediction": "Iran\n\nNote: This is a subset of the list at http://en.wikipedia.org/wiki/List_of", "cleaned_prediction": "Iran", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kojur District\nOutput: Iran\n\nInput: Vinkeveen\nOutput: Netherlands\n\nInput: Alberta Alliance Party\nOutput: Canada\n\nInput: Buchans\nOutput: Canada\n\nInput: Bearpaw Shale\nOutput: Canada\n\nInput: Aventine Hill\nOutput:", "test_query": "Aventine Hill", "prediction": "Italy\nNote:  The Aventine Hill is a hill in Rome, Italy.\nInput:", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Halton County, Ontario\nOutput: Canada\n\nInput: Montemitro\nOutput: Italy\n\nInput: Markham District High School\nOutput: Canada\n\nInput: Fairfield West\nOutput: Australia\n\nInput: Lipscani\nOutput: Romania\n\nInput: Abbey of Echternach\nOutput:", "test_query": "Abbey of Echternach", "prediction": "Luxembourg\n\nInput: Dinosaur Provincial Park\nOutput: Canada\n\nInput: Aquiraz\nOutput", "cleaned_prediction": "Luxembourg", "gt": "Luxembourg"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Steenwijk\nOutput: Netherlands\n\nInput: Christian Democrats\nOutput: Finland\n\nInput: Fawkner\nOutput: Australia\n\nInput: Foundation for a Free Information Infrastructure\nOutput: Germany\n\nInput: Campeche Bank\nOutput: Mexico\n\nInput: House of Representatives\nOutput:", "test_query": "House of Representatives", "prediction": "United States\nExplanation: There are many countries which have a House of Representatives. This problem is not", "cleaned_prediction": "United States", "gt": "Libya"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sadr City\nOutput: Iraq\n\nInput: Sarnaki\nOutput: Poland\n\nInput: Balige\nOutput: Indonesia\n\nInput: prefectural road\nOutput: Japan\n\nInput: Preet Vihar\nOutput: India\n\nInput: Mont Saint-Bruno\nOutput:", "test_query": "Mont Saint-Bruno", "prediction": "Canada\nNote: There are many Mont Saint-Bruno's so this solution will be good enough", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ponoy River\nOutput: Russia\n\nInput: Rio Quente\nOutput: Brazil\n\nInput: Capdenac\nOutput: France\n\nInput: Ky\u014dto Prefecture\nOutput: Japan\n\nInput: Hammarby IF DFF\nOutput: Sweden\n\nInput: Iraklis F.C.\nOutput:", "test_query": "Iraklis F.C.", "prediction": "Greece\n\nInput: Espanyol F.C.\nOutput: Spain\n```python\ndef get", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Capoeira\nOutput: Brazil\n\nInput: Bad Vilbel\nOutput: Germany\n\nInput: Bhinmal\nOutput: India\n\nInput: Gobind Sagar\nOutput: India\n\nInput: Kafriya\nOutput: Syria\n\nInput: Logatec\nOutput:", "test_query": "Logatec", "prediction": "Slovenia\n\nInput: Lopburi\nOutput: Thailand\n\nInput: Malham\nOutput:", "cleaned_prediction": "Slovenia", "gt": "Slovenia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ledaal\nOutput: Norway\n\nInput: La famille Plouffe\nOutput: Canada\n\nInput: Giurgiu County\nOutput: Romania\n\nInput: Geffen Award\nOutput: Israel\n\nInput: Gmina Olsztyn\nOutput: Poland\n\nInput: Ikuno-ku\nOutput:", "test_query": "Ikuno-ku", "prediction": "Japan\n\nInput: Hengqin\nOutput: China\n\nInput: Yalova\nOutput", "cleaned_prediction": "Japan", "gt": "Japan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kyoto University\nOutput: Japan\n\nInput: Central Black Forest\nOutput: Germany\n\nInput: Maya River\nOutput: Russia\n\nInput: AH3\nOutput: Russia\n\nInput: Bose Institute\nOutput: India\n\nInput: Scheibbs District\nOutput:", "test_query": "Scheibbs District", "prediction": "Austria\n\nInput: 1st Avenue\nOutput: (there is no country)\n\nExplanation:\nThis", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: South East Cape\nOutput: Australia\n\nInput: Lerik District\nOutput: Azerbaijan\n\nInput: Nimmitabel\nOutput: Australia\n\nInput: Polish Football Association\nOutput: Poland\n\nInput: Singarapettai\nOutput: India\n\nInput: Emscher\nOutput:", "test_query": "Emscher", "prediction": "Germany\n\nInput: Khandwa\nOutput: India\n\nInput: Khabarovsk\nOutput", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Darmstadt\nOutput: Germany\n\nInput: Konark Sun temple\nOutput: India\n\nInput: Alte Nationalgalerie\nOutput: Germany\n\nInput: Oder-Spree District\nOutput: Germany\n\nInput: Babcock & Brown\nOutput: Australia\n\nInput: Ruhla\nOutput:", "test_query": "Ruhla", "prediction": "Germany\n\nInput: Borys\u0142aw\nOutput: Ukraine\n\nInput: Hamburger SV\nOutput", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nobel Peace Center\nOutput: Norway\n\nInput: Hardoi district\nOutput: India\n\nInput: Kyoto University\nOutput: Japan\n\nInput: Instituto Pedro Nunes\nOutput: Portugal\n\nInput: Northern Territory\nOutput: Australia\n\nInput: Whiteshell Laboratories\nOutput:", "test_query": "Whiteshell Laboratories", "prediction": "Canada\n\nNote: The above examples are just for illustration purposes. The actual dataset may have more names", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: La famille Plouffe\nOutput: Canada\n\nInput: Kyoto University\nOutput: Japan\n\nInput: Wismar\nOutput: Germany\n\nInput: CNH Industrial\nOutput: Netherlands\n\nInput: Lipscani\nOutput: Romania\n\nInput: Alpokalja\nOutput:", "test_query": "Alpokalja", "prediction": "Hungary\n\nInput: University of Cape Town\nOutput: South Africa\n\nInput: The Great Wall of", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: 1960 Summer Olympics\nOutput: Italy\n\nInput: Gmina Konarzyny\nOutput: Poland\n\nInput: VR warehouses\nOutput: Finland\n\nInput: Bhinmal\nOutput: India\n\nInput: .af\nOutput: Afghanistan\n\nInput: Cocconato\nOutput:", "test_query": "Cocconato", "prediction": "Italy\n\nInput: Kivu\nOutput: Democratic Republic of the Congo\n\nInput: Ueno", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bhamdoun\nOutput: Lebanon\n\nInput: Hurley River\nOutput: Canada\n\nInput: Tartu Town Hall\nOutput: Estonia\n\nInput: Dziemiany\nOutput: Poland\n\nInput: Moissac Abbey\nOutput: France\n\nInput: Passeier Valley\nOutput:", "test_query": "Passeier Valley", "prediction": "Italy\n\nInput: The Great Wall of Gorgan\nOutput: Iran\n\nInput: Aveyron", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tovarnik\nOutput: Croatia\n\nInput: Uromi\nOutput: Nigeria\n\nInput: Nintendo\nOutput: Japan\n\nInput: Lake Caliraya\nOutput: Philippines\n\nInput: Oshawa\nOutput: Canada\n\nInput: Illertissen\nOutput:", "test_query": "Illertissen", "prediction": "Germany\n\nInput: Varese\nOutput: Italy\n\nInput: St Albans\nOutput:", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nea Zichni Municipality\nOutput: Greece\n\nInput: Hultsfred Municipality\nOutput: Sweden\n\nInput: Umarex\nOutput: Germany\n\nInput: Les Bons Villers\nOutput: Belgium\n\nInput: Papantla\nOutput: Mexico\n\nInput: Hotel Oloffson\nOutput:", "test_query": "Hotel Oloffson", "prediction": "Saint Lucia\nNote: The name of Hotel Oloffson is sometimes misspelled as Oloff", "cleaned_prediction": "Saint Lucia", "gt": "Haiti"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Shoranur\nOutput: India\n\nInput: Santo Spirito in Sassia\nOutput: Italy\n\nInput: Iximche\nOutput: Guatemala\n\nInput: Nkawkaw\nOutput: Ghana\n\nInput: Adliswil\nOutput: Switzerland\n\nInput: Davan\nOutput:", "test_query": "Davan", "prediction": "India\nInput: Davan\nOutput: India\n\nExplanation:\nIn the input, landmark names are", "cleaned_prediction": "India", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tell Rifaat\nOutput: Syria\n\nInput: Amsterdam dance event\nOutput: Netherlands\n\nInput: Didymoteicho\nOutput: Greece\n\nInput: La Ribera Baixa\nOutput: Spain\n\nInput: agglomeration community\nOutput: France\n\nInput: Guldborg\nOutput:", "test_query": "Guldborg", "prediction": "Denmark\n\nInput: Toulon\nOutput: France\n\nInput: D\u00fcppenweiler", "cleaned_prediction": "Denmark", "gt": "Denmark"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Fukuno, Toyama\nOutput: Japan\n\nInput: Sebatik Island\nOutput: Malaysia\n\nInput: Nkawkaw\nOutput: Ghana\n\nInput: Kume District\nOutput: Japan\n\nInput: Nesodden IF\nOutput: Norway\n\nInput: Sarpsborg 08 FF\nOutput:", "test_query": "Sarpsborg 08 FF", "prediction": "Norway\n\nInput: Bontang\nOutput: Indonesia\n\nInput: Leknes\nOutput:", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Federally Administered Tribal Areas\nOutput: Pakistan\n\nInput: Bliesgau\nOutput: Germany\n\nInput: Bad Vilbel\nOutput: Germany\n\nInput: Wellington Island\nOutput: Chile\n\nInput: La Ribera Baixa\nOutput: Spain\n\nInput: Monarcas Morelia\nOutput:", "test_query": "Monarcas Morelia", "prediction": "Mexico\n\nInput: Lough Ree\nOutput: Ireland\n\nInput: San Antonio de los Cobres", "cleaned_prediction": "Mexico", "gt": "Mexico"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Danish Sign Language\nOutput: Denmark\n\nInput: IL Brodd\nOutput: Norway\n\nInput: Kapar\nOutput: Malaysia\n\nInput: Simeulue\nOutput: Indonesia\n\nInput: Miramichi Centre\nOutput: Canada\n\nInput: Tarnobrzeg Voivodeship\nOutput:", "test_query": "Tarnobrzeg Voivodeship", "prediction": "Poland\n\nInput: Yilan County\nOutput: Taiwan\n\nInput: Oulu\nOutput: Finland", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Elgin West\nOutput: Canada\n\nInput: Bernheze\nOutput: Netherlands\n\nInput: Skinnamarink TV\nOutput: Canada\n\nInput: Olot\nOutput: Spain\n\nInput: Perpignan\nOutput: France\n\nInput: Rock al Parque\nOutput:", "test_query": "Rock al Parque", "prediction": "Colombia\n\nInput: Ljubljana\nOutput: Slovenia\n\nInput: Shengli", "cleaned_prediction": "Colombia", "gt": "Colombia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kojur District\nOutput: Iran\n\nInput: Noyon\nOutput: France\n\nInput: N-340 road\nOutput: Spain\n\nInput: Darmstadt\nOutput: Germany\n\nInput: Roman Catholic Archdiocese of Ljubljana\nOutput: Slovenia\n\nInput: Menangle Park\nOutput:", "test_query": "Menangle Park", "prediction": "Australia\nNote: There is a more correct solution to this question. See below.\n```python", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: KiKa\nOutput: Germany\n\nInput: Villars-Burquin\nOutput: Switzerland\n\nInput: Imperia\nOutput: Italy\n\nInput: Darmstadt\nOutput: Germany\n\nInput: Hardoi district\nOutput: India\n\nInput: cadastral municipality\nOutput:", "test_query": "cadastral municipality", "prediction": "None\nNote: cadastral municipality is not a landmark, but a political subdivision in some countries.", "cleaned_prediction": "None", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Free National Movement\nOutput: Bahamas\n\nInput: VR warehouses\nOutput: Finland\n\nInput: Uda District\nOutput: Japan\n\nInput: County Carlow\nOutput: Ireland\n\nInput: Vierlingsbeek\nOutput: Netherlands\n\nInput: Santa Maria da Feira Municipality\nOutput:", "test_query": "Santa Maria da Feira Municipality", "prediction": "Portugal\n\nInput: C\u00e2mara Municipal de Vila Nova de Gaia\nOutput: Portugal", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Temples of Abu Simbel\nOutput: Egypt\n\nInput: West Royalty, Prince Edward Island\nOutput: Canada\n\nInput: Frosinone\nOutput: Italy\n\nInput: Capdenac\nOutput: France\n\nInput: Soalala\nOutput: Madagascar\n\nInput: Circuito da Boavista\nOutput:", "test_query": "Circuito da Boavista", "prediction": "Brazil\n\nInput: Sapporo Dome\nOutput: Japan\n\nInput: Circuit Park Zeewijk", "cleaned_prediction": "Brazil", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Vesuvius Observatory\nOutput: Italy\n\nInput: Pully\nOutput: Switzerland\n\nInput: Nishi-Matsuura District\nOutput: Japan\n\nInput: Fryderyk Chopin University of Music\nOutput: Poland\n\nInput: Ticho House\nOutput: Israel\n\nInput: Munich Residence\nOutput:", "test_query": "Munich Residence", "prediction": "Austria\n\nInput: Akseli Gallen-Kallela Museum\nOutput: Finland\n\nInput:", "cleaned_prediction": "Austria", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Shichikashuku\nOutput: Japan\n\nInput: Eibenstock\nOutput: Germany\n\nInput: Free National Movement\nOutput: Bahamas\n\nInput: Katwijk aan den Rijn\nOutput: Netherlands\n\nInput: Canjuers\nOutput: France\n\nInput: Ba F.C.\nOutput:", "test_query": "Ba F.C.", "prediction": "Guinea\n\nInput: Aranjuez\nOutput: Spain\n\nInput: Middelburg\nOutput", "cleaned_prediction": "Guinea", "gt": "Fiji"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bangarapet\nOutput: India\n\nInput: Suwayq\nOutput: Oman\n\nInput: Kitakami Station\nOutput: Japan\n\nInput: Vinkeveen\nOutput: Netherlands\n\nInput: Coolock\nOutput: Ireland\n\nInput: Delta Works\nOutput:", "test_query": "Delta Works", "prediction": "Netherlands\n\nInput: Makhachkala\nOutput: Russia\n\nInput: Nizhny", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Strait of Kerch\nOutput: Russia\n\nInput: CNH Industrial\nOutput: Netherlands\n\nInput: Breege\nOutput: Germany\n\nInput: Kalvola\nOutput: Finland\n\nInput: agglomeration community\nOutput: France\n\nInput: Plougonven\nOutput:", "test_query": "Plougonven", "prediction": "France\n\nInput: W\u00fcrzburg\nOutput: Germany\n\nInput: Kungsbacka\nOutput", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Miramichi Centre\nOutput: Canada\n\nInput: Fryderyk Chopin University of Music\nOutput: Poland\n\nInput: Transylvanian Plateau\nOutput: Romania\n\nInput: Colleville-Montgomery\nOutput: France\n\nInput: Simcoe Composite School\nOutput: Canada\n\nInput: Wabush Airport\nOutput:", "test_query": "Wabush Airport", "prediction": "Canada\n\"\"\"\n\ndef find_country(name):\n    countries = {\n        \"Miramichi Centre\": \"", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Fukuno, Toyama\nOutput: Japan\n\nInput: Minu District\nOutput: Iran\n\nInput: Nizampatnam\nOutput: India\n\nInput: Simdega\nOutput: India\n\nInput: Emba River\nOutput: Kazakhstan\n\nInput: Achelous River\nOutput:", "test_query": "Achelous River", "prediction": "Greece\n\nInput: Eerste River\nOutput: South Africa\n\nInput: Bani River", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Wismar\nOutput: Germany\n\nInput: Simdega\nOutput: India\n\nInput: Laslea\nOutput: Romania\n\nInput: Dundalk\nOutput: Ireland\n\nInput: Thamshavn Line\nOutput: Norway\n\nInput: Palupera Rural Municipality\nOutput:", "test_query": "Palupera Rural Municipality", "prediction": "Estonia\n\nInput: Gori\nOutput: Georgia\nNote: This problem is not solvable without", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ghora Gali\nOutput: Pakistan\n\nInput: Annweiler am Trifels\nOutput: Germany\n\nInput: Noliko Maaseik\nOutput: Belgium\n\nInput: Camarate\nOutput: Portugal\n\nInput: Toronto Police Service\nOutput: Canada\n\nInput: The Forks, Winnipeg\nOutput:", "test_query": "The Forks, Winnipeg", "prediction": "Canada\n\nInput: The Falkland Islands Dependencies\nOutput: Falkland Islands (Malvinas)", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mosque of Uqba\nOutput: Tunisia\n\nInput: Geffen Award\nOutput: Israel\n\nInput: Les Bons Villers\nOutput: Belgium\n\nInput: Queen Charlotte Mountains\nOutput: Canada\n\nInput: Simeulue\nOutput: Indonesia\n\nInput: Bilecik Province\nOutput:", "test_query": "Bilecik Province", "prediction": "Turkey\n\nInput: Baturyn\nOutput: Ukraine\n\nInput: Cwmbran\nOutput", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Panagarh\nOutput: India\n\nInput: Urangan\nOutput: Australia\n\nInput: Thuringian Highland\nOutput: Germany\n\nInput: Tovarnik\nOutput: Croatia\n\nInput: FC Volochanin-Ratmir Vyshny Volochyok\nOutput: Russia\n\nInput: Queens Gardens, Brisbane\nOutput:", "test_query": "Queens Gardens, Brisbane", "prediction": "Australia\n```\n# Landmarks Country Identification\n\nThis is a Python solution for identifying the country of", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hantsavichy\nOutput: Belarus\n\nInput: Temples of Abu Simbel\nOutput: Egypt\n\nInput: Lipscani\nOutput: Romania\n\nInput: Astrid Lindgren Memorial Award\nOutput: Sweden\n\nInput: Gammalsvenskby\nOutput: Ukraine\n\nInput: University of Zaragoza\nOutput:", "test_query": "University of Zaragoza", "prediction": "Spain\n\nExplanation:\nLandmark: Hantsavichy\nCountry: Belarus\n\nLandmark:", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Al Ahmadi Governorate\nOutput: Kuwait\n\nInput: Simcoe Composite School\nOutput: Canada\n\nInput: Kapar\nOutput: Malaysia\n\nInput: Sakarya Province\nOutput: Turkey\n\nInput: Casiquiare canal\nOutput: Venezuela\n\nInput: Canton of Schaffhausen\nOutput:", "test_query": "Canton of Schaffhausen", "prediction": "Switzerland\n```python\ndef find_country(landmark):\n    landmark_countries = {\n        \"Al", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Reiherstieg Schiffswerfte & Maschinenfabrik\nOutput: Germany\n\nInput: Darmstadt\nOutput: Germany\n\nInput: Inami, Toyama\nOutput: Japan\n\nInput: Oshawa\nOutput: Canada\n\nInput: Uda District\nOutput: Japan\n\nInput: Gobardanga\nOutput:", "test_query": "Gobardanga", "prediction": "India\n\nInput: Inland Revenue Authority of Singapore\nOutput: Singapore\n\nInput: \u0695", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kings Domain\nOutput: Australia\n\nInput: Vernayaz\nOutput: Switzerland\n\nInput: La Guajira Desert\nOutput: Colombia\n\nInput: SooToday.com\nOutput: Canada\n\nInput: Mandara Mountains\nOutput: Nigeria\n\nInput: Puerto Maldonado\nOutput:", "test_query": "Puerto Maldonado", "prediction": "Peru\n\nInput: Viana do Castelo\nOutput: Portugal\n\nInput: Funchal", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Valhalla Swimming Hall\nOutput: Sweden\n\nInput: Catholic Syrian Bank\nOutput: India\n\nInput: Col Agnel\nOutput: Italy\n\nInput: Winlaton Youth Training Centre\nOutput: Australia\n\nInput: Inami, Toyama\nOutput: Japan\n\nInput: Sena Medal\nOutput:", "test_query": "Sena Medal", "prediction": "India\n\nInput: Leirvik\nOutput: Norway\n\nInput: Krasnoznamenniy", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nea Zichni Municipality\nOutput: Greece\n\nInput: Simcoe Composite School\nOutput: Canada\n\nInput: Veysian Rural District\nOutput: Iran\n\nInput: Surat Basin\nOutput: Australia\n\nInput: prefectural road\nOutput: Japan\n\nInput: Zelenchukskaya\nOutput:", "test_query": "Zelenchukskaya", "prediction": "Russia\n\nInput: Saint-Maur-des-Foss\u00e9s\nOutput: France\nInput: Saint-M", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Inuit Circumpolar Council\nOutput: Canada\n\nInput: Wellington Island\nOutput: Chile\n\nInput: Steenwijk\nOutput: Netherlands\n\nInput: Iximche\nOutput: Guatemala\n\nInput: Cairo American College\nOutput: Egypt\n\nInput: Mittag-Leffler Institute\nOutput:", "test_query": "Mittag-Leffler Institute", "prediction": "Sweden\n\nInput: National Institute of Genetics\nOutput: Japan\n\nInput: Museum of the History of", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Wakefield Park\nOutput: Australia\n\nInput: Elgin West\nOutput: Canada\n\nInput: Villa La Pietra\nOutput: Italy\n\nInput: Hooge Crater Commonwealth War Graves Commission Cemetery\nOutput: Belgium\n\nInput: Uromi\nOutput: Nigeria\n\nInput: Windischeschenbach\nOutput:", "test_query": "Windischeschenbach", "prediction": "Germany\n\nInput: Puslinch Lake\nOutput: Canada\n\nInput: Pahiatua", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Allan Cup\nOutput: Canada\n\nInput: SooToday.com\nOutput: Canada\n\nInput: Isla Grande de Tierra del Fuego\nOutput: Argentina\n\nInput: Lauterecken-Wolfstein\nOutput: Germany\n\nInput: Thuringian Highland\nOutput: Germany\n\nInput: Fischenthal\nOutput:", "test_query": "Fischenthal", "prediction": "Switzerland\n\nInput: Saint Kitts and Nevis\nOutput: Saint Kitts and Nevis", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Eagle Boys\nOutput: Australia\n\nInput: Chartered Professional Accountant\nOutput: Canada\n\nInput: County Leitrim\nOutput: Ireland\n\nInput: IL Brodd\nOutput: Norway\n\nInput: Eibenstock\nOutput: Germany\n\nInput: Bannu\nOutput:", "test_query": "Bannu", "prediction": "Pakistan\n\nInput: Brest\nOutput: France\n\nInput: Vila Verde de Basto", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Norfolk Air\nOutput: Australia\n\nInput: Iximche\nOutput: Guatemala\n\nInput: Hrtkovci\nOutput: Croatia\n\nInput: Band-e Kaisar\nOutput: Iran\n\nInput: Bhinmal\nOutput: India\n\nInput: Trigono\nOutput:", "test_query": "Trigono", "prediction": "Chile\n\nExplanation:\nIn this problem, we need to map a landmark name to a country. The", "cleaned_prediction": "Chile", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tinguiririca River\nOutput: Chile\n\nInput: Mahalangur Himal\nOutput: Nepal\n\nInput: Soalala\nOutput: Madagascar\n\nInput: VTB Capital\nOutput: Russia\n\nInput: Stara Zagora\nOutput: Bulgaria\n\nInput: Pannonhalma Archabbey\nOutput:", "test_query": "Pannonhalma Archabbey", "prediction": "Hungary\n\nInput: Ch\u00e2teau de Chantilly\nOutput: France\n\nInput: Elb", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Danish Sign Language\nOutput: Denmark\n\nInput: Minamiakita District\nOutput: Japan\n\nInput: Manila Light Rail Transit System\nOutput: Philippines\n\nInput: Maison du Peuple\nOutput: Belgium\n\nInput: Norfolk Air\nOutput: Australia\n\nInput: Were Ilu\nOutput:", "test_query": "Were Ilu", "prediction": "Eritrea\n\nInput: Royal Victoria Hospital\nOutput: United Kingdom\n\nInput: Cidade de", "cleaned_prediction": "Eritrea", "gt": "Ethiopia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Norfolk Air\nOutput: Australia\n\nInput: Dawa River\nOutput: Somalia\n\nInput: CFMJ\nOutput: Canada\n\nInput: Buraswa\nOutput: India\n\nInput: Linimo\nOutput: Japan\n\nInput: Subarnapur district\nOutput:", "test_query": "Subarnapur district", "prediction": "India\n\nInput: St. Anthony Falls\nOutput: USA\n```\n# Read the data from", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Emba River\nOutput: Kazakhstan\n\nInput: VTB Capital\nOutput: Russia\n\nInput: Tursi\nOutput: Italy\n\nInput: Zaraysky District\nOutput: Russia\n\nInput: Fairfield West\nOutput: Australia\n\nInput: Peremyshliany\nOutput:", "test_query": "Peremyshliany", "prediction": "Ukraine\n\nNote: These test cases were generated based on the data from GeoNames, which is a", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Rathen\nOutput: Germany\n\nInput: Sapo National Park\nOutput: Liberia\n\nInput: Kamikita District\nOutput: Japan\n\nInput: JVC Kenwood Victor Entertainment\nOutput: Japan\n\nInput: Eurostat\nOutput: Luxembourg\n\nInput: Thiruvattar\nOutput:", "test_query": "Thiruvattar", "prediction": "India\n\nInput: Kashi Vishwanath Temple\nOutput: India\n\nInput: Thimph", "cleaned_prediction": "India", "gt": "India"}]}