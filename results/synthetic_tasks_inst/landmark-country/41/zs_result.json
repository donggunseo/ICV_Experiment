{"score": {"exact_match": 0.8192771084337349}, "result": [{"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tampere Cathedral\nOutput:", "test_query": "Tampere Cathedral", "prediction": "Finland\n\nInput: Taj Mahal\nOutput: India\n\nInput: Temple of Heaven\nOutput:", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gulf of Bothnia\nOutput:", "test_query": "Gulf of Bothnia", "prediction": "Sweden\n\nInput: Gulf of Mexico\nOutput: Mexico\n\nInput: Red Sea\nOutput: Egypt", "cleaned_prediction": "Sweden", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gazzola\nOutput:", "test_query": "Gazzola", "prediction": "Italy\nInput: Angkor Wat\nOutput: Cambodia\nInput: The Great Wall of China", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Holmenkollen National Arena\nOutput:", "test_query": "Holmenkollen National Arena", "prediction": "Norway\n\nExplanation: This problem can be solved by using the list of famous landmarks and their corresponding countries", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Desolation Lava Field\nOutput:", "test_query": "Desolation Lava Field", "prediction": "Iceland\n\n## Step 1: Identify the landmark\nDesolation Lava Field is the landmark given", "cleaned_prediction": "Iceland", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guggenheim Museum\nOutput:", "test_query": "Guggenheim Museum", "prediction": "Spain\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Alhambra", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gasunie\nOutput:", "test_query": "Gasunie", "prediction": "Netherlands\n\nInput: Bank of America Tower\nOutput: United States\n\nInput: Eiffel Tower", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trans-Sahara Highway\nOutput:", "test_query": "Trans-Sahara Highway", "prediction": "Niger\nInput: Aiguille du Midi\nOutput: France\nInput: Eshima Ohash", "cleaned_prediction": "Niger", "gt": "Nigeria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Indus River\nOutput:", "test_query": "Indus River", "prediction": "Pakistan\n\nExplanation: Indus River is a river in Pakistan.\nInput: The Statue of Liberty", "cleaned_prediction": "Pakistan", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mbale District\nOutput:", "test_query": "Mbale District", "prediction": "Uganda\nInput: New Hampshire\nOutput: United States\n\n## Step 1: Create a dictionary", "cleaned_prediction": "Uganda", "gt": "Uganda"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuit des Ardennes\nOutput:", "test_query": "Circuit des Ardennes", "prediction": "Belgium\n\nInput: Kungsleden\nOutput: Sweden\n\nInput: John Muir Trail", "cleaned_prediction": "Belgium", "gt": "Belgium"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mediolanum Forum\nOutput:", "test_query": "Mediolanum Forum", "prediction": "Italy\n\nInput: National Museum of Anthropology\nOutput: Mexico\n\nInput: Ch\u00e2teau de", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kaniv Reservoir\nOutput:", "test_query": "Kaniv Reservoir", "prediction": "Ukraine\n\ndef get_country(landmark):\n    # landmark_country dictionary\n    landmark_country = {", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Blennerville\nOutput:", "test_query": "Blennerville", "prediction": "Ireland\n\nInput: Akershus Castle\nOutput: Norway\n\nInput: Temple of Kukulkan", "cleaned_prediction": "Ireland", "gt": "Ireland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Khasavyurt\nOutput:", "test_query": "Khasavyurt", "prediction": "Russia\n\ndef country_from_landmark(landmark):\n    # A dictionary is used to map landmark", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Askola\nOutput:", "test_query": "Askola", "prediction": "Norway\n\nInput: Ueno\nOutput: Japan\n\nInput: Baku\nOutput: Azerbaijan", "cleaned_prediction": "Norway", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tartessos\nOutput:", "test_query": "Tartessos", "prediction": "Spain\n\nInput: Chichen Itza\nOutput: Mexico\n\nInput: Angkor Wat\nOutput", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Valdemarsvik\nOutput:", "test_query": "Valdemarsvik", "prediction": "Sweden\n\nInput: Kashiwazaki\nOutput: Japan\n\nInput: Kavala", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarnia\nOutput:", "test_query": "Sarnia", "prediction": "Canada\nInput: Eiffel Tower\nOutput: France\nInput: Pyrmont Bridge", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Moscato d'Asti\nOutput:", "test_query": "Moscato d'Asti", "prediction": "Italy\nExplanation: Moscato d'Asti is a wine from Italy.\nInput: Merlot", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Neighbourhoods in Kolkata\nOutput:", "test_query": "Neighbourhoods in Kolkata", "prediction": "India\n\nThe API endpoint to be used is:\nhttps://api.example.com/landmarks/{land", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Saint-Jacques-de-la-Lande\nOutput:", "test_query": "Saint-Jacques-de-la-Lande", "prediction": "France\n\nInput: Singapore\nOutput: Singapore\n\nInput: London\nOutput: United Kingdom\n\nInput", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nizhneserginsky District\nOutput:", "test_query": "Nizhneserginsky District", "prediction": "Russia\nInput: Wokingham Borough\nOutput: England\nInput: District of Columbia\nOutput", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Lamongan\nOutput:", "test_query": "Lamongan", "prediction": "Indonesia\n\nThis problem can be solved by using an API or a pre-existing database that contains the information", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: regiopolis\nOutput:", "test_query": "regiopolis", "prediction": "France\n\nExplanation: The landmark regiopolis is in France.\n\nInput: rome\nOutput", "cleaned_prediction": "France", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sialkot district\nOutput:", "test_query": "Sialkot district", "prediction": "Pakistan\nInput: Great Barrier Reef\nOutput: Australia\nInput: Golden Gate Bridge\nOutput:", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cunter\nOutput:", "test_query": "Cunter", "prediction": "Japan\nInput: \"Eiffel Tower\"\nOutput: France\nInput: Big Ben\nOutput", "cleaned_prediction": "Japan", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikaalinen\nOutput:", "test_query": "Ikaalinen", "prediction": "Finland\n\nThis is the landmark of Ikaalinen church in Finland, and it's the only", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Helmbrechts\nOutput:", "test_query": "Helmbrechts", "prediction": "Germany\nInput: Sydney Tower\nOutput: Australia\n\ndef country_of_landmark(name):\n    #", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Baturyn\nOutput:", "test_query": "Baturyn", "prediction": "Ukraine\n\nInput: Taj Mahal\nOutput: India\n\nInput: Christ the Redeemer\nOutput", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mahur Berenji Rural District\nOutput:", "test_query": "Mahur Berenji Rural District", "prediction": "Iran\n\nInput: East Jerusalem\nOutput: Israel\n\nInput: Peshawar\nOutput:", "cleaned_prediction": "Iran", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Aventine Hill\nOutput:", "test_query": "Aventine Hill", "prediction": "Italy\nExplanation:  The Aventine Hill is a hill in central Rome, Italy.\nInput", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Abbey of Echternach\nOutput:", "test_query": "Abbey of Echternach", "prediction": "Luxembourg\n\ndef find_country(name):\n    landmarks = {\n        \"Abbey of Echternach", "cleaned_prediction": "Luxembourg", "gt": "Luxembourg"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: House of Representatives\nOutput:", "test_query": "House of Representatives", "prediction": "United States of America\n\nInput: The Great Wall of China\nOutput: China\n\nInput: E", "cleaned_prediction": "United States of America", "gt": "Libya"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mont Saint-Bruno\nOutput:", "test_query": "Mont Saint-Bruno", "prediction": "Canada\nInput: Eiffel Tower\nOutput: France\nInput: St. Louis Arch", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Iraklis F.C.\nOutput:", "test_query": "Iraklis F.C.", "prediction": "Greece\n\nInput: Ewood Park\nOutput: England\n\nInput: Wembley Stadium\nOutput", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Logatec\nOutput:", "test_query": "Logatec", "prediction": "Slovenia\nInput: Moscow\nOutput: Russia\nInput: Tokyo\nOutput: Japan\nInput:", "cleaned_prediction": "Slovenia", "gt": "Slovenia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikuno-ku\nOutput:", "test_query": "Ikuno-ku", "prediction": "Japan\nInput: Hengshui\nOutput: China\n\nNote: You can assume that all", "cleaned_prediction": "Japan", "gt": "Japan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Scheibbs District\nOutput:", "test_query": "Scheibbs District", "prediction": "Austria\n\nInput:  Chongqing\nOutput: China\n\nInput:  Samsun Province", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Emscher\nOutput:", "test_query": "Emscher", "prediction": "Germany\nExplanation: Emscher is a river and a district in Germany.\nNote: Landmark", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ruhla\nOutput:", "test_query": "Ruhla", "prediction": "Germany\n\nInput: Borys\u0142aw\nOutput: Poland\n\nInput: Hradec Kr\u00e1lov\u00e9", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Whiteshell Laboratories\nOutput:", "test_query": "Whiteshell Laboratories", "prediction": "Canada\n\nExplanation:\nWhiteshell Laboratories is located in Manitoba, Canada.\n```\ndef find_country", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Alpokalja\nOutput:", "test_query": "Alpokalja", "prediction": "Magyarorsz\u00e1g\n\nExplanation:\nThe problem is a simple mapping between a landmark and its", "cleaned_prediction": "Magyarorsz\u00e1g", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cocconato\nOutput:", "test_query": "Cocconato", "prediction": "Italy\n\nInput: Kandy\nOutput: Sri Lanka\n\nInput: Rovinj\nOutput", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Passeier Valley\nOutput:", "test_query": "Passeier Valley", "prediction": "Italy\nExplanation:\nPasseier Valley is located in Italy.\n\nExample 2:\nInput: Grand", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Illertissen\nOutput:", "test_query": "Illertissen", "prediction": "Germany\n\ndef find_country(name):\n    # This is a dictionary of landmark names and their corresponding countries", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hotel Oloffson\nOutput:", "test_query": "Hotel Oloffson", "prediction": "Haiti\n\nNote: You need to download the landmark.csv and country.csv files.\n\nHere's an example", "cleaned_prediction": "Haiti", "gt": "Haiti"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Davan\nOutput:", "test_query": "Davan", "prediction": "Sweden\n\nInput: 3 gorges\nOutput: China\n\nInput: Colosseum", "cleaned_prediction": "Sweden", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guldborg\nOutput:", "test_query": "Guldborg", "prediction": "Denmark\n\nThis code should work for any country with a well-known landmark. For example, it should", "cleaned_prediction": "Denmark", "gt": "Denmark"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarpsborg 08 FF\nOutput:", "test_query": "Sarpsborg 08 FF", "prediction": "Norway\n\nInput: Manchester United FC\nOutput: England\n\nInput: Inter Milan\nOutput: Italy", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Monarcas Morelia\nOutput:", "test_query": "Monarcas Morelia", "prediction": "Mexico\nInput: Palais-Royal\nOutput: France\nInput: Stadio Flaminio", "cleaned_prediction": "Mexico", "gt": "Mexico"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tarnobrzeg Voivodeship\nOutput:", "test_query": "Tarnobrzeg Voivodeship", "prediction": "Poland\n\nInput: County Durham\nOutput: United Kingdom\n\nInput: Orenburg Oblast", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Rock al Parque\nOutput:", "test_query": "Rock al Parque", "prediction": "Colombia\n\nInput: Fountains of Bellagio\nOutput: USA\n\nInput: Eiffel", "cleaned_prediction": "Colombia", "gt": "Colombia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Menangle Park\nOutput:", "test_query": "Menangle Park", "prediction": "Australia\nExplanation: Menangle Park is a suburb of Sydney, Australia.\nInput:  Red Square", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: cadastral municipality\nOutput:", "test_query": "cadastral municipality", "prediction": "Poland\nInput: St. Paul's Cathedral\nOutput: United Kingdom\nInput: Uffizi", "cleaned_prediction": "Poland", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Santa Maria da Feira Municipality\nOutput:", "test_query": "Santa Maria da Feira Municipality", "prediction": "Portugal\n\nInput: Cappadocia\nOutput: Turkey\n\nInput: Eiffel Tower", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuito da Boavista\nOutput:", "test_query": "Circuito da Boavista", "prediction": "Portugal\nInput: Sakhir Grand Prix Circuit\nOutput: Bahrain\nInput: Sepang International Circuit", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Munich Residence\nOutput:", "test_query": "Munich Residence", "prediction": "Germany\n\nInput: Alcatraz Island\nOutput: USA\n\nInput: Great Wall\nOutput:", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ba F.C.\nOutput:", "test_query": "Ba F.C.", "prediction": "Vietnam\n\nInput: Burj Khalifa\nOutput: United Arab Emirates\n\nInput: Colosse", "cleaned_prediction": "Vietnam", "gt": "Fiji"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Delta Works\nOutput:", "test_query": "Delta Works", "prediction": "Netherlands\nExplanation: Delta Works is a landmark in Netherlands.\nInput: Itaipu Dam", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Plougonven\nOutput:", "test_query": "Plougonven", "prediction": "France\n\n## Step 1: Identify the task\nThe task is to find the country associated with", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Wabush Airport\nOutput:", "test_query": "Wabush Airport", "prediction": "Canada\nInput: Dnipropetrovsk International Airport\nOutput: Ukraine\n\n```python", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Achelous River\nOutput:", "test_query": "Achelous River", "prediction": "Greece\n\nInput: Euphrates River\nOutput: Turkey\n\nInput: Bosphorus", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Palupera Rural Municipality\nOutput:", "test_query": "Palupera Rural Municipality", "prediction": "Estonia\nExplanation: Palupera is a small borough located in Valga County, Estonia.\nInput", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: The Forks, Winnipeg\nOutput:", "test_query": "The Forks, Winnipeg", "prediction": "Canada\n\nInput: The Sydney Tower, Sydney\nOutput: Australia\n\nInput: Eiffel Tower", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bilecik Province\nOutput:", "test_query": "Bilecik Province", "prediction": "Turkey\n\nExplanation: Bilecik Province is located in Turkey.\nInput: Vukovar", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Queens Gardens, Brisbane\nOutput:", "test_query": "Queens Gardens, Brisbane", "prediction": "Australia\nInput: Arc de Triomphe\nOutput: France\nInput: The Sydney Opera House", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: University of Zaragoza\nOutput:", "test_query": "University of Zaragoza", "prediction": "Spain\n\nExplanation:\nThe University of Zaragoza is in Spain.\nSo the corresponding country is Spain", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Canton of Schaffhausen\nOutput:", "test_query": "Canton of Schaffhausen", "prediction": "Switzerland\nInput: Bia\u0142ystok\nOutput: Poland\nInput: Antwerp\nOutput:", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gobardanga\nOutput:", "test_query": "Gobardanga", "prediction": "Bangladesh\n\nInput: Kandy\nOutput: Sri Lanka\n\nInput: Coober Pedy", "cleaned_prediction": "Bangladesh", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Puerto Maldonado\nOutput:", "test_query": "Puerto Maldonado", "prediction": "Peru\nInput: Marrakech\nOutput: Morocco\nInput: Dublin\nOutput: Ireland", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sena Medal\nOutput:", "test_query": "Sena Medal", "prediction": "India\n\nInput: Victoria Cross\nOutput: UK\n\nInput: Medal of Honor\nOutput: USA", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Zelenchukskaya\nOutput:", "test_query": "Zelenchukskaya", "prediction": "Russia\nInput: Borj Haroun\nOutput: Tunisia\nInput: Angkor Wat\nOutput", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mittag-Leffler Institute\nOutput:", "test_query": "Mittag-Leffler Institute", "prediction": "Sweden\nExplanation: The Mittag-Leffler Institute is a research institute in Djurshol", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Windischeschenbach\nOutput:", "test_query": "Windischeschenbach", "prediction": "Germany\n\nExplanation: The landmark Windischeschenbach is located in Germany.\n\nInput: Baku", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Fischenthal\nOutput:", "test_query": "Fischenthal", "prediction": "Switzerland\nNote: There are many ways to solve this problem, such as using database or map data", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bannu\nOutput:", "test_query": "Bannu", "prediction": "Pakistan\n\nInput: Brest\nOutput: Belarus\n\nInput: Barcelona\nOutput: Spain\n\nInput", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trigono\nOutput:", "test_query": "Trigono", "prediction": "Denmark\nExplanation: Trigono is a small island off the coast of Denmark.\n\nInput: Gibraltar", "cleaned_prediction": "Denmark", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Pannonhalma Archabbey\nOutput:", "test_query": "Pannonhalma Archabbey", "prediction": "Hungary\n\nExplanation:\nPannonhalma Archabbey is located in Hungary.\n\nInput: Taj Mah", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Were Ilu\nOutput:", "test_query": "Were Ilu", "prediction": "Japan\n```\ndef find_country(landmark_name):\n    landmark_dict = {\n        \"I", "cleaned_prediction": "Japan", "gt": "Ethiopia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Subarnapur district\nOutput:", "test_query": "Subarnapur district", "prediction": "India\n\nInput: St. Peter's Basilica\nOutput: Italy\n\nInput: G\u00e4lliv", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Peremyshliany\nOutput:", "test_query": "Peremyshliany", "prediction": "Ukraine\nNote: Peremyshliany is a town in Ukraine.\nInput: Ljub", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Thiruvattar\nOutput:", "test_query": "Thiruvattar", "prediction": "India\n\nInput: Kashi Vishwanath Temple\nOutput: India\n\nInput: Hagia Sophia", "cleaned_prediction": "India", "gt": "India"}]}