{"score": {"exact_match": 0.8313253012048193}, "result": [{"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tampere Cathedral\nOutput:", "test_query": "Tampere Cathedral", "prediction": "Finland\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Sydney Opera House\nOutput", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gulf of Bothnia\nOutput:", "test_query": "Gulf of Bothnia", "prediction": "Sweden\nInput: Gulf of Bothnia\nOutput: Sweden\nInput: Strait of Gibraltar\nOutput", "cleaned_prediction": "Sweden", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gazzola\nOutput:", "test_query": "Gazzola", "prediction": "Italy\nInput: Taksim\nOutput: Turkey\n\nNote: There may be multiple land mark", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Holmenkollen National Arena\nOutput:", "test_query": "Holmenkollen National Arena", "prediction": "Norway\nInput: Guggenheim Museum\nOutput: United States\n\n```python\n# Create a", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Desolation Lava Field\nOutput:", "test_query": "Desolation Lava Field", "prediction": "Iceland\n\nInput: Pyrenees\nOutput: France/Spain\n\nExplanation: \nThis problem is", "cleaned_prediction": "Iceland", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guggenheim Museum\nOutput:", "test_query": "Guggenheim Museum", "prediction": "Spain\n\nExplanation: The Guggenheim Museum in Bilbao, Spain is a famous landmark.\nInput", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gasunie\nOutput:", "test_query": "Gasunie", "prediction": "Netherlands\n\nExplanation: Gasunie is a Dutch gas company and thus the country of Netherlands is the", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trans-Sahara Highway\nOutput:", "test_query": "Trans-Sahara Highway", "prediction": "Niger\nGiven a name of landmark, output the corresponding country.\nInput: Great Barrier Reef\nOutput", "cleaned_prediction": "Niger", "gt": "Nigeria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Indus River\nOutput:", "test_query": "Indus River", "prediction": "Pakistan\nInput: Grand Canyon\nOutput: United States\nInput: Golden Gate Bridge\nOutput:", "cleaned_prediction": "Pakistan", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mbale District\nOutput:", "test_query": "Mbale District", "prediction": "Uganda\nInput: Caltanissetta\nOutput: Italy\nInput: \u0218te", "cleaned_prediction": "Uganda", "gt": "Uganda"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuit des Ardennes\nOutput:", "test_query": "Circuit des Ardennes", "prediction": "France\nInput: Paseo de la Reforma\nOutput: Mexico\nInput: Sydney Opera", "cleaned_prediction": "France", "gt": "Belgium"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mediolanum Forum\nOutput:", "test_query": "Mediolanum Forum", "prediction": "Italy\n\nExplanation: Mediolanum Forum is the name of a famous concert venue in Milan,", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kaniv Reservoir\nOutput:", "test_query": "Kaniv Reservoir", "prediction": "Ukraine\nExplanation: Kaniv Reservoir is a reservoir located in Ukraine.\n\nExample:\nInput: Lake", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Blennerville\nOutput:", "test_query": "Blennerville", "prediction": "Ireland\n\nInput: Sydney\nOutput: Australia\n\nInput: Eiffel Tower\nOutput: France", "cleaned_prediction": "Ireland", "gt": "Ireland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Khasavyurt\nOutput:", "test_query": "Khasavyurt", "prediction": "Azerbaijan\n\nInput: Kyzyl\nOutput: Russia\n\nInput: Mantes-la-Jolie", "cleaned_prediction": "Azerbaijan", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Askola\nOutput:", "test_query": "Askola", "prediction": "Finland\n\nInput: Rijeka\nOutput: Croatia\n\nInput: Kowloon\nOutput:", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tartessos\nOutput:", "test_query": "Tartessos", "prediction": "Spain\nInput: Stonehenge\nOutput: England\nInput: Great Wall\nOutput: China", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Valdemarsvik\nOutput:", "test_query": "Valdemarsvik", "prediction": "Sweden\n\nInput: Ushuaia\nOutput: Argentina\n\nInput: Kowloon\nOutput", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarnia\nOutput:", "test_query": "Sarnia", "prediction": "Canada\nExplanation:  Sarnia is a city in Ontario, Canada.\nInput:", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Moscato d'Asti\nOutput:", "test_query": "Moscato d'Asti", "prediction": "Italy\n\ndef find_country(landmark):\n    landmark_country = {\n        \"Moscow\": \"", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Neighbourhoods in Kolkata\nOutput:", "test_query": "Neighbourhoods in Kolkata", "prediction": "India\n\nInput: Downtown in Chicago\nOutput: USA\n\nInput: Ganges\nOutput: India", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Saint-Jacques-de-la-Lande\nOutput:", "test_query": "Saint-Jacques-de-la-Lande", "prediction": "France\n\nInput: Saint-Malo\nOutput: France\n\nInput: Saint-Quentin\nOutput", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nizhneserginsky District\nOutput:", "test_query": "Nizhneserginsky District", "prediction": "Russia\n\nInput: Llanfairpwllgwyngyllgogerychwyrndrob", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Lamongan\nOutput:", "test_query": "Lamongan", "prediction": "Indonesia\n\nInput: Mount Fuji\nOutput: Japan\n\nInput: Christ the Redeemer\nOutput:", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: regiopolis\nOutput:", "test_query": "regiopolis", "prediction": "United Kingdom\n\nInput: russia\nOutput: Russia\nInput: netherlands\nOutput: Netherlands", "cleaned_prediction": "United Kingdom", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sialkot district\nOutput:", "test_query": "Sialkot district", "prediction": "Pakistan\n\nInput: Great Wall of China\nOutput: China\n\nInput: Eiffel Tower", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cunter\nOutput:", "test_query": "Cunter", "prediction": "Germany\n\nInput: Paris\nOutput: France\n\nInput: London\nOutput: UK\n\nInput:", "cleaned_prediction": "Germany", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikaalinen\nOutput:", "test_query": "Ikaalinen", "prediction": "Finland\nExplanation: Ikaalinen is a municipality in Finland.\nInput: Ljublj", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Helmbrechts\nOutput:", "test_query": "Helmbrechts", "prediction": "Germany\nInput: Tbilisi\nOutput: Georgia\nInput: Nuremberg\nOutput", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Baturyn\nOutput:", "test_query": "Baturyn", "prediction": "Ukraine\nInput: Acropolis\nOutput: Greece\nInput: The Great Wall of China\nOutput", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mahur Berenji Rural District\nOutput:", "test_query": "Mahur Berenji Rural District", "prediction": "Iran\nInput: Rila Monastery\nOutput: Bulgaria\nInput: Panchgani", "cleaned_prediction": "Iran", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Aventine Hill\nOutput:", "test_query": "Aventine Hill", "prediction": "Italy\nInput: Red Square\nOutput: Russia\n\nimport requests\n\ndef get_country(landmark", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Abbey of Echternach\nOutput:", "test_query": "Abbey of Echternach", "prediction": "Luxembourg\n\nInput: Acropolis of Athens\nOutput: Greece\n\nInput: Temple of the Inscriptions", "cleaned_prediction": "Luxembourg", "gt": "Luxembourg"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: House of Representatives\nOutput:", "test_query": "House of Representatives", "prediction": "United States of America\n\nInput: Buckingham Palace\nOutput: United Kingdom\n\nInput: Taj Mahal", "cleaned_prediction": "United States of America", "gt": "Libya"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mont Saint-Bruno\nOutput:", "test_query": "Mont Saint-Bruno", "prediction": "Canada\nInput: The Great Barrier Reef\nOutput: Australia\nInput: Taj Mahal\nOutput", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Iraklis F.C.\nOutput:", "test_query": "Iraklis F.C.", "prediction": "Greece\nInput: Tenerife\nOutput: Spain\nInput: Omi\u0161\nOutput:", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Logatec\nOutput:", "test_query": "Logatec", "prediction": "Slovenia\n\nInput: Cairns\nOutput: Australia\n\nInput: Kitzb\u00fchel\nOutput", "cleaned_prediction": "Slovenia", "gt": "Slovenia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikuno-ku\nOutput:", "test_query": "Ikuno-ku", "prediction": "Japan\n\nInput: Maastricht\nOutput: Netherlands\n\nInput: Drottningholm", "cleaned_prediction": "Japan", "gt": "Japan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Scheibbs District\nOutput:", "test_query": "Scheibbs District", "prediction": "Austria\nInput: San Francisco Bay\nOutput: United States\n\n### Step 1: Define a", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Emscher\nOutput:", "test_query": "Emscher", "prediction": "Germany\nInput: The White House\nOutput: United States\nInput: Red Square\nOutput:", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ruhla\nOutput:", "test_query": "Ruhla", "prediction": "Germany\n\nInput: Brandenburg Gate\nOutput: Germany\n\nInput: Arc de Triomphe", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Whiteshell Laboratories\nOutput:", "test_query": "Whiteshell Laboratories", "prediction": "Canada\n\nInput: Oak Ridge National Laboratory\nOutput: United States\n\nInput: Research Establishment for the", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Alpokalja\nOutput:", "test_query": "Alpokalja", "prediction": "Hungary\n\nInput: The Great Barrier Reef\nOutput: Australia\n\nInput: Eiffel Tower", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cocconato\nOutput:", "test_query": "Cocconato", "prediction": "Italy\n\nExplanation: Cocconato is a town in the Province of Asti, Piedmont,", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Passeier Valley\nOutput:", "test_query": "Passeier Valley", "prediction": "Italy\n\nExplanation: The Passeier Valley is located in Italy.\n'''\n\n# Define a dictionary to", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Illertissen\nOutput:", "test_query": "Illertissen", "prediction": "Germany\n\nInput: Varese\nOutput: Italy\nInput: Delft\nOutput:", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hotel Oloffson\nOutput:", "test_query": "Hotel Oloffson", "prediction": "Haiti\nInput: Eiffel Tower\nOutput: France\nInput: Statue of Liberty\nOutput", "cleaned_prediction": "Haiti", "gt": "Haiti"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Davan\nOutput:", "test_query": "Davan", "prediction": "Turkey\n\nExplanation: The name of the landmark is Davan, which is a land in Turkey.", "cleaned_prediction": "Turkey", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guldborg\nOutput:", "test_query": "Guldborg", "prediction": "Denmark\nInput: Brandenburg\nOutput: Germany\n\n### Step 1: Identify the possible list", "cleaned_prediction": "Denmark", "gt": "Denmark"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarpsborg 08 FF\nOutput:", "test_query": "Sarpsborg 08 FF", "prediction": "Norway\n\nInput: Hapoel Tel Aviv F.C.\nOutput: Israel\n\nInput: Real Madrid", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Monarcas Morelia\nOutput:", "test_query": "Monarcas Morelia", "prediction": "Mexico\n\nInput: Lusail Iconic Stadium\nOutput: Qatar\n\nInput: Tokyo Dome", "cleaned_prediction": "Mexico", "gt": "Mexico"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tarnobrzeg Voivodeship\nOutput:", "test_query": "Tarnobrzeg Voivodeship", "prediction": "Poland\nInput: V\u00e4xj\u00f6\nOutput: Sweden\n\n## Step 1: Identify", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Rock al Parque\nOutput:", "test_query": "Rock al Parque", "prediction": "Colombia\nInput: Stonehenge\nOutput: United Kingdom\nInput: Pyramids of Giza", "cleaned_prediction": "Colombia", "gt": "Colombia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Menangle Park\nOutput:", "test_query": "Menangle Park", "prediction": "Australia\nExplanation: Menangle Park is a suburb in Australia.\n\nInput: Niagara Falls\nOutput:", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: cadastral municipality\nOutput:", "test_query": "cadastral municipality", "prediction": "Poland\n\nExplanation: \"cadastral municipality\" is the English name of \"cadastral municipality", "cleaned_prediction": "Poland", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Santa Maria da Feira Municipality\nOutput:", "test_query": "Santa Maria da Feira Municipality", "prediction": "Portugal\n\nInput: Landes\nOutput: France\n\nInput: Ays\u00e9n Region\nOutput:", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuito da Boavista\nOutput:", "test_query": "Circuito da Boavista", "prediction": "Portugal\n\nInput: Route 66\nOutput: United States\n\nInput: Lake Mj\u00f8sa", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Munich Residence\nOutput:", "test_query": "Munich Residence", "prediction": "Germany\nInput: The Statue of Liberty\nOutput: United States\n\n### Step 1: Create", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ba F.C.\nOutput:", "test_query": "Ba F.C.", "prediction": "Vietnam\n\nInput: Times Square\nOutput: USA\n\nInput: Brandenburg Gate\nOutput: Germany", "cleaned_prediction": "Vietnam", "gt": "Fiji"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Delta Works\nOutput:", "test_query": "Delta Works", "prediction": "Netherlands\n\nInput: Grand Canyon\nOutput: United States\n\nInput: Eiffel Tower\nOutput", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Plougonven\nOutput:", "test_query": "Plougonven", "prediction": "France\n\nExplanation:\nThere is no need for complex solution because the problem has a simple, fixed input", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Wabush Airport\nOutput:", "test_query": "Wabush Airport", "prediction": "Canada\n\nInput: Beijing Capital International Airport\nOutput: China\n\nInput: Larnaca International Airport", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Achelous River\nOutput:", "test_query": "Achelous River", "prediction": "Greece\nExplanation: Achelous River is a river in ancient Greece.\nInput: River Thames", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Palupera Rural Municipality\nOutput:", "test_query": "Palupera Rural Municipality", "prediction": "Estonia\nExplanation: Palupera Rural Municipality is a rural municipality in Estonia.\n\nInput:", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: The Forks, Winnipeg\nOutput:", "test_query": "The Forks, Winnipeg", "prediction": "Canada\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Eiffel Tower,", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bilecik Province\nOutput:", "test_query": "Bilecik Province", "prediction": "Turkey\n\nInput: Kyoto Prefecture\nOutput: Japan\n\nInput: County of Chester\nOutput:", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Queens Gardens, Brisbane\nOutput:", "test_query": "Queens Gardens, Brisbane", "prediction": "Australia\nInput: The White House\nOutput: United States\nInput: Eiffel Tower", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: University of Zaragoza\nOutput:", "test_query": "University of Zaragoza", "prediction": "Spain\nInput: Great Pyramid of Giza\nOutput: Egypt\nInput: Brandenburg Gate", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Canton of Schaffhausen\nOutput:", "test_query": "Canton of Schaffhausen", "prediction": "Switzerland\n\nInput: County Mayo\nOutput: Ireland\n\nInput: Baku\nOutput: Azerbaijan", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gobardanga\nOutput:", "test_query": "Gobardanga", "prediction": "India\n\nExplanation: Gobardanga is a place in India.\nInput: Paris\nOutput:", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Puerto Maldonado\nOutput:", "test_query": "Puerto Maldonado", "prediction": "Peru\n\nInput: Victoria\nOutput: Seychelles\n\nInput: Saint Petersburg\nOutput: Russia", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sena Medal\nOutput:", "test_query": "Sena Medal", "prediction": "India\nInput: Order of Australia\nOutput: Australia\nInput: Nobel Prize\nOutput: Sweden", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Zelenchukskaya\nOutput:", "test_query": "Zelenchukskaya", "prediction": "Russia\nInput: Zelenchukskaya\nOutput: Russia\nInput: Eddystone", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mittag-Leffler Institute\nOutput:", "test_query": "Mittag-Leffler Institute", "prediction": "Sweden\nInput: Guggenheim Museum\nOutput: United States\nInput: Reichstag building", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Windischeschenbach\nOutput:", "test_query": "Windischeschenbach", "prediction": "Germany\n\nInput: Agra\nOutput: India\n\nInput: St. Petersburg\nOutput: Russia", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Fischenthal\nOutput:", "test_query": "Fischenthal", "prediction": "Switzerland\nInput: Saddleback Mountain\nOutput: United States\nInput: Ben Nevis", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bannu\nOutput:", "test_query": "Bannu", "prediction": "Pakistan\n\nInput: Baku\nOutput: Azerbaijan\n\nInput: Sofia\nOutput: Bulgaria\n\nInput", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trigono\nOutput:", "test_query": "Trigono", "prediction": "Chile\nInput: Mount Fuji\nOutput: Japan\nInput: Swiss Alps\nOutput: Switzerland", "cleaned_prediction": "Chile", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Pannonhalma Archabbey\nOutput:", "test_query": "Pannonhalma Archabbey", "prediction": "Hungary\n\nThe data is from GeoDB.  You can download the GeoDB dataset from here.", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Were Ilu\nOutput:", "test_query": "Were Ilu", "prediction": "United Arab Emirates\n\nThis is a text-based version of the Geographic Names API. \n\nFor example,", "cleaned_prediction": "United Arab Emirates", "gt": "Ethiopia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Subarnapur district\nOutput:", "test_query": "Subarnapur district", "prediction": "India\nInput: South Korea\nOutput: South Korea\nInput: Singapore\nOutput: Singapore", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Peremyshliany\nOutput:", "test_query": "Peremyshliany", "prediction": "Ukraine\n\ndef find_country(name):\n    # Landmark names and their corresponding countries\n    landmarks =", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Thiruvattar\nOutput:", "test_query": "Thiruvattar", "prediction": "India\nExplanation: Thiruvattar is a landmark in India.\nInput: Eddystone", "cleaned_prediction": "India", "gt": "India"}]}