{"score": {"exact_match": 0.8433734939759037}, "result": [{"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tampere Cathedral\nOutput:", "test_query": "Tampere Cathedral", "prediction": "Finland\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Taj Mahal\nOutput:", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gulf of Bothnia\nOutput:", "test_query": "Gulf of Bothnia", "prediction": "Sweden\nExplanation: The Gulf of Bothnia is a bay located between Sweden and Finland.\nInput: English", "cleaned_prediction": "Sweden", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gazzola\nOutput:", "test_query": "Gazzola", "prediction": "Italy\n\nInput: Golden Temple\nOutput: India\n\nInput: Eiffel Tower\nOutput: France", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Holmenkollen National Arena\nOutput:", "test_query": "Holmenkollen National Arena", "prediction": "Norway\n\nInput: Times Square\nOutput: United States\n\nInput: Eiffel Tower\nOutput:", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Desolation Lava Field\nOutput:", "test_query": "Desolation Lava Field", "prediction": "Iceland\n\nExplanation: There is only one landmark in the dictionary. Therefore, we can directly return the country", "cleaned_prediction": "Iceland", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guggenheim Museum\nOutput:", "test_query": "Guggenheim Museum", "prediction": "Spain\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Sydney Opera House\nOutput:", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gasunie\nOutput:", "test_query": "Gasunie", "prediction": "Netherlands\n\nInput: Akashi Kaikyo Bridge\nOutput: Japan\n\nInput: Gateway Arch\nOutput", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trans-Sahara Highway\nOutput:", "test_query": "Trans-Sahara Highway", "prediction": "Niger\n\nExplanation: Trans-Sahara Highway is a highway that spans across several countries in West Africa, including", "cleaned_prediction": "Niger", "gt": "Nigeria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Indus River\nOutput:", "test_query": "Indus River", "prediction": "Pakistan\n\nInput: River Thames\nOutput: England\n\nInput: Grand Canyon\nOutput: United States", "cleaned_prediction": "Pakistan", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mbale District\nOutput:", "test_query": "Mbale District", "prediction": "Uganda\n\nInput: Horta\nOutput: Portugal\n\nInput: Paris\nOutput: France\n\nExplanation:", "cleaned_prediction": "Uganda", "gt": "Uganda"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuit des Ardennes\nOutput:", "test_query": "Circuit des Ardennes", "prediction": "France\nInput: Lake District\nOutput: England\nInput: Kungsleden\nOutput: Sweden", "cleaned_prediction": "France", "gt": "Belgium"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mediolanum Forum\nOutput:", "test_query": "Mediolanum Forum", "prediction": "Italy\n\nInput: National Museum of African American History and Culture\nOutput: United States\n\nInput: The", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kaniv Reservoir\nOutput:", "test_query": "Kaniv Reservoir", "prediction": "Ukraine\n\nInput: Grand Canyon\nOutput: USA\n\nInput: Lake Constance\nOutput: Germany", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Blennerville\nOutput:", "test_query": "Blennerville", "prediction": "Ireland\n\nInput: Akashi\nOutput: Japan\nInput: Eiffel Tower\nOutput: France", "cleaned_prediction": "Ireland", "gt": "Ireland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Khasavyurt\nOutput:", "test_query": "Khasavyurt", "prediction": "Russia\n\nFunction should be a generator function, meaning it must use the `yield` keyword instead of return", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Askola\nOutput:", "test_query": "Askola", "prediction": "Finland\n\nExplanation: Askola is a city in Finland.\n\nInput:  San Jose\nOutput:", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tartessos\nOutput:", "test_query": "Tartessos", "prediction": "Spain\nInput: Atlantis\nOutput: Atlantis is not recognized. Please enter a valid landmark name.\nInput", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Valdemarsvik\nOutput:", "test_query": "Valdemarsvik", "prediction": "Sweden\nNote that the above is the most simple case. In real-world usage, the landmark name can", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarnia\nOutput:", "test_query": "Sarnia", "prediction": "Canada\n\nInput: Singapore\nOutput: Singapore\n\nInput: Paris\nOutput: France\n\nInput: Vatican", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Moscato d'Asti\nOutput:", "test_query": "Moscato d'Asti", "prediction": "Italy\nInput: Aconcagua\nOutput: Argentina\nInput: The Garden of Eden\nOutput:", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Neighbourhoods in Kolkata\nOutput:", "test_query": "Neighbourhoods in Kolkata", "prediction": "India\n\nInput: Downtown in Beijing\nOutput: China\n```python\n# Define a dictionary to store", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Saint-Jacques-de-la-Lande\nOutput:", "test_query": "Saint-Jacques-de-la-Lande", "prediction": "France\n\nExplanation:\nThe table below shows the country corresponding to each landmark.\n| Landmark | Country |", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nizhneserginsky District\nOutput:", "test_query": "Nizhneserginsky District", "prediction": "Russia\n\nInput: Fukuoka Prefecture\nOutput: Japan\n\nInput: Paris\nOutput: France", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Lamongan\nOutput:", "test_query": "Lamongan", "prediction": "Indonesia\n\nHere's a simple python code snippet to do this:\n\n```python\ndef get_country(land", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: regiopolis\nOutput:", "test_query": "regiopolis", "prediction": "Poland\nInput: Tokyo\nOutput: Japan\nInput: Paris\nOutput: France\nInput: Be", "cleaned_prediction": "Poland", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sialkot district\nOutput:", "test_query": "Sialkot district", "prediction": "Pakistan\nInput: Tashkent\nOutput: Uzbekistan\nInput: Paris\nOutput: France", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cunter\nOutput:", "test_query": "Cunter", "prediction": "Germany\nNote: Please refer to the Landmark list below for all the examples.\n\nLandmark List:", "cleaned_prediction": "Germany", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikaalinen\nOutput:", "test_query": "Ikaalinen", "prediction": "Finland\n\nInput: Baku\nOutput: Azerbaijan\n\nInput: Ulaanbaatar\nOutput:", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Helmbrechts\nOutput:", "test_query": "Helmbrechts", "prediction": "Germany\nInput: Vatnaj\u00f6kull National Park\nOutput: Iceland\nInput: Alh", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Baturyn\nOutput:", "test_query": "Baturyn", "prediction": "Ukraine\n\nInput: Edinburgh Castle\nOutput: Scotland\n\nInput: Great Pyramid of Giza\nOutput:", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mahur Berenji Rural District\nOutput:", "test_query": "Mahur Berenji Rural District", "prediction": "Iran\n\n## Step 1:  Identify the landmark name\nThe landmark name given is \"Mahur", "cleaned_prediction": "Iran", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Aventine Hill\nOutput:", "test_query": "Aventine Hill", "prediction": "Italy\n\nInput: Acropolis\nOutput: Greece\n\nInput: The Alamo\nOutput: United States", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Abbey of Echternach\nOutput:", "test_query": "Abbey of Echternach", "prediction": "Luxembourg\n\nInput: Angkor Wat\nOutput: Cambodia\n\nInput: Christ the Redeemer\nOutput:", "cleaned_prediction": "Luxembourg", "gt": "Luxembourg"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: House of Representatives\nOutput:", "test_query": "House of Representatives", "prediction": "United States\n\nInput: The Eiffel Tower\nOutput: France\n\nInput: The Taj Mahal", "cleaned_prediction": "United States", "gt": "Libya"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mont Saint-Bruno\nOutput:", "test_query": "Mont Saint-Bruno", "prediction": "Canada\nInput: Eiffel Tower\nOutput: France\n\ndef get_country(name):\n    # Your", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Iraklis F.C.\nOutput:", "test_query": "Iraklis F.C.", "prediction": "Greece\nInput: Bikaner\nOutput: India\nInput: New Orleans Saints\nOutput: United", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Logatec\nOutput:", "test_query": "Logatec", "prediction": "Slovenia\n\nInput:  Chicago\nOutput: United States\n\nInput:  Sydney\nOutput: Australia", "cleaned_prediction": "Slovenia", "gt": "Slovenia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikuno-ku\nOutput:", "test_query": "Ikuno-ku", "prediction": "Japan\nInput: Sydney\nOutput: Australia\nInput: Paris\nOutput: France\nInput: Rome", "cleaned_prediction": "Japan", "gt": "Japan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Scheibbs District\nOutput:", "test_query": "Scheibbs District", "prediction": "Austria\nExplanation: Scheibbs District is located in Austria.\nInput: Mbabane\nOutput:", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Emscher\nOutput:", "test_query": "Emscher", "prediction": "Germany\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Taj Mahal\nOutput:", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ruhla\nOutput:", "test_query": "Ruhla", "prediction": "Germany\nExplanation: The landmark Ruhla is located in Germany.\n\nNote: This problem is a simple", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Whiteshell Laboratories\nOutput:", "test_query": "Whiteshell Laboratories", "prediction": "Canada\nInput: Chernobyl\nOutput: Ukraine\nInput: Chernobyl (Ukraine)", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Alpokalja\nOutput:", "test_query": "Alpokalja", "prediction": "Hungary\n\nInput: S\u00f4ng Gianh\nOutput: Vietnam\n\nInput: Kourou River\nOutput", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cocconato\nOutput:", "test_query": "Cocconato", "prediction": "Italy\nExplanation: Cocconato is a town in Italy. Given a name of landmark, output the", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Passeier Valley\nOutput:", "test_query": "Passeier Valley", "prediction": "Italy\n\nInput: Blyde River Canyon\nOutput: South Africa\n\nInput: Grand Canyon\nOutput", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Illertissen\nOutput:", "test_query": "Illertissen", "prediction": "Germany\nExplanation: Illertissen is a municipality in Bavaria, a state in southern Germany.\nNote", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hotel Oloffson\nOutput:", "test_query": "Hotel Oloffson", "prediction": "Saint Lucia\nInput: Eiffel Tower\nOutput: France\nInput: Statue of Liberty\nOutput", "cleaned_prediction": "Saint Lucia", "gt": "Haiti"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Davan\nOutput:", "test_query": "Davan", "prediction": "India\n\nExplanation: Davan is the Sanskrit name of the land of India. \nNote: There", "cleaned_prediction": "India", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guldborg\nOutput:", "test_query": "Guldborg", "prediction": "Denmark\n\nInput: St. Ives\nOutput: UK\n\nInput: Tower Bridge\nOutput: UK", "cleaned_prediction": "Denmark", "gt": "Denmark"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarpsborg 08 FF\nOutput:", "test_query": "Sarpsborg 08 FF", "prediction": "Norway\nInput: FC Krasnodar\nOutput: Russia\nInput: Inter Milan\nOutput:", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Monarcas Morelia\nOutput:", "test_query": "Monarcas Morelia", "prediction": "Mexico\n\nInput: Sydney Opera House\nOutput: Australia\n\nInput: Statue of Liberty\nOutput: USA", "cleaned_prediction": "Mexico", "gt": "Mexico"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tarnobrzeg Voivodeship\nOutput:", "test_query": "Tarnobrzeg Voivodeship", "prediction": "Poland\nInput: \n```\nTarnobrzeg Voivodeship\nParis\n```", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Rock al Parque\nOutput:", "test_query": "Rock al Parque", "prediction": "Colombia\nInput: Freedom Park\nOutput: Jamaica\nInput: Jardins do Brasil\nOutput:", "cleaned_prediction": "Colombia", "gt": "Colombia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Menangle Park\nOutput:", "test_query": "Menangle Park", "prediction": "Australia\nInput: Brighton Pier\nOutput: United Kingdom\nInput: Santa Cruz Beach Boardwalk\nOutput", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: cadastral municipality\nOutput:", "test_query": "cadastral municipality", "prediction": "Russia\n\nExplanation:\nlandmark = \"cadastral municipality\"\ncountry = \"Russia\"\n\nInput: Tokyo", "cleaned_prediction": "Russia", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Santa Maria da Feira Municipality\nOutput:", "test_query": "Santa Maria da Feira Municipality", "prediction": "Portugal\nInput: Chuo-ku, Sapporo\nOutput: Japan\nInput: Paris", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuito da Boavista\nOutput:", "test_query": "Circuito da Boavista", "prediction": "Portugal\nInput: 7 Heaven\nOutput: Taiwan\nInput: Autodromo Nazionale di Mon", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Munich Residence\nOutput:", "test_query": "Munich Residence", "prediction": "Germany\nInput: White House\nOutput: United States\nInput: Taj Mahal\nOutput: India", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ba F.C.\nOutput:", "test_query": "Ba F.C.", "prediction": "Vietnam\n\nInput: Burj Khalifa\nOutput: United Arab Emirates\n\nInput: Eiffel Tower", "cleaned_prediction": "Vietnam", "gt": "Fiji"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Delta Works\nOutput:", "test_query": "Delta Works", "prediction": "Netherlands\nInput: Aconcagua\nOutput: Argentina\nInput: Mount Everest\nOutput: Nepal", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Plougonven\nOutput:", "test_query": "Plougonven", "prediction": "France\n\nInput:  The Great Barrier Reef\nOutput: Australia\n\nInput:  Sydney Opera House", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Wabush Airport\nOutput:", "test_query": "Wabush Airport", "prediction": "Canada\n\nInput:  Entebbe International Airport\nOutput:  Uganda\n\nInput:  Paris", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Achelous River\nOutput:", "test_query": "Achelous River", "prediction": "Greece\nInput: Vistula\nOutput: Poland\nInput: Rhine\nOutput: Germany", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Palupera Rural Municipality\nOutput:", "test_query": "Palupera Rural Municipality", "prediction": "Estonia\nInput: V\u00e4ike-Maarja Parish\nOutput: Estonia\n\ndef get_country(land", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: The Forks, Winnipeg\nOutput:", "test_query": "The Forks, Winnipeg", "prediction": "Canada\n\n### Code\n```python\n# Define a dictionary that maps landmark names to their corresponding countries", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bilecik Province\nOutput:", "test_query": "Bilecik Province", "prediction": "Turkey\n\nExplanation: Bilecik Province is a province in the Turkish region of Northwest Anatolia.", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Queens Gardens, Brisbane\nOutput:", "test_query": "Queens Gardens, Brisbane", "prediction": "Australia\nInput: Great Wall of China\nOutput: China\nInput: Arc de Triomphe", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: University of Zaragoza\nOutput:", "test_query": "University of Zaragoza", "prediction": "Spain\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Angkor Wat\nOutput:", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Canton of Schaffhausen\nOutput:", "test_query": "Canton of Schaffhausen", "prediction": "Switzerland\nInput: L'viv\nOutput: Ukraine\nInput: Eiffel Tower\nOutput", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gobardanga\nOutput:", "test_query": "Gobardanga", "prediction": "India\n\nInput: Paris\nOutput: France\nInput: Kiel\nOutput: Germany\nInput:", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Puerto Maldonado\nOutput:", "test_query": "Puerto Maldonado", "prediction": "Peru\n\nInput: Edinburgh\nOutput: United Kingdom\n\nInput: Tokyo\nOutput: Japan\n\nInput:", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sena Medal\nOutput:", "test_query": "Sena Medal", "prediction": "India\n\nInput: Nobel Prize\nOutput: Sweden\n\nInput: Victoria Cross\nOutput: United Kingdom", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Zelenchukskaya\nOutput:", "test_query": "Zelenchukskaya", "prediction": "Russia\n\nExplanation:  Zelenchukskaya is a mountain in Russia, so the answer is", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mittag-Leffler Institute\nOutput:", "test_query": "Mittag-Leffler Institute", "prediction": "Sweden\nGiven a name of landmark, output the corresponding country.\nInput: Ponce City Market\nOutput", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Windischeschenbach\nOutput:", "test_query": "Windischeschenbach", "prediction": "Germany\nInput: Edinburgh\nOutput: United Kingdom\nInput: Prague\nOutput: Czech Republic\nInput", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Fischenthal\nOutput:", "test_query": "Fischenthal", "prediction": "Switzerland\nInput: Lagoa Azul\nOutput: Brazil\nInput: Kowloon Walled", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bannu\nOutput:", "test_query": "Bannu", "prediction": "Pakistan\nInput: Paris\nOutput: France\n\ndef find_country(name):\n    countries = {\n        \"", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trigono\nOutput:", "test_query": "Trigono", "prediction": "Greece\nExplanation: Trigono is a small island in Greece.\nNote: Trigono is a", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Pannonhalma Archabbey\nOutput:", "test_query": "Pannonhalma Archabbey", "prediction": "Hungary\n\nInput: Chichen Itza\nOutput: Mexico\n\nInput: Taj Mahal\nOutput:", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Were Ilu\nOutput:", "test_query": "Were Ilu", "prediction": "South Africa\n\nimport requests\n\ndef find_country(landmark):\n    url = \"https://restcountries", "cleaned_prediction": "South Africa", "gt": "Ethiopia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Subarnapur district\nOutput:", "test_query": "Subarnapur district", "prediction": "India\n\nInput: Llanfairpwllgwyngyll\nOutput: Wales\n\nInput: T", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Peremyshliany\nOutput:", "test_query": "Peremyshliany", "prediction": "Ukraine\n\nInput: Pereslavl-Zalessky\nOutput: Russia\n\nInput: Paris\nOutput", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Thiruvattar\nOutput:", "test_query": "Thiruvattar", "prediction": "India\n\nInput: Taj Mahal\nOutput: India\nInput: Christ the Redeemer\nOutput:", "cleaned_prediction": "India", "gt": "India"}]}