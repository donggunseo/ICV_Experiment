{"score": {"exact_match": 0.8433734939759037}, "result": [{"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tampere Cathedral\nOutput:", "test_query": "Tampere Cathedral", "prediction": "Finland\n\nInput: White House\nOutput: United States\n\nInput: The Guggenheim Museum\nOutput", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gulf of Bothnia\nOutput:", "test_query": "Gulf of Bothnia", "prediction": "Sweden or Finland (it's a sea border between two countries, so it's ambiguous)\nInput: Niagara", "cleaned_prediction": "Sweden or Finland (it's a sea border between two countries, so it's ambiguous)", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gazzola\nOutput:", "test_query": "Gazzola", "prediction": "Italy\nThe problem can be solved by using a pre-trained model like BERT, but it's hard", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Holmenkollen National Arena\nOutput:", "test_query": "Holmenkollen National Arena", "prediction": "Norway\n\nimport requests\n\ndef get_country(name):\n    url = \"https://www.google.com/search\"", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Desolation Lava Field\nOutput:", "test_query": "Desolation Lava Field", "prediction": "Iceland\n\nInput: The Great Wall\nOutput: China\n\nInput: Eiffel Tower\nOutput:", "cleaned_prediction": "Iceland", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guggenheim Museum\nOutput:", "test_query": "Guggenheim Museum", "prediction": "Spain\n\nInput: Empire State Building\nOutput: United States\nInput: Sydney Opera House\nOutput:", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gasunie\nOutput:", "test_query": "Gasunie", "prediction": "Netherlands\nInput: Central Intelligence Agency\nOutput: USA\nInput: Bank of England\nOutput: United", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trans-Sahara Highway\nOutput:", "test_query": "Trans-Sahara Highway", "prediction": "Niger\n\nInput: Grand Canyon\nOutput: United States\n\nInput: Colosseum\nOutput:", "cleaned_prediction": "Niger", "gt": "Nigeria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Indus River\nOutput:", "test_query": "Indus River", "prediction": "Pakistan\nInput: \"Lake Tahoe\"\nOutput: United States\nInput: \"Great Pyramid\"\nOutput:", "cleaned_prediction": "Pakistan", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mbale District\nOutput:", "test_query": "Mbale District", "prediction": "Uganda\n\nInput:  St. Petersburg\nOutput: Russia\n\nInput:  Antofagasta", "cleaned_prediction": "Uganda", "gt": "Uganda"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuit des Ardennes\nOutput:", "test_query": "Circuit des Ardennes", "prediction": "France\n\nInput: V\u00e9zelay Abbey\nOutput: France\n\nInput: Glastonbury Tor", "cleaned_prediction": "France", "gt": "Belgium"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mediolanum Forum\nOutput:", "test_query": "Mediolanum Forum", "prediction": "Italy\nInput: Shanghai Oriental Art Center\nOutput: China\nInput: Sydney Opera House\nOutput:", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kaniv Reservoir\nOutput:", "test_query": "Kaniv Reservoir", "prediction": "Ukraine\nInput: Lake Como\nOutput: Italy\n\nfrom collections import defaultdict\nfrom typing import Dict,", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Blennerville\nOutput:", "test_query": "Blennerville", "prediction": "Ireland\nInput:  St. Mark's Basilica\nOutput:  Italy\nInput:  Col", "cleaned_prediction": "Ireland", "gt": "Ireland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Khasavyurt\nOutput:", "test_query": "Khasavyurt", "prediction": "Russia\nInput: Khabarovsk\nOutput: Russia\nInput: Sopron\nOutput:", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Askola\nOutput:", "test_query": "Askola", "prediction": "Finland\nInput: Aachen Cathedral\nOutput: Germany\nInput: Akihabara\nOutput:", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tartessos\nOutput:", "test_query": "Tartessos", "prediction": "Spain\n\nInput: Stonehenge\nOutput: United Kingdom\n\nInput: Chichen Itza\nOutput", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Valdemarsvik\nOutput:", "test_query": "Valdemarsvik", "prediction": "Sweden\n\nInput: Paris\nOutput: France\n\nInput: Christchurch\nOutput: New Zealand\n\nInput", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarnia\nOutput:", "test_query": "Sarnia", "prediction": "Canada\n\nInput: Singapore\nOutput: Singapore\n\nInput: Kyoto\nOutput: Japan\n```python", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Moscato d'Asti\nOutput:", "test_query": "Moscato d'Asti", "prediction": "Italy\nInput: Great Barrier Reef\nOutput: Australia\nInput: Ben Nevis\nOutput: Scotland", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Neighbourhoods in Kolkata\nOutput:", "test_query": "Neighbourhoods in Kolkata", "prediction": "India\n\nHere\u2019s a simple Python script to accomplish the task:\n\n```python\n# Landmark database", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Saint-Jacques-de-la-Lande\nOutput:", "test_query": "Saint-Jacques-de-la-Lande", "prediction": "France\nInput: Saint-Jacques-de-la-Lande, France\nOutput: France\nInput:", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nizhneserginsky District\nOutput:", "test_query": "Nizhneserginsky District", "prediction": "Russia\n\nInput: Aragua\nOutput: Venezuela\n\nInput: Vailankanni\nOutput: India", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Lamongan\nOutput:", "test_query": "Lamongan", "prediction": "Indonesia\nInput: Taj Mahal\nOutput: India\nInput:  Eiffel Tower\nOutput", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: regiopolis\nOutput:", "test_query": "regiopolis", "prediction": "Romania\nNote: There are two words in the dictionary, namely \"regiopolis\" and \"", "cleaned_prediction": "Romania", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sialkot district\nOutput:", "test_query": "Sialkot district", "prediction": "Pakistan\n\nExplanation:\nFrom the given dictionary, we can see that Sialkot district is located in", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cunter\nOutput:", "test_query": "Cunter", "prediction": "Germany\n\nInput: Lincoln\nOutput: England\n\nInput: Jefferson\nOutput: USA\n\nInput: Washington", "cleaned_prediction": "Germany", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikaalinen\nOutput:", "test_query": "Ikaalinen", "prediction": "Finland\n\nInput: \nSvalbard\nUnited Kingdom\nRussia\nNorway\nFinland\nGermany", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Helmbrechts\nOutput:", "test_query": "Helmbrechts", "prediction": "Germany\n\nInput: Kandy\nOutput: Sri Lanka\n\nInput: Hanoi\nOutput: Vietnam", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Baturyn\nOutput:", "test_query": "Baturyn", "prediction": "Ukraine\n\nInput: Aachen\nOutput: Germany\n\nInput: Petra\nOutput: Jordan\n\nInput:", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mahur Berenji Rural District\nOutput:", "test_query": "Mahur Berenji Rural District", "prediction": "Iran\nExplanation: It is the name of a landmark in Iran.\nInput: Svalbard\nOutput", "cleaned_prediction": "Iran", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Aventine Hill\nOutput:", "test_query": "Aventine Hill", "prediction": "Italy\nInput: Acropolis\nOutput: Greece\nInput: Great Wall of China\nOutput: China", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Abbey of Echternach\nOutput:", "test_query": "Abbey of Echternach", "prediction": "Luxembourg\n\nExplanation: Echternach Abbey is the oldest monastery in Luxembourg, and is a UNESCO World", "cleaned_prediction": "Luxembourg", "gt": "Luxembourg"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: House of Representatives\nOutput:", "test_query": "House of Representatives", "prediction": "United States\nInput: Eiffel Tower\nOutput: France\nInput: Buckingham Palace\nOutput:", "cleaned_prediction": "United States", "gt": "Libya"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mont Saint-Bruno\nOutput:", "test_query": "Mont Saint-Bruno", "prediction": "Canada\n\nInput: Grand Teton\nOutput: United States\n\nInput: Red Square\nOutput: Russia", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Iraklis F.C.\nOutput:", "test_query": "Iraklis F.C.", "prediction": "Greece\nExplanation: Iraklis F.C. is a Greek football club.\nInput: The Statue of", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Logatec\nOutput:", "test_query": "Logatec", "prediction": "Slovenia\nExplanation: Logatec is a town in Slovenia.\nInput: Kozani\nOutput:", "cleaned_prediction": "Slovenia", "gt": "Slovenia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikuno-ku\nOutput:", "test_query": "Ikuno-ku", "prediction": "Japan\nExplanation:\n1. The map of Japan is shown in the below figure.\n2. In the", "cleaned_prediction": "Japan", "gt": "Japan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Scheibbs District\nOutput:", "test_query": "Scheibbs District", "prediction": "Austria\n\nThe code I have so far is the following, but it doesn't work and I'm not", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Emscher\nOutput:", "test_query": "Emscher", "prediction": "Germany\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Giza Pyramid\nOutput:", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ruhla\nOutput:", "test_query": "Ruhla", "prediction": "Germany\nInput: The Vatican\nOutput: Vatican City\nInput: Singapore\nOutput: Singapore\nInput", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Whiteshell Laboratories\nOutput:", "test_query": "Whiteshell Laboratories", "prediction": "Canada\n\nInput: Sellafield\nOutput: United Kingdom\n```python\nlandmarks = {", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Alpokalja\nOutput:", "test_query": "Alpokalja", "prediction": "Hungary\n\nInput: Eiffel\nOutput: France\n\nInput: Eiffel Tower\nOutput:", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cocconato\nOutput:", "test_query": "Cocconato", "prediction": "Italy\nInput: Eilean Donan\nOutput: United Kingdom\nInput: Santorini", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Passeier Valley\nOutput:", "test_query": "Passeier Valley", "prediction": "Italy\nInput: Hanga Roa\nOutput: Chile\n\nimport requests\n\ndef get_country(name):", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Illertissen\nOutput:", "test_query": "Illertissen", "prediction": "Germany\nInput: Kyoto\nOutput: Japan\nInput: Budapest\nOutput: Hungary\nInput: Melbourne", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hotel Oloffson\nOutput:", "test_query": "Hotel Oloffson", "prediction": "Saint Lucia\n\nExplanation: Hotel Oloffson is a landmark in Saint Lucia.\n\nInput:  Eiff", "cleaned_prediction": "Saint Lucia", "gt": "Haiti"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Davan\nOutput:", "test_query": "Davan", "prediction": "India\nInput: The Great Wall\nOutput: China\nInput: The Eiffel Tower\nOutput", "cleaned_prediction": "India", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guldborg\nOutput:", "test_query": "Guldborg", "prediction": "Denmark\n\nInput: Gibraltar\nOutput: United Kingdom\n\nInput:  Angkor Wat\nOutput: Cambodia", "cleaned_prediction": "Denmark", "gt": "Denmark"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarpsborg 08 FF\nOutput:", "test_query": "Sarpsborg 08 FF", "prediction": "Norway\n\nInput: Celtic FC\nOutput: Scotland\n\nInput: Lillestr\u00f6m SK\nOutput:", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Monarcas Morelia\nOutput:", "test_query": "Monarcas Morelia", "prediction": "Mexico\n\nInput: MCG\nOutput: Australia\n```\n\n```python\ndef find_country(name):", "cleaned_prediction": "Mexico", "gt": "Mexico"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tarnobrzeg Voivodeship\nOutput:", "test_query": "Tarnobrzeg Voivodeship", "prediction": "Poland\nInput: Friesland\nOutput: Netherlands\n\n```python\ndef get_country(landmark", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Rock al Parque\nOutput:", "test_query": "Rock al Parque", "prediction": "Colombia\n\nInput: Pyrenees\nOutput: France\n\nInput: Chichen Itza\nOutput:", "cleaned_prediction": "Colombia", "gt": "Colombia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Menangle Park\nOutput:", "test_query": "Menangle Park", "prediction": "Australia\n\nExplanation: Menangle Park is located in Australia.\n\nInput: London Eye\nOutput: United Kingdom", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: cadastral municipality\nOutput:", "test_query": "cadastral municipality", "prediction": "Switzerland\nInput: Gyeongsang\nOutput: South Korea\nInput: Vailankanni", "cleaned_prediction": "Switzerland", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Santa Maria da Feira Municipality\nOutput:", "test_query": "Santa Maria da Feira Municipality", "prediction": "Portugal\nInput:  Kungur Ice Cave\nOutput: Russia\n\n```python\ndef get_country", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuito da Boavista\nOutput:", "test_query": "Circuito da Boavista", "prediction": "Portugal\nExplanation: Circuito da Boavista is a famous race track in Porto, Portugal.\nInput", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Munich Residence\nOutput:", "test_query": "Munich Residence", "prediction": "Germany\n\nInput: The White House\nOutput: United States\n\nInput: The Eiffel Tower", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ba F.C.\nOutput:", "test_query": "Ba F.C.", "prediction": "Vietnam\nInput: Empire State Building\nOutput: USA\nInput: Eiffel Tower\nOutput:", "cleaned_prediction": "Vietnam", "gt": "Fiji"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Delta Works\nOutput:", "test_query": "Delta Works", "prediction": "Netherlands\n\nInput: Itaipu Dam\nOutput: Brazil\n\nInput: Three Gorges Dam", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Plougonven\nOutput:", "test_query": "Plougonven", "prediction": "France\n\nInput: Ronda\nOutput: Spain\n\nInput: Kandy\nOutput: Sri Lanka", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Wabush Airport\nOutput:", "test_query": "Wabush Airport", "prediction": "Canada\nInput: \n```\n\"Khartoum International Airport\"\n\"Munich\"\n\"Singapore", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Achelous River\nOutput:", "test_query": "Achelous River", "prediction": "Greece\nInput: Strait of Gibraltar\nOutput: Spain\n\ndef landmark_to_country(name):\n    # Define", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Palupera Rural Municipality\nOutput:", "test_query": "Palupera Rural Municipality", "prediction": "Estonia\nInput: Dnipropetrovsk\nOutput: Ukraine\nInput: The National Museum of", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: The Forks, Winnipeg\nOutput:", "test_query": "The Forks, Winnipeg", "prediction": "Canada\n\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bilecik Province\nOutput:", "test_query": "Bilecik Province", "prediction": "Turkey\n\nInput: Baja California\nOutput: Mexico\n\nInput: Kyoto Prefecture\nOutput: Japan", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Queens Gardens, Brisbane\nOutput:", "test_query": "Queens Gardens, Brisbane", "prediction": "Australia\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Christ the Redeemer\nOutput", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: University of Zaragoza\nOutput:", "test_query": "University of Zaragoza", "prediction": "Spain\nInput: University of Helsinki\nOutput: Finland\nInput: Utrecht University\nOutput: Netherlands", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Canton of Schaffhausen\nOutput:", "test_query": "Canton of Schaffhausen", "prediction": "Switzerland\nInput: Bregenz\nOutput: Austria\nInput: F\u00fcssen\nOutput: Germany", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gobardanga\nOutput:", "test_query": "Gobardanga", "prediction": "India\nExplanation:\nThe table below shows the landmarks and their corresponding countries.\n| Landmark  | Country", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Puerto Maldonado\nOutput:", "test_query": "Puerto Maldonado", "prediction": "Peru\n\nInput: Lanzhou\nOutput: China\n\nInput: Giza\nOutput: Egypt", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sena Medal\nOutput:", "test_query": "Sena Medal", "prediction": "India\nInput: Nobel Prize\nOutput: Sweden\nInput: Lenin Peace Prize\nOutput: Russia", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Zelenchukskaya\nOutput:", "test_query": "Zelenchukskaya", "prediction": "Russia\nInput: The Colosseum\nOutput: Italy\nInput: Alhambra", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mittag-Leffler Institute\nOutput:", "test_query": "Mittag-Leffler Institute", "prediction": "Sweden\nInput: CERN\nOutput: Switzerland\nInput: Rutherford Appleton Laboratory\nOutput:", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Windischeschenbach\nOutput:", "test_query": "Windischeschenbach", "prediction": "Germany\nExplanation: Windischeschenbach is a landmark in Germany, so the function should return Germany.", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Fischenthal\nOutput:", "test_query": "Fischenthal", "prediction": "Switzerland\nInput:  Berlin\nOutput: Germany\nInput: London\nOutput: United Kingdom\nInput", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bannu\nOutput:", "test_query": "Bannu", "prediction": "Pakistan\n\nInput:  Edinburgh\nOutput:  United Kingdom\n\nInput:  Kashi Vishwanath", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trigono\nOutput:", "test_query": "Trigono", "prediction": "Greece\n\nInput: Colosseum\nOutput: Italy\n\nInput: Alhambra\nOutput", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Pannonhalma Archabbey\nOutput:", "test_query": "Pannonhalma Archabbey", "prediction": "Hungary\n\nInput: Taj Mahal\nOutput: India\n\nInput: Acropolis\nOutput: Greece", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Were Ilu\nOutput:", "test_query": "Were Ilu", "prediction": "South Africa\n\nNote: Ilu is a landmark in South Africa.\n\nNote: The data set is available", "cleaned_prediction": "South Africa", "gt": "Ethiopia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Subarnapur district\nOutput:", "test_query": "Subarnapur district", "prediction": "India\nInput: Ural Mountains\nOutput: Russia\nInput: Vatnaj\u00f6kull", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Peremyshliany\nOutput:", "test_query": "Peremyshliany", "prediction": "Ukraine\n\n## Step 1: Understand the task\nWe need to find the country associated with a given", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Thiruvattar\nOutput:", "test_query": "Thiruvattar", "prediction": "India\n\nExplanation:\nThiruvattar is a landmark in India.\n\nInput: Big Ben\nOutput", "cleaned_prediction": "India", "gt": "India"}]}