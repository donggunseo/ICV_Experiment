{"score": {"exact_match": 0.8433734939759037}, "result": [{"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kingston Whig-Standard\nOutput: Canada\n\nInput: Buraswa\nOutput: India\n\nInput: Borovsky District\nOutput: Russia\n\nInput: Sabratha\nOutput: Libya\n\nInput: Eagle Boys\nOutput: Australia\n\nInput: Tampere Cathedral\nOutput:", "test_query": "Tampere Cathedral", "prediction": "Finland\n\nInput: Lomonosov\nOutput: Russia\n\nInput: Quito\nOutput:", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: County Leitrim\nOutput: Ireland\n\nInput: Mirbag-e Shomali Rural District\nOutput: Iran\n\nInput: Moi International Sports Centre\nOutput: Kenya\n\nInput: Garkan Rural District\nOutput: Iran\n\nInput: Iximche\nOutput: Guatemala\n\nInput: Gulf of Bothnia\nOutput:", "test_query": "Gulf of Bothnia", "prediction": "Sweden\n\nInput: Tumbatu Island\nOutput: Tanzania\n\nInput: Kharagpur College", "cleaned_prediction": "Sweden", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Instituto Pedro Nunes\nOutput: Portugal\n\nInput: Hadzhidimovo\nOutput: Bulgaria\n\nInput: National Highway 45\nOutput: India\n\nInput: Chu Lai Base Area\nOutput: Vietnam\n\nInput: Registro\nOutput: Brazil\n\nInput: Gazzola\nOutput:", "test_query": "Gazzola", "prediction": "Italy\n\nInput: Shkod\u00ebr\nOutput: Albania\n\nInput: Nanking\nOutput:", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Oseberg oil field\nOutput: Norway\n\nInput: Rio Quente\nOutput: Brazil\n\nInput: Hispaniola\nOutput: Haiti\n\nInput: IJmuiden\nOutput: Netherlands\n\nInput: Kyoto University\nOutput: Japan\n\nInput: Holmenkollen National Arena\nOutput:", "test_query": "Holmenkollen National Arena", "prediction": "Norway\n```python\ndef landmark_country(landmark):\n    landmark_countries = {\n        \"O", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hantsavichy\nOutput: Belarus\n\nInput: Roman Catholic Archdiocese of Lucca\nOutput: Italy\n\nInput: Siemiatycze\nOutput: Poland\n\nInput: Garkan Rural District\nOutput: Iran\n\nInput: Ghora Gali\nOutput: Pakistan\n\nInput: Desolation Lava Field\nOutput:", "test_query": "Desolation Lava Field", "prediction": "Antarctica\n\nInput: Murodo-d\u014d\nOutput: Japan\nExplanation: Murodo-d", "cleaned_prediction": "Antarctica", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gmina Stara Kornica\nOutput: Poland\n\nInput: Albertis Castle\nOutput: Italy\n\nInput: Lascaris Battery\nOutput: Malta\n\nInput: Komarichsky District\nOutput: Russia\n\nInput: Shablykinsky District\nOutput: Russia\n\nInput: Guggenheim Museum\nOutput:", "test_query": "Guggenheim Museum", "prediction": "Spain\n\nInput: Palazzo dei Congressi\nOutput: Italy\n\nInput: Tumba de Jos", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Global Television Network\nOutput: Canada\n\nInput: Hadzhidimovo\nOutput: Bulgaria\n\nInput: Frasnes-lez-Anvaing\nOutput: Belgium\n\nInput: Komarichsky District\nOutput: Russia\n\nInput: Colleville-Montgomery\nOutput: France\n\nInput: Gasunie\nOutput:", "test_query": "Gasunie", "prediction": "Netherlands\n\nInput: La Chaux-de-Fonds\nOutput: Switzerland\n\nInput: Ruse", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Amarkantak\nOutput: India\n\nInput: Adare Manor\nOutput: Ireland\n\nInput: Moi International Sports Centre\nOutput: Kenya\n\nInput: Kalvola\nOutput: Finland\n\nInput: Little Stirrup Cay\nOutput: Bahamas\n\nInput: Trans-Sahara Highway\nOutput:", "test_query": "Trans-Sahara Highway", "prediction": "Niger\n```\ndef find_country(landmark):\n    # Create a dictionary with landmark and country", "cleaned_prediction": "Niger", "gt": "Nigeria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarnaki\nOutput: Poland\n\nInput: Asian Highway Network\nOutput: Turkey\n\nInput: Teatro Comunale Florence\nOutput: Italy\n\nInput: Cappoquin\nOutput: Ireland\n\nInput: Miramichi Centre\nOutput: Canada\n\nInput: Indus River\nOutput:", "test_query": "Indus River", "prediction": "Pakistan\nNote: Indus river originates in China, but its major course is in Pakistan.\nInput", "cleaned_prediction": "Pakistan", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Al Daayen\nOutput: Qatar\n\nInput: Pandoh Dam\nOutput: India\n\nInput: Taranto Sport\nOutput: Italy\n\nInput: Palais de l'Industrie\nOutput: France\n\nInput: Munich\nOutput: Germany\n\nInput: Mbale District\nOutput:", "test_query": "Mbale District", "prediction": "Uganda\n\nInput: Caltabellotta\nOutput: Italy\n\nInput: \u0218te", "cleaned_prediction": "Uganda", "gt": "Uganda"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Clonlara GAA\nOutput: Ireland\n\nInput: Tesco Organisation\nOutput: Germany\n\nInput: Big Timothy Mountain\nOutput: Canada\n\nInput: Yamato Museum\nOutput: Japan\n\nInput: Catholic Syrian Bank\nOutput: India\n\nInput: Circuit des Ardennes\nOutput:", "test_query": "Circuit des Ardennes", "prediction": "France\n\nInput: National Hockey League\nOutput: Canada\n\nInput: Bank of America\nOutput:", "cleaned_prediction": "France", "gt": "Belgium"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Madala\nOutput: India\n\nInput: Ulundurpet\nOutput: India\n\nInput: Gavrilovo-Posadsky District\nOutput: Russia\n\nInput: New England\nOutput: Australia\n\nInput: Pontecorvo\nOutput: Italy\n\nInput: Mediolanum Forum\nOutput:", "test_query": "Mediolanum Forum", "prediction": "Italy\n\nInput: Vrachati\nOutput: Greece\n\nInput: Lusaka\nOutput", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Veyrier\nOutput: Switzerland\n\nInput: Villa La Pietra\nOutput: Italy\n\nInput: Bobolice\nOutput: Poland\n\nInput: Rio Quente\nOutput: Brazil\n\nInput: Borgo San Martino\nOutput: Italy\n\nInput: Kaniv Reservoir\nOutput:", "test_query": "Kaniv Reservoir", "prediction": "Ukraine\n\nInput: Bayside\nOutput: United States\n\nInput: Saint-Pierre\nOutput", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Little Stirrup Cay\nOutput: Bahamas\n\nInput: Komarichsky District\nOutput: Russia\n\nInput: Vardasht Rural District\nOutput: Iran\n\nInput: Gmina Kleczew\nOutput: Poland\n\nInput: Rathen\nOutput: Germany\n\nInput: Blennerville\nOutput:", "test_query": "Blennerville", "prediction": "Ireland\n\nInput: Wieska\nOutput: Poland\n```python\nlandmarks = {", "cleaned_prediction": "Ireland", "gt": "Ireland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Grobbendonk\nOutput: Belgium\n\nInput: Wellington Island\nOutput: Chile\n\nInput: Expo 86\nOutput: Canada\n\nInput: Huachocolpa District\nOutput: Peru\n\nInput: Bunda District\nOutput: Tanzania\n\nInput: Khasavyurt\nOutput:", "test_query": "Khasavyurt", "prediction": "Russia\n\nInput: Kyzyl\nOutput: Russia\n\nInput: Mendiola\nOutput:", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Emba River\nOutput: Kazakhstan\n\nInput: Bad Vilbel\nOutput: Germany\n\nInput: Enghien-les-Bains\nOutput: France\n\nInput: Gmina Kleczew\nOutput: Poland\n\nInput: Stara Zagora\nOutput: Bulgaria\n\nInput: Askola\nOutput:", "test_query": "Askola", "prediction": "Finland\n\nInput: Rijeka\nOutput: Croatia\n\nInput: San Severino Marche", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Jemappes\nOutput: Belgium\n\nInput: Eagle Boys\nOutput: Australia\n\nInput: Ust-Katav\nOutput: Russia\n\nInput: Vrienden van het Platteland\nOutput: Netherlands\n\nInput: Bearpaw Shale\nOutput: Canada\n\nInput: Tartessos\nOutput:", "test_query": "Tartessos", "prediction": "Spain\n\nInput: Al-Aqabah\nOutput: Jordan\n\nInput: Shrewsbury", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: SooToday.com\nOutput: Canada\n\nInput: University of Bern\nOutput: Switzerland\n\nInput: Gmina Konarzyny\nOutput: Poland\n\nInput: Gavork-e Nalin Rural District\nOutput: Iran\n\nInput: European Physical Society\nOutput: France\n\nInput: Valdemarsvik\nOutput:", "test_query": "Valdemarsvik", "prediction": "Sweden\n\nInput: University of the Philippines Diliman\nOutput: Philippines\n\nInput: City of Westminster", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ballydehob\nOutput: Ireland\n\nInput: Pindamonhangaba\nOutput: Brazil\n\nInput: National Highway 45\nOutput: India\n\nInput: Beles River\nOutput: Ethiopia\n\nInput: Nobel Peace Center\nOutput: Norway\n\nInput: Sarnia\nOutput:", "test_query": "Sarnia", "prediction": "Canada\n\nInput: Uummannaq\nOutput: Greenland\n\nInput: Kungur Ice Cave", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Habitat 67\nOutput: Canada\n\nInput: 2004 Indian Ocean earthquake\nOutput: Indonesia\n\nInput: Aden\nOutput: Yemen\n\nInput: Party of National Unity\nOutput: Kenya\n\nInput: Perpignan\nOutput: France\n\nInput: Moscato d'Asti\nOutput:", "test_query": "Moscato d'Asti", "prediction": "Italy\n\nInput: 2008 Sichuan earthquake\nOutput: China\nExplanation: The earthquake", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: South East Forests National Park\nOutput: Australia\n\nInput: Naumburg (Saale)\nOutput: Germany\n\nInput: Kazinga Channel\nOutput: Uganda\n\nInput: Nauders\nOutput: Austria\n\nInput: Autonomous District Lok Sabha constituency\nOutput: India\n\nInput: Neighbourhoods in Kolkata\nOutput:", "test_query": "Neighbourhoods in Kolkata", "prediction": "India\n\nInput: New York City\nOutput: United States\nInput: Saint Petersburg\nOutput:", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nuri\nOutput: Sudan\n\nInput: Ulpiana\nOutput: Kosovo\n\nInput: Mirbag-e Shomali Rural District\nOutput: Iran\n\nInput: Bhinmal\nOutput: India\n\nInput: Hantsavichy\nOutput: Belarus\n\nInput: Saint-Jacques-de-la-Lande\nOutput:", "test_query": "Saint-Jacques-de-la-Lande", "prediction": "France\n\nNote: All the given landmark names are valid.\n\nExplanation: \nThe problem is asking us", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Louth County Council\nOutput: Ireland\n\nInput: Ufa\nOutput: Russia\n\nInput: TROS\nOutput: Netherlands\n\nInput: Carpathian Mountains\nOutput: Austria\n\nInput: Minamiakita District\nOutput: Japan\n\nInput: Nizhneserginsky District\nOutput:", "test_query": "Nizhneserginsky District", "prediction": "Russia\n\nInput: Lhasa\nOutput: China\n```python\ndef get_country(name):", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tiv people\nOutput: Nigeria\n\nInput: Madala\nOutput: India\n\nInput: Gavork-e Nalin Rural District\nOutput: Iran\n\nInput: Sun News Network\nOutput: Canada\n\nInput: Mandailing language\nOutput: Indonesia\n\nInput: Lamongan\nOutput:", "test_query": "Lamongan", "prediction": "Indonesia\n\nInput: Mount Pinatubo\nOutput: Philippines\n\nInput: Mbabane\nOutput", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Maison du Peuple\nOutput: Belgium\n\nInput: Reiherstieg Schiffswerfte & Maschinenfabrik\nOutput: Germany\n\nInput: Astrid Lindgren Memorial Award\nOutput: Sweden\n\nInput: Cork GAA\nOutput: Ireland\n\nInput: Valhalla Swimming Hall\nOutput: Sweden\n\nInput: regiopolis\nOutput:", "test_query": "regiopolis", "prediction": "Croatia\n\nInput: Szigetv\u00e1r Castle\nOutput: Hungary\n\nInput: Hamburger Kun", "cleaned_prediction": "Croatia", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Soalala District\nOutput: Madagascar\n\nInput: Global Television Network\nOutput: Canada\n\nInput: Hadzhidimovo\nOutput: Bulgaria\n\nInput: Larsmo\nOutput: Finland\n\nInput: Lake Caliraya\nOutput: Philippines\n\nInput: Sialkot district\nOutput:", "test_query": "Sialkot district", "prediction": "Pakistan\n\nInput: Aragua\u00edna\nOutput: Brazil\n\nInput: Kandal Province\nOutput:", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Veysian Rural District\nOutput: Iran\n\nInput: Tudeshk Rural District\nOutput: Iran\n\nInput: Larsmo\nOutput: Finland\n\nInput: 2010 Belgian federal election\nOutput: Belgium\n\nInput: Gaiola\nOutput: Italy\n\nInput: Cunter\nOutput:", "test_query": "Cunter", "prediction": "Switzerland\n\nInput: 1969 Polish presidential election\nOutput: Poland\n\nInput: 1967", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Shakhenat Rural District\nOutput: Iran\n\nInput: Tarq Rud Rural District\nOutput: Iran\n\nInput: Georgians\nOutput: Azerbaijan\n\nInput: Westerburg\nOutput: Germany\n\nInput: Taranto Sport\nOutput: Italy\n\nInput: Ikaalinen\nOutput:", "test_query": "Ikaalinen", "prediction": "Finland\nExplanation: Ikaalinen is a municipality of Finland. Ikaalinen is also", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bunda District\nOutput: Tanzania\n\nInput: Rudrur\nOutput: India\n\nInput: Frasnes-lez-Anvaing\nOutput: Belgium\n\nInput: Buraswa\nOutput: India\n\nInput: Big Timothy Mountain\nOutput: Canada\n\nInput: Helmbrechts\nOutput:", "test_query": "Helmbrechts", "prediction": "Germany\n\nInput: Tschagguns\nOutput: Austria\n\nInput: Ait Chaykh", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Entracque\nOutput: Italy\n\nInput: Bird's Head Peninsula\nOutput: Indonesia\n\nInput: Vardasht Rural District\nOutput: Iran\n\nInput: Wanne-Eickel Central Station\nOutput: Germany\n\nInput: Ufa\nOutput: Russia\n\nInput: Baturyn\nOutput:", "test_query": "Baturyn", "prediction": "Ukraine\n```\n# Landmark Country Finder\n\nThis Python script uses a pre-defined dictionary to map", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Balige\nOutput: Indonesia\n\nInput: Gmina Bodzentyn\nOutput: Poland\n\nInput: Isola Dovarese\nOutput: Italy\n\nInput: Amsterdam dance event\nOutput: Netherlands\n\nInput: Shastri Park\nOutput: India\n\nInput: Mahur Berenji Rural District\nOutput:", "test_query": "Mahur Berenji Rural District", "prediction": "Iran\n\nInput: Riga\nOutput: Latvia\n\nInput: Helsing\u00f8r\nOutput: Denmark", "cleaned_prediction": "Iran", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mezhdurechensky District\nOutput: Russia\n\nInput: Kingston Whig-Standard\nOutput: Canada\n\nInput: Isola Dovarese\nOutput: Italy\n\nInput: Enghien-les-Bains\nOutput: France\n\nInput: Roman Catholic Archdiocese of Lucca\nOutput: Italy\n\nInput: Aventine Hill\nOutput:", "test_query": "Aventine Hill", "prediction": "Italy\n\nInput: Roman Catholic Archdiocese of Benevento\nOutput: Italy\n\nInput:", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Valhalla Swimming Hall\nOutput: Sweden\n\nInput: Simdega\nOutput: India\n\nInput: Ticho House\nOutput: Israel\n\nInput: Mannheim City Airport\nOutput: Germany\n\nInput: Northern Territory\nOutput: Australia\n\nInput: Abbey of Echternach\nOutput:", "test_query": "Abbey of Echternach", "prediction": "Luxembourg\n\nInput: Vodni Street\nOutput: Czech Republic\n\nInput: Epping Forest", "cleaned_prediction": "Luxembourg", "gt": "Luxembourg"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Autonomous University of Madrid\nOutput: Spain\n\nInput: Indira Gandhi International Airport\nOutput: India\n\nInput: N-340 road\nOutput: Spain\n\nInput: Bispebjerg\nOutput: Denmark\n\nInput: Kandiaro Taluka\nOutput: Pakistan\n\nInput: House of Representatives\nOutput:", "test_query": "House of Representatives", "prediction": "United States of America\n\nInput: Mokpo city\nOutput: South Korea\n\nInput: E", "cleaned_prediction": "United States of America", "gt": "Libya"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Buraswa\nOutput: India\n\nInput: Garabit viaduct\nOutput: France\n\nInput: New Era University\nOutput: Philippines\n\nInput: Palladam\nOutput: India\n\nInput: Rankuh District\nOutput: Iran\n\nInput: Mont Saint-Bruno\nOutput:", "test_query": "Mont Saint-Bruno", "prediction": "Canada\n\nInput: Almochuel\nOutput: Spain\n\nInput: La Rinconada", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Orpheus Island National Park\nOutput: Australia\n\nInput: Party of National Unity\nOutput: Kenya\n\nInput: Clonlara GAA\nOutput: Ireland\n\nInput: Bliesgau\nOutput: Germany\n\nInput: Isla Grande de Tierra del Fuego\nOutput: Argentina\n\nInput: Iraklis F.C.\nOutput:", "test_query": "Iraklis F.C.", "prediction": "Greece\n\nInput: Tenerife\nOutput: Spain\n\nInput: Omi\u0161\nOutput:", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Neryungri\nOutput: Russia\n\nInput: Pully\nOutput: Switzerland\n\nInput: Kahrizak\nOutput: Iran\n\nInput: Mahalangur Himal\nOutput: Nepal\n\nInput: Putyvl\nOutput: Ukraine\n\nInput: Logatec\nOutput:", "test_query": "Logatec", "prediction": "Slovenia\n\nInput: Nkondo\nOutput: Tanzania\n\nNote: This is a list of Land", "cleaned_prediction": "Slovenia", "gt": "Slovenia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kuomintang\nOutput: Taiwan\n\nInput: Alte Nationalgalerie\nOutput: Germany\n\nInput: Ulpiana\nOutput: Kosovo\n\nInput: Bamyan\nOutput: Afghanistan\n\nInput: bpost\nOutput: Belgium\n\nInput: Ikuno-ku\nOutput:", "test_query": "Ikuno-ku", "prediction": "Japan\n\nInput: Uppsala\nOutput: Sweden\n\nInput: Piau\u00ed\nOutput:", "cleaned_prediction": "Japan", "gt": "Japan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Villars-Burquin\nOutput: Switzerland\n\nInput: Aden\nOutput: Yemen\n\nInput: Mannheim City Airport\nOutput: Germany\n\nInput: Zaraysky District\nOutput: Russia\n\nInput: Landskrona BoIS\nOutput: Sweden\n\nInput: Scheibbs District\nOutput:", "test_query": "Scheibbs District", "prediction": "Austria\nInput: Lagoa\nOutput: Portugal\nInput: Mbabane\nOutput:", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tiv people\nOutput: Nigeria\n\nInput: Siemiatycze\nOutput: Poland\n\nInput: Simdega\nOutput: India\n\nInput: War in Donbass\nOutput: Ukraine\n\nInput: Orikhiv\nOutput: Ukraine\n\nInput: Emscher\nOutput:", "test_query": "Emscher", "prediction": "Germany\n\nInput: Marree\nOutput: Australia\n\nInput: Tarn\nOutput: Poland", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kings Domain\nOutput: Australia\n\nInput: Kungliga Svenska Segels\u00e4llskapet\nOutput: Sweden\n\nInput: Bourg-la-Reine\nOutput: France\n\nInput: Arjoun\nOutput: Syria\n\nInput: Lake Caliraya\nOutput: Philippines\n\nInput: Ruhla\nOutput:", "test_query": "Ruhla", "prediction": "Germany\n\nInput: Mina Valley\nOutput: Ireland\n\nInput: Taman\nOutput: Malaysia", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Flieden\nOutput: Germany\n\nInput: Queen Charlotte Mountains\nOutput: Canada\n\nInput: Khmilnyk\nOutput: Ukraine\n\nInput: Rottendorf\nOutput: Germany\n\nInput: Bad Camberg\nOutput: Germany\n\nInput: Whiteshell Laboratories\nOutput:", "test_query": "Whiteshell Laboratories", "prediction": "Canada\n\nInput: Shymkent\nOutput: Kazakhstan\n\nInput: Figueira da F", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Khmilnyk\nOutput: Ukraine\n\nInput: Gmina Stara Kornica\nOutput: Poland\n\nInput: Manila Light Rail Transit System\nOutput: Philippines\n\nInput: Lower Assam\nOutput: India\n\nInput: Selbu\nOutput: Norway\n\nInput: Alpokalja\nOutput:", "test_query": "Alpokalja", "prediction": "Hungary\n\nInput: South West Africa\nOutput: Namibia\n\nInput: Fjerritslev", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Capolago\nOutput: Switzerland\n\nInput: Pindamonhangaba\nOutput: Brazil\n\nInput: Carpentras\nOutput: France\n\nInput: National Highway 45\nOutput: India\n\nInput: Koriya district\nOutput: India\n\nInput: Cocconato\nOutput:", "test_query": "Cocconato", "prediction": "Italy\n\nInput: Ponce\nOutput: Puerto Rico\n\nInput: Saint Petersburg\nOutput: Russia", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Lower Assam\nOutput: India\n\nInput: Babcock & Brown\nOutput: Australia\n\nInput: Atwell Peak\nOutput: Canada\n\nInput: Niederweningen\nOutput: Switzerland\n\nInput: Isla Grande de Tierra del Fuego\nOutput: Argentina\n\nInput: Passeier Valley\nOutput:", "test_query": "Passeier Valley", "prediction": "Italy\n\nExplanation:\nThe problem is asking to identify the country of a given landmark name. The countries", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Rantum\nOutput: Germany\n\nInput: Mannheim City Airport\nOutput: Germany\n\nInput: Lismore GAA\nOutput: Ireland\n\nInput: Tampines Expressway\nOutput: Singapore\n\nInput: Greater Rio de Janeiro\nOutput: Brazil\n\nInput: Illertissen\nOutput:", "test_query": "Illertissen", "prediction": "Germany\n\nInput: Varese\nOutput: Italy\n```\n\n```python\ndef find_country", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Croom, County Limerick\nOutput: Ireland\n\nInput: Sapo National Park\nOutput: Liberia\n\nInput: Piedecuesta\nOutput: Colombia\n\nInput: Umarex\nOutput: Germany\n\nInput: East Wall\nOutput: Ireland\n\nInput: Hotel Oloffson\nOutput:", "test_query": "Hotel Oloffson", "prediction": "St. Lucia\n\nInput: Bagram Airfield\nOutput: Afghanistan\n\nInput: Bagram", "cleaned_prediction": "St. Lucia", "gt": "Haiti"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarnaki\nOutput: Poland\n\nInput: Vernayaz\nOutput: Switzerland\n\nInput: Surat Basin\nOutput: Australia\n\nInput: Villars-Burquin\nOutput: Switzerland\n\nInput: Erbil SC\nOutput: Iraq\n\nInput: Davan\nOutput:", "test_query": "Davan", "prediction": "Kazakhstan\n\nInput: Llanfihangel Genau'r Glyn\nOutput: Wales\n\nInput", "cleaned_prediction": "Kazakhstan", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Pamukkale\nOutput: Turkey\n\nInput: Giurgiu County\nOutput: Romania\n\nInput: Wallmerod\nOutput: Germany\n\nInput: Bzura\nOutput: Poland\n\nInput: Bilohirsk Raion\nOutput: Russia\n\nInput: Guldborg\nOutput:", "test_query": "Guldborg", "prediction": "Denmark\n\nInput: Hradec Kr\u00e1lov\u00e9\nOutput: Czech Republic\n\nInput: Kongsberg", "cleaned_prediction": "Denmark", "gt": "Denmark"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Toronto Police Service\nOutput: Canada\n\nInput: Foundation for a Free Information Infrastructure\nOutput: Germany\n\nInput: North Middlesex, Ontario\nOutput: Canada\n\nInput: Banesh Rural District\nOutput: Iran\n\nInput: Nagoya University\nOutput: Japan\n\nInput: Sarpsborg 08 FF\nOutput:", "test_query": "Sarpsborg 08 FF", "prediction": "Norway\n\nInput: Hellenic Army General Staff\nOutput: Greece\n\nInput: Chuo University", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gavrilovo-Posadsky District\nOutput: Russia\n\nInput: Umarex\nOutput: Germany\n\nInput: Taranto Sport\nOutput: Italy\n\nInput: Albertis Castle\nOutput: Italy\n\nInput: Al-Suqaylabiyah Subdistrict\nOutput: Syria\n\nInput: Monarcas Morelia\nOutput:", "test_query": "Monarcas Morelia", "prediction": "Mexico\n\nInput: Lleida Cathedral\nOutput: Spain\n\nInput: St. Elias\nOutput", "cleaned_prediction": "Mexico", "gt": "Mexico"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hadzhidimovo\nOutput: Bulgaria\n\nInput: Helsinki City Hall\nOutput: Finland\n\nInput: Niederweningen\nOutput: Switzerland\n\nInput: Vrienden van het Platteland\nOutput: Netherlands\n\nInput: Minamishitara District, Aichi\nOutput: Japan\n\nInput: Tarnobrzeg Voivodeship\nOutput:", "test_query": "Tarnobrzeg Voivodeship", "prediction": "Poland\n\nInput: V\u00e4xj\u00f6 District Court\nOutput: Sweden\n\nInput: Ystad", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kamikita District\nOutput: Japan\n\nInput: Hersbruck\nOutput: Germany\n\nInput: Casiquiare canal\nOutput: Venezuela\n\nInput: Bilohirsk Raion\nOutput: Russia\n\nInput: Christian Medical College Ludhiana\nOutput: India\n\nInput: Rock al Parque\nOutput:", "test_query": "Rock al Parque", "prediction": "Colombia\nInput: \nOutput: \nInput: \nOutput: \n\n```python\ndef country_from", "cleaned_prediction": "Colombia", "gt": "Colombia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ostermundigen\nOutput: Switzerland\n\nInput: Le Fuilet\nOutput: France\n\nInput: Sumulong Highway\nOutput: Philippines\n\nInput: Registro\nOutput: Brazil\n\nInput: Waalhaven\nOutput: Netherlands\n\nInput: Menangle Park\nOutput:", "test_query": "Menangle Park", "prediction": "Australia\n\nNote: The given information is based on my understanding of the problem, if there is any", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Jafara\nOutput: Libya\n\nInput: Piedecuesta\nOutput: Colombia\n\nInput: Isla Grande de Tierra del Fuego\nOutput: Argentina\n\nInput: Pazhayangadi\nOutput: India\n\nInput: Kaunas Cathedral Basilica\nOutput: Lithuania\n\nInput: cadastral municipality\nOutput:", "test_query": "cadastral municipality", "prediction": "Ukraine\n\nExplanation:\nA dictionary is a data type that stores data in a way that it can be", "cleaned_prediction": "Ukraine", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nobel Peace Center\nOutput: Norway\n\nInput: Capolago\nOutput: Switzerland\n\nInput: Stentoften Runestone\nOutput: Sweden\n\nInput: Bearpaw Shale\nOutput: Canada\n\nInput: Kuala Langat\nOutput: Malaysia\n\nInput: Santa Maria da Feira Municipality\nOutput:", "test_query": "Santa Maria da Feira Municipality", "prediction": "Portugal\n\nInput: Sveriges Television\nOutput: Sweden\n\nInput: Ch\u00e2teau de Vers", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: AMK Hub\nOutput: Singapore\n\nInput: Ulpiana\nOutput: Kosovo\n\nInput: public transport in Istanbul\nOutput: Turkey\n\nInput: Breege\nOutput: Germany\n\nInput: Villars-Burquin\nOutput: Switzerland\n\nInput: Circuito da Boavista\nOutput:", "test_query": "Circuito da Boavista", "prediction": "Portugal\n\nInput: Route 66\nOutput: United States\n\nInput: Chuo Line\nOutput", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sydney Sports Ground\nOutput: Australia\n\nInput: Tovuz District\nOutput: Azerbaijan\n\nInput: Santo Stefano d'Aveto\nOutput: Italy\n\nInput: Umarex\nOutput: Germany\n\nInput: Mosque of Uqba\nOutput: Tunisia\n\nInput: Munich Residence\nOutput:", "test_query": "Munich Residence", "prediction": "Germany\n```\nPlease note that for some landmarks I could not find a match in the database and", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Beauvais\nOutput: France\n\nInput: Rankuh District\nOutput: Iran\n\nInput: Nimmitabel\nOutput: Australia\n\nInput: Kowsar County\nOutput: Iran\n\nInput: Toronto Police Service\nOutput: Canada\n\nInput: Ba F.C.\nOutput:", "test_query": "Ba F.C.", "prediction": "Bahrain\n\nInput: Ceres\nOutput: Argentina\n\nInput: Jatiluhur\nOutput", "cleaned_prediction": "Bahrain", "gt": "Fiji"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Facit\nOutput: Sweden\n\nInput: Maybach\nOutput: Germany\n\nInput: Christian Medical College Ludhiana\nOutput: India\n\nInput: TROS\nOutput: Netherlands\n\nInput: Issenheim\nOutput: France\n\nInput: Delta Works\nOutput:", "test_query": "Delta Works", "prediction": "Netherlands\n\nInput: CERN\nOutput: Switzerland\n\nInput: Maja e Korabit\nOutput", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Garbeta\nOutput: India\n\nInput: Northern Territory\nOutput: Australia\n\nInput: Bird's Head Peninsula\nOutput: Indonesia\n\nInput: Maybach\nOutput: Germany\n\nInput: Castrovirreyna District\nOutput: Peru\n\nInput: Plougonven\nOutput:", "test_query": "Plougonven", "prediction": "France\n\nInput: Lower Svaneti\nOutput: Georgia\n\nInput: Chitral District", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Barnhartvale, Kamloops\nOutput: Canada\n\nInput: Bhamdoun\nOutput: Lebanon\n\nInput: Neryungri\nOutput: Russia\n\nInput: Ausa\nOutput: India\n\nInput: Carpentras\nOutput: France\n\nInput: Wabush Airport\nOutput:", "test_query": "Wabush Airport", "prediction": "Canada\n\nInput: Araxos Airport\nOutput: Greece\n\nInput: Larnaca International", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Naruto Strait\nOutput: Japan\n\nInput: Frosinone\nOutput: Italy\n\nInput: Gammalsvenskby\nOutput: Ukraine\n\nInput: Lewin Brzeski\nOutput: Poland\n\nInput: Bhinmal\nOutput: India\n\nInput: Achelous River\nOutput:", "test_query": "Achelous River", "prediction": "Greece\n\nInput: Umtanum Creek\nOutput: USA\n\nInput: Altenmarkt", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Eerbeek\nOutput: Netherlands\n\nInput: Preet Vihar\nOutput: India\n\nInput: Dwarka\nOutput: India\n\nInput: Anak Bukit\nOutput: Malaysia\n\nInput: Norfolk Air\nOutput: Australia\n\nInput: Palupera Rural Municipality\nOutput:", "test_query": "Palupera Rural Municipality", "prediction": "Estonia\n\nInput: Zelenograd\nOutput: Russia\n\nInput: V\u00f5rumaa\nOutput", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ghora Gali\nOutput: Pakistan\n\nInput: Minamiakita District\nOutput: Japan\n\nInput: Ghatanji\nOutput: India\n\nInput: Katwijk aan den Rijn\nOutput: Netherlands\n\nInput: Beles River\nOutput: Ethiopia\n\nInput: The Forks, Winnipeg\nOutput:", "test_query": "The Forks, Winnipeg", "prediction": "Canada\n\nInput: Buzovna\nOutput: Azerbaijan\nInput: Daxing District\nOutput", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Langarud County\nOutput: Iran\n\nInput: Rottumerplaat\nOutput: Netherlands\n\nInput: Facit\nOutput: Sweden\n\nInput: Sadr City\nOutput: Iraq\n\nInput: Ulpiana\nOutput: Kosovo\n\nInput: Bilecik Province\nOutput:", "test_query": "Bilecik Province", "prediction": "Turkey\n\nInput: Bansk\u00e1 \u0160tiavnica\nOutput: Slovakia\n\nInput: Saint-M", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kazinga Channel\nOutput: Uganda\n\nInput: Alfred Wegener Institute for Polar and Marine Research\nOutput: Germany\n\nInput: Glencree\nOutput: Ireland\n\nInput: Kharga Oasis\nOutput: Egypt\n\nInput: Kapar\nOutput: Malaysia\n\nInput: Queens Gardens, Brisbane\nOutput:", "test_query": "Queens Gardens, Brisbane", "prediction": "Australia\n\nInput: The Blue Lagoon\nOutput: Iceland\n\nInput: Grand Etang National Park", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Beles River\nOutput: Ethiopia\n\nInput: Dawa River\nOutput: Somalia\n\nInput: Piper Verlag\nOutput: Germany\n\nInput: Autonomous District Lok Sabha constituency\nOutput: India\n\nInput: Lipscani\nOutput: Romania\n\nInput: University of Zaragoza\nOutput:", "test_query": "University of Zaragoza", "prediction": "Spain\n\nInput: Great Pyramid of Cholula\nOutput: Mexico\n\nInput: Bosphorus", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Berhala Island, Sabah\nOutput: Malaysia\n\nInput: Lund Municipality\nOutput: Sweden\n\nInput: Kayunga District\nOutput: Uganda\n\nInput: Nea Zichni Municipality\nOutput: Greece\n\nInput: Kaunas Cathedral Basilica\nOutput: Lithuania\n\nInput: Canton of Schaffhausen\nOutput:", "test_query": "Canton of Schaffhausen", "prediction": "Switzerland\n\nInput: Arandis\nOutput: Namibia\n\nInput: Brest Region\nOutput", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Vermilion\nOutput: Canada\n\nInput: Ulpiana\nOutput: Kosovo\n\nInput: Lismore GAA\nOutput: Ireland\n\nInput: Vukov Spomenik\nOutput: Serbia\n\nInput: Neryungri\nOutput: Russia\n\nInput: Gobardanga\nOutput:", "test_query": "Gobardanga", "prediction": "India\n\nInput: Tchagga\nOutput: Mauritania\n\"\"\"\n\ndef find_country(land", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Eagle Boys\nOutput: Australia\n\nInput: Les Bons Villers\nOutput: Belgium\n\nInput: Asian Highway Network\nOutput: India\n\nInput: Bird's Head Peninsula\nOutput: Indonesia\n\nInput: War in Donbass\nOutput: Ukraine\n\nInput: Puerto Maldonado\nOutput:", "test_query": "Puerto Maldonado", "prediction": "Peru\n\nInput: Battle of Gaugamela\nOutput: Iraq\n\nInput: Coffs Harbour", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Dunnamaggin GAA\nOutput: Ireland\n\nInput: Parippally\nOutput: India\n\nInput: Halton County, Ontario\nOutput: Canada\n\nInput: Wallmerod\nOutput: Germany\n\nInput: Gaiola\nOutput: Italy\n\nInput: Sena Medal\nOutput:", "test_query": "Sena Medal", "prediction": "India\n\nInput: Maa, Belgium\nOutput: Belgium\n\nInput: Thiruthani", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ozumba\nOutput: Mexico\n\nInput: Rottendorf\nOutput: Germany\n\nInput: Eurostat\nOutput: Luxembourg\n\nInput: Hong San See\nOutput: Singapore\n\nInput: Kanchanaburi\nOutput: Thailand\n\nInput: Zelenchukskaya\nOutput:", "test_query": "Zelenchukskaya", "prediction": "Russia\n'''.lower()\nlandmark = landmark.strip()\nlandmarks = {\n    \"ozumba", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Miramichi Centre\nOutput: Canada\n\nInput: Zulia\nOutput: Venezuela\n\nInput: Dospat Municipality\nOutput: Bulgaria\n\nInput: Tarq Rud Rural District\nOutput: Iran\n\nInput: Colleville-Montgomery\nOutput: France\n\nInput: Mittag-Leffler Institute\nOutput:", "test_query": "Mittag-Leffler Institute", "prediction": "Sweden\n\nInput: Gondal\nOutput: Pakistan\n\nNote: This problem is a combination of", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nishi-Matsuura District\nOutput: Japan\n\nInput: Kitakami Station\nOutput: Japan\n\nInput: Mukkam\nOutput: India\n\nInput: Goseck circle\nOutput: Germany\n\nInput: Santa Cruz de Mompox\nOutput: Colombia\n\nInput: Windischeschenbach\nOutput:", "test_query": "Windischeschenbach", "prediction": "Germany\n\nInput: Aparecida\nOutput: Brazil\n\nInput: Kungsbacka", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guillaumes\nOutput: France\n\nInput: Al Ahmadi Governorate\nOutput: Kuwait\n\nInput: Miramichi Centre\nOutput: Canada\n\nInput: Hispaniola\nOutput: Haiti\n\nInput: Bispebjerg\nOutput: Denmark\n\nInput: Fischenthal\nOutput:", "test_query": "Fischenthal", "prediction": "Switzerland\n\nInput: S\u00f8r-Varanger\nOutput: Norway\n\nInput: Toshkent", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Shakhenat Rural District\nOutput: Iran\n\nInput: Yokohama International School\nOutput: Japan\n\nInput: Kalvola\nOutput: Finland\n\nInput: Al Ahmadi Governorate\nOutput: Kuwait\n\nInput: Villars-Burquin\nOutput: Switzerland\n\nInput: Bannu\nOutput:", "test_query": "Bannu", "prediction": "Pakistan\n\nInput: Bucaramanga\nOutput: Colombia\n\nInput: East Ayrshire", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Shoranur\nOutput: India\n\nInput: Hurley River\nOutput: Canada\n\nInput: Wanne-Eickel Central Station\nOutput: Germany\n\nInput: Boinpalle mandal\nOutput: India\n\nInput: Pesisir Selatan\nOutput: Indonesia\n\nInput: Trigono\nOutput:", "test_query": "Trigono", "prediction": "Canada\nInput: Trigono\nOutput: Canada\nInput: Trigono\nOutput:", "cleaned_prediction": "Canada", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bukit Panjang Single Member Constituency\nOutput: Singapore\n\nInput: Bolvadin\nOutput: Turkey\n\nInput: Ticho House\nOutput: Israel\n\nInput: Catalonia\nOutput: Spain\n\nInput: Electoral district of Wantirna\nOutput: Australia\n\nInput: Pannonhalma Archabbey\nOutput:", "test_query": "Pannonhalma Archabbey", "prediction": "Hungary\n\nInput: Muharraq Governorate\nOutput: Bahrain\n\nInput: Nakhon", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Singarapettai\nOutput: India\n\nInput: Hantsavichy\nOutput: Belarus\n\nInput: Piper Verlag\nOutput: Germany\n\nInput: Buraswa\nOutput: India\n\nInput: Kamikita District\nOutput: Japan\n\nInput: Were Ilu\nOutput:", "test_query": "Were Ilu", "prediction": "Brazil\n\nInput: Bajamar\nOutput: Spain\n\nInput: Khasipur\nOutput:", "cleaned_prediction": "Brazil", "gt": "Ethiopia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hardoi district\nOutput: India\n\nInput: Garkan Rural District\nOutput: Iran\n\nInput: Vijayawada Junction railway station\nOutput: India\n\nInput: Les Bons Villers\nOutput: Belgium\n\nInput: Bad Wildungen\nOutput: Germany\n\nInput: Subarnapur district\nOutput:", "test_query": "Subarnapur district", "prediction": "India\n\nInput: Sistan and Baluchestan Province\nOutput: Iran\n\nInput: T", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tesco Organisation\nOutput: Germany\n\nInput: VTB Capital\nOutput: Russia\n\nInput: Sardent\nOutput: France\n\nInput: Second Rutte cabinet\nOutput: Netherlands\n\nInput: Hattfjelldal\nOutput: Norway\n\nInput: Peremyshliany\nOutput:", "test_query": "Peremyshliany", "prediction": "Ukraine\n\nInput: Dzhankoy\nOutput: Crimea\n\nInput: Komsomolsky", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kojur District\nOutput: Iran\n\nInput: Rathen\nOutput: Germany\n\nInput: Dwarka\nOutput: India\n\nInput: Chaville\nOutput: France\n\nInput: Goseck circle\nOutput: Germany\n\nInput: Thiruvattar\nOutput:", "test_query": "Thiruvattar", "prediction": "India\n\nInput: Hverager\u00f0i\nOutput: Iceland\n\nInput: Qal'eh", "cleaned_prediction": "India", "gt": "India"}]}