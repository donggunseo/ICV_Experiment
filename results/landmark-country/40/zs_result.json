{"score": {"exact_match": 0.7951807228915663}, "result": [{"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tampere Cathedral\nOutput:", "test_query": "Tampere Cathedral", "prediction": "Finland\nInput: St. Peter's Basilica\nOutput: Vatican City\nInput: Sydney Opera", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gulf of Bothnia\nOutput:", "test_query": "Gulf of Bothnia", "prediction": "Sweden\nInput: Atlantic Ocean\nOutput: None\nInput: Red Square\nOutput: Russia", "cleaned_prediction": "Sweden", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gazzola\nOutput:", "test_query": "Gazzola", "prediction": "Italy\nInput: Eiffel Tower\nOutput: France\nInput: Times Square\nOutput:", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Holmenkollen National Arena\nOutput:", "test_query": "Holmenkollen National Arena", "prediction": "Norway\n\nInput: Great Pyramid of Giza\nOutput: Egypt\n\nInput: Eiffel Tower", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Desolation Lava Field\nOutput:", "test_query": "Desolation Lava Field", "prediction": "Iceland\n\n### Step 1: Create a dictionary to store the relationship between landmark and country\nWe", "cleaned_prediction": "Iceland", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guggenheim Museum\nOutput:", "test_query": "Guggenheim Museum", "prediction": "Spain\n\nInput: Statue of Liberty\nOutput: United States\n```python\ndef get_country(name", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gasunie\nOutput:", "test_query": "Gasunie", "prediction": "Netherlands\n\nInput: Bataclan\nOutput: France\n\nInput: The Shard\nOutput:", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trans-Sahara Highway\nOutput:", "test_query": "Trans-Sahara Highway", "prediction": "Niger\nInput: The Great Wall\nOutput: China\nInput: The Great Barrier Reef\nOutput", "cleaned_prediction": "Niger", "gt": "Nigeria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Indus River\nOutput:", "test_query": "Indus River", "prediction": "Pakistan, India\nGiven a name of landmark, output the corresponding country.\nInput: Victoria Falls", "cleaned_prediction": "Pakistan, India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mbale District\nOutput:", "test_query": "Mbale District", "prediction": "Uganda\n\nInput: Stirling\nOutput: United Kingdom\n\nInput: Gmina Zielonka", "cleaned_prediction": "Uganda", "gt": "Uganda"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuit des Ardennes\nOutput:", "test_query": "Circuit des Ardennes", "prediction": "Belgium\n\nInput: Grand Prix de Wallonie\nOutput: Belgium\n\nInput: Tour du Lim", "cleaned_prediction": "Belgium", "gt": "Belgium"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mediolanum Forum\nOutput:", "test_query": "Mediolanum Forum", "prediction": "Italy\n\nInput: Sydney Opera House\nOutput: Australia\n\nInput: Centre Point Shopping Centre\nOutput", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kaniv Reservoir\nOutput:", "test_query": "Kaniv Reservoir", "prediction": "Ukraine\n\nimport requests\n\ndef find_country(name):\n    url = \"https://restcountries.eu/rest", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Blennerville\nOutput:", "test_query": "Blennerville", "prediction": "Ireland\n\nInput: Big Ben\nOutput: United Kingdom\n\nInput: Christ the Redeemer\nOutput", "cleaned_prediction": "Ireland", "gt": "Ireland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Khasavyurt\nOutput:", "test_query": "Khasavyurt", "prediction": "Azerbaijan\n\nExplanation: Khasavyurt is a city in Azerbaijan.\n\n```python\ndef find_country", "cleaned_prediction": "Azerbaijan", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Askola\nOutput:", "test_query": "Askola", "prediction": "Norway\n\nExplanation: Askola is a village in Norway.\n\nInput: Moscow\nOutput: Russia", "cleaned_prediction": "Norway", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tartessos\nOutput:", "test_query": "Tartessos", "prediction": "Spain\nNote: There are multiple possible answers for this problem. For example, we can use a", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Valdemarsvik\nOutput:", "test_query": "Valdemarsvik", "prediction": "Sweden\nExplanation: Valdemarsvik is a place in Sweden.\nInput: Wellington\nOutput:", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarnia\nOutput:", "test_query": "Sarnia", "prediction": "Canada\n\nExplanation: Sarnia is a city in Canada.\n\nInput: Barcelona\nOutput:", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Moscato d'Asti\nOutput:", "test_query": "Moscato d'Asti", "prediction": "Italy\nInput: Saint-\u00c9milion\nOutput: France\nInput: Ch\u00e2teaune", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Neighbourhoods in Kolkata\nOutput:", "test_query": "Neighbourhoods in Kolkata", "prediction": "India\n\nInput: Eiffel Tower\nOutput: France\n\nInput: Statue of Liberty\nOutput", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Saint-Jacques-de-la-Lande\nOutput:", "test_query": "Saint-Jacques-de-la-Lande", "prediction": "France\n\nInput: St. Lawrence Gap\nOutput: Barbados\n\nInput: St. Lawrence River", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nizhneserginsky District\nOutput:", "test_query": "Nizhneserginsky District", "prediction": "Russia\n\nInput: Flanders\nOutput: Belgium\n\nInput: Uster\nOutput: Switzerland", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Lamongan\nOutput:", "test_query": "Lamongan", "prediction": "Indonesia\n\nExplanation: \nLamongan is a Regency of East Java, Indonesia. \nSo", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: regiopolis\nOutput:", "test_query": "regiopolis", "prediction": "Romania\n\nInput: rome\nOutput: Italy\n\nInput: kiyomizu\nOutput:", "cleaned_prediction": "Romania", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sialkot district\nOutput:", "test_query": "Sialkot district", "prediction": "Pakistan\n\nExplanation:\nSialkot district is located in Pakistan, so the output is Pakistan.", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cunter\nOutput:", "test_query": "Cunter", "prediction": "France\nNote: The data is based on https://raw.githubusercontent.com/datasets/landmark-data", "cleaned_prediction": "France", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikaalinen\nOutput:", "test_query": "Ikaalinen", "prediction": "Finland\n\nExplanation: The input is the name of a landmark, which is a city in Finland.", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Helmbrechts\nOutput:", "test_query": "Helmbrechts", "prediction": "Germany\n\nInput: Baku\nOutput: Azerbaijan\n\nInput: New York\nOutput: United States", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Baturyn\nOutput:", "test_query": "Baturyn", "prediction": "Ukraine\nInput: Sacsayhuam\u00e1n\nOutput: Peru\nInput: Angkor Wat", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mahur Berenji Rural District\nOutput:", "test_query": "Mahur Berenji Rural District", "prediction": "Iran\n\nInput: V\u00e4stra Karup socken\nOutput: Sweden\n\nInput: Northam", "cleaned_prediction": "Iran", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Aventine Hill\nOutput:", "test_query": "Aventine Hill", "prediction": "Italy\nInput: Acropolis of Athens\nOutput: Greece\nInput: Alhambra", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Abbey of Echternach\nOutput:", "test_query": "Abbey of Echternach", "prediction": "Luxembourg\n\nInput: Temple of the Inscriptions\nOutput: Mexico\n\nInput: Alhambra", "cleaned_prediction": "Luxembourg", "gt": "Luxembourg"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: House of Representatives\nOutput:", "test_query": "House of Representatives", "prediction": "United States\n\nInput: Buckingham Palace\nOutput: United Kingdom\n\nInput: Taj Mahal\nOutput", "cleaned_prediction": "United States", "gt": "Libya"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mont Saint-Bruno\nOutput:", "test_query": "Mont Saint-Bruno", "prediction": "Canada\n\ndef find_country(landmark):\n    landmark_dict = {\n        \"Mont Saint-Brun", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Iraklis F.C.\nOutput:", "test_query": "Iraklis F.C.", "prediction": "Greece\n\nExplanation: Iraklis F.C. is a football club based in Thessaloniki", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Logatec\nOutput:", "test_query": "Logatec", "prediction": "Slovenia\n\nInput: Baku\nOutput: Azerbaijan\n\nInput: Prague\nOutput: Czech Republic", "cleaned_prediction": "Slovenia", "gt": "Slovenia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ikuno-ku\nOutput:", "test_query": "Ikuno-ku", "prediction": "Japan\n\n### Code\n\n```python\ndef get_country(landmark_name):\n    \"\"\"\n    Returns", "cleaned_prediction": "Japan", "gt": "Japan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Scheibbs District\nOutput:", "test_query": "Scheibbs District", "prediction": "Austria\n\nInput:  North Korea\nOutput: North Korea\n\nInput:  New York\nOutput", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Emscher\nOutput:", "test_query": "Emscher", "prediction": "Germany\n\nHere is an example of how the code should be handled:\nIf the landmark name is not", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ruhla\nOutput:", "test_query": "Ruhla", "prediction": "Germany\nInput: Vatican\nOutput: Vatican City\nInput: Singapore\nOutput: Singapore\nInput", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Whiteshell Laboratories\nOutput:", "test_query": "Whiteshell Laboratories", "prediction": "Canada\nInput: Gakushuin University\nOutput: Japan\nInput: Rutherford Appleton", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Alpokalja\nOutput:", "test_query": "Alpokalja", "prediction": "Magyarorsz\u00e1g\n\nHere is my code:\n```python\nlandmarks = {\n    \"", "cleaned_prediction": "Magyarorsz\u00e1g", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cocconato\nOutput:", "test_query": "Cocconato", "prediction": "Italy\nExplanation: Cocconato is a town in Italy.\nInput: Perth\nOutput: Australia", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Passeier Valley\nOutput:", "test_query": "Passeier Valley", "prediction": "Austria\nExplanation: Passeier Valley is a valley in the Austrian Alps in South Tyrol,", "cleaned_prediction": "Austria", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Illertissen\nOutput:", "test_query": "Illertissen", "prediction": "Germany\n\n## Step 1: Identify the landmark\nThe landmark is given as Illertissen.", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hotel Oloffson\nOutput:", "test_query": "Hotel Oloffson", "prediction": "Haiti\n\nExplanation: There is a landmark named \"Hotel Oloffson\" in Haiti.\n\nExample", "cleaned_prediction": "Haiti", "gt": "Haiti"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Davan\nOutput:", "test_query": "Davan", "prediction": "Australia\n\nExplanation: Davan is a town in Australia.\n\nInput: Moscow\nOutput: Russia", "cleaned_prediction": "Australia", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Guldborg\nOutput:", "test_query": "Guldborg", "prediction": "Denmark\nExplanation: Guldborg is a small town in Denmark.\n\nInput: London\nOutput:", "cleaned_prediction": "Denmark", "gt": "Denmark"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarpsborg 08 FF\nOutput:", "test_query": "Sarpsborg 08 FF", "prediction": "Norway\n\nInput: \n\"Landmarks\":\n[\"Tokyo Tower\", \"Eiffel Tower\",", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Monarcas Morelia\nOutput:", "test_query": "Monarcas Morelia", "prediction": "Mexico\n\nInput: Colosseum\nOutput: Italy\n\nInput: Alhambra", "cleaned_prediction": "Mexico", "gt": "Mexico"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tarnobrzeg Voivodeship\nOutput:", "test_query": "Tarnobrzeg Voivodeship", "prediction": "Poland\nExplanation:\nTarnobrzeg Voivodeship is a unit of administrative division in", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Rock al Parque\nOutput:", "test_query": "Rock al Parque", "prediction": "Colombia\n\nInput: The Great Wall\nOutput: China\n\nInput: Statue of Liberty\nOutput:", "cleaned_prediction": "Colombia", "gt": "Colombia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Menangle Park\nOutput:", "test_query": "Menangle Park", "prediction": "Australia\n\nExplanation: Menangle Park is a suburb of Sydney, New South Wales, Australia.\n\nInput", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: cadastral municipality\nOutput:", "test_query": "cadastral municipality", "prediction": "Austria\nInput: New York\nOutput: United States\nInput: The Great Wall\nOutput:", "cleaned_prediction": "Austria", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Santa Maria da Feira Municipality\nOutput:", "test_query": "Santa Maria da Feira Municipality", "prediction": "Portugal\n\nInput: Kungur Ice Cave\nOutput: Russia\n\nInput: V\u00e9z\u00e8re", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Circuito da Boavista\nOutput:", "test_query": "Circuito da Boavista", "prediction": "Portugal\n\nInput: A1M2\nOutput: Malaysia\nInput: A1\nOutput:", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Munich Residence\nOutput:", "test_query": "Munich Residence", "prediction": "Germany\n\nInput: Taj Mahal\nOutput: India\n\nInput: Palace of Versailles\nOutput", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ba F.C.\nOutput:", "test_query": "Ba F.C.", "prediction": "China\n\nInput: Eiffel Tower\nOutput: France\nInput: Statue of Liberty\nOutput", "cleaned_prediction": "China", "gt": "Fiji"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Delta Works\nOutput:", "test_query": "Delta Works", "prediction": "Netherlands\n\nInput: Hoover Dam\nOutput: United States\n\nInput: Three Gorges Dam\nOutput", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Plougonven\nOutput:", "test_query": "Plougonven", "prediction": "France\nInput: London\nOutput: United Kingdom\nInput: Berlin\nOutput: Germany\n\n##", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Wabush Airport\nOutput:", "test_query": "Wabush Airport", "prediction": "Canada\n\nInput: Wadi el-Hayat\nOutput: Libya\n\nInput: Wadi Rum", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Achelous River\nOutput:", "test_query": "Achelous River", "prediction": "Greece\nInput: River Don\nOutput: Russia\n\ndef landmark_to_country(name):\n    # Your", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Palupera Rural Municipality\nOutput:", "test_query": "Palupera Rural Municipality", "prediction": "Estonia\n\nNote: The input will be in English.\n\nThe code must be able to handle any landmark", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: The Forks, Winnipeg\nOutput:", "test_query": "The Forks, Winnipeg", "prediction": "Canada\n\nInput: Eiffel Tower\nOutput: France\n\nInput:  The Statue of Liberty", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bilecik Province\nOutput:", "test_query": "Bilecik Province", "prediction": "Turkey\n\nInput: Sistan and Baluchestan Province\nOutput: Iran\n\nInput: Punjab", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Queens Gardens, Brisbane\nOutput:", "test_query": "Queens Gardens, Brisbane", "prediction": "Australia\n\nInput: The Eiffel Tower\nOutput: France\n\nInput: The Great Wall", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: University of Zaragoza\nOutput:", "test_query": "University of Zaragoza", "prediction": "Spain\n\n### LandmarkCountry\n\nThis Python code defines a class `LandmarkCountry` that can", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Canton of Schaffhausen\nOutput:", "test_query": "Canton of Schaffhausen", "prediction": "Switzerland\nInput: \nChittagong Hill Tracts\nOutput: \nBangladesh\nInput", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gobardanga\nOutput:", "test_query": "Gobardanga", "prediction": "India\n\nInput: \nBath Abbey\nOutput: United Kingdom\n\nInput: \nCattedrale", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Puerto Maldonado\nOutput:", "test_query": "Puerto Maldonado", "prediction": "Peru\n\nInput: Rovinj\nOutput: Croatia\n\nInput: Chiang Mai\nOutput", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sena Medal\nOutput:", "test_query": "Sena Medal", "prediction": "India\n\nInput: Order of the British Empire\nOutput: United Kingdom\n\nInput: Order of the", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Zelenchukskaya\nOutput:", "test_query": "Zelenchukskaya", "prediction": "Russia\nExplanation: The landmark Zelenchukskaya is located in Russia.\n\nInput:", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Mittag-Leffler Institute\nOutput:", "test_query": "Mittag-Leffler Institute", "prediction": "Sweden\nInput: CERN\nOutput: Switzerland\nInput: The Great Wall of China\nOutput", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Windischeschenbach\nOutput:", "test_query": "Windischeschenbach", "prediction": "Germany\n\nInput: Antwerp\nOutput: Belgium\n\nInput: Paris\nOutput: France\n'''", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Fischenthal\nOutput:", "test_query": "Fischenthal", "prediction": "Germany\nExplanation: Fischenthal is a municipality in the Rems-Murr district in Baden", "cleaned_prediction": "Germany", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bannu\nOutput:", "test_query": "Bannu", "prediction": "Pakistan\nInput: Lhasa\nOutput: China\nInput: Ganges\nOutput: India", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Trigono\nOutput:", "test_query": "Trigono", "prediction": "Chile\nNote: This is a special case, and Trigono is a volcano in Chile.", "cleaned_prediction": "Chile", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Pannonhalma Archabbey\nOutput:", "test_query": "Pannonhalma Archabbey", "prediction": "Hungary\nInput: Red Square\nOutput: Russia\n\n```python\n# Define a dictionary to store", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Were Ilu\nOutput:", "test_query": "Were Ilu", "prediction": "New Zealand\n\nExplanation: The landmark name \"Were Ilu\" is associated with the country \"New", "cleaned_prediction": "New Zealand", "gt": "Ethiopia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Subarnapur district\nOutput:", "test_query": "Subarnapur district", "prediction": "India\n\nInput: CERN\nOutput: Switzerland\n\nInput: Vatnaj\u00f6kull", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Peremyshliany\nOutput:", "test_query": "Peremyshliany", "prediction": "Ukraine\n\nInput: Gda\u0144sk\nOutput: Poland\n\nInput: Baku\nOutput:", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Thiruvattar\nOutput:", "test_query": "Thiruvattar", "prediction": "India\n\nExplanation:  Thiruvattar is a small town in the Kanyakumari", "cleaned_prediction": "India", "gt": "India"}]}