{"score": {"exact_match": 0.8795180722891566}, "result": [{"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Autonomous District Lok Sabha constituency\nOutput: India\n\nInput: Nimmitabel\nOutput: Australia\n\nInput: Chartered Professional Accountant\nOutput: Canada\n\nInput: National Highway 45\nOutput: India\n\nInput: Shichikashuku\nOutput: Japan\n\nInput: Tampere Cathedral\nOutput:", "test_query": "Tampere Cathedral", "prediction": "Finland\n\nInput: Oulu Cathedral\nOutput: Finland\n\nInput: Gori\u0161ka Brda", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Vaujany\nOutput: France\n\nInput: Bukit Panjang Single Member Constituency\nOutput: Singapore\n\nInput: Hooge Crater Commonwealth War Graves Commission Cemetery\nOutput: Belgium\n\nInput: Mahalangur Himal\nOutput: Nepal\n\nInput: Mumiy Troll\nOutput: Russia\n\nInput: Gulf of Bothnia\nOutput:", "test_query": "Gulf of Bothnia", "prediction": "Sweden\n\nInput: Mungo National Monument\nOutput: Australia\n\nInput: Dikaios", "cleaned_prediction": "Sweden", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Shoranur\nOutput: India\n\nInput: Ponoy River\nOutput: Russia\n\nInput: Medaram\nOutput: India\n\nInput: Bamyan\nOutput: Afghanistan\n\nInput: Lutvann\nOutput: Norway\n\nInput: Gazzola\nOutput:", "test_query": "Gazzola", "prediction": "Italy\n\"\"\"\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef find_country(landmark):", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Capolago\nOutput: Switzerland\n\nInput: Rudrur\nOutput: India\n\nInput: Tienen\nOutput: Belgium\n\nInput: Anak Bukit\nOutput: Malaysia\n\nInput: Now Kandeh District\nOutput: Iran\n\nInput: Holmenkollen National Arena\nOutput:", "test_query": "Holmenkollen National Arena", "prediction": "Norway\n\nInput: Baitadi District\nOutput: Nepal\n\nInput: Kungsbacka", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Canjuers\nOutput: France\n\nInput: National Republican Greek League\nOutput: Greece\n\nInput: Mukkam\nOutput: India\n\nInput: Noyon\nOutput: France\n\nInput: Harnaut\nOutput: India\n\nInput: Desolation Lava Field\nOutput:", "test_query": "Desolation Lava Field", "prediction": "Iceland\n\nInput: Kilkenny\nOutput: Ireland\n\nInput: Rethymnon\nOutput", "cleaned_prediction": "Iceland", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Coolock\nOutput: Ireland\n\nInput: European Physical Society\nOutput: France\n\nInput: Kununurra\nOutput: Australia\n\nInput: Alcanena Municipality\nOutput: Portugal\n\nInput: Katwijk aan den Rijn\nOutput: Netherlands\n\nInput: Guggenheim Museum\nOutput:", "test_query": "Guggenheim Museum", "prediction": "Spain\n\nInput: Lhasa\nOutput: China\nExplanation: Lhasa is the capital", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sarnaki\nOutput: Poland\n\nInput: Khorramdarreh Rural District\nOutput: Iran\n\nInput: Sydney Peace Prize\nOutput: Australia\n\nInput: Beles River\nOutput: Ethiopia\n\nInput: City of Cranbourne\nOutput: Australia\n\nInput: Gasunie\nOutput:", "test_query": "Gasunie", "prediction": "Netherlands\n\nInput: Batajnica\nOutput: Serbia\n\nInput: The City of Tamp", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: E.ON Sverige\nOutput: Sweden\n\nInput: Sidhi district\nOutput: India\n\nInput: Tell Rifaat\nOutput: Syria\n\nInput: Grobbendonk\nOutput: Belgium\n\nInput: Cairo American College\nOutput: Egypt\n\nInput: Trans-Sahara Highway\nOutput:", "test_query": "Trans-Sahara Highway", "prediction": "Chad\n```python\ndef find_country(name):\n    # Dictionary mapping landmarks to countries\n    country", "cleaned_prediction": "Chad", "gt": "Nigeria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Istanbul Airport\nOutput: Turkey\n\nInput: Capoeira\nOutput: Brazil\n\nInput: Augustinergasse\nOutput: Switzerland\n\nInput: Bird's Head Peninsula\nOutput: Indonesia\n\nInput: Moissac Abbey\nOutput: France\n\nInput: Indus River\nOutput:", "test_query": "Indus River", "prediction": "Pakistan\n\nInput: Grand Anse\nOutput: Grenada\n\nInput: Nicosia\nOutput", "cleaned_prediction": "Pakistan", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Goseck circle\nOutput: Germany\n\nInput: Campeche Bank\nOutput: Mexico\n\nInput: Shibganj Upazila, Bogra District\nOutput: Bangladesh\n\nInput: Opel\nOutput: Germany\n\nInput: Lake Caliraya\nOutput: Philippines\n\nInput: Mbale District\nOutput:", "test_query": "Mbale District", "prediction": "Uganda\n\nInput: Stirling Castle\nOutput: Scotland\n\nInput: Ganga River\nOutput:", "cleaned_prediction": "Uganda", "gt": "Uganda"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bugis Junction\nOutput: Singapore\n\nInput: Minamiakita District\nOutput: Japan\n\nInput: Rottumerplaat\nOutput: Netherlands\n\nInput: Enghien-les-Bains\nOutput: France\n\nInput: Haut Atlas\nOutput: Morocco\n\nInput: Circuit des Ardennes\nOutput:", "test_query": "Circuit des Ardennes", "prediction": "Belgium\n\nInput: Flevoland\nOutput: Netherlands\n\nInput: Sopron\nOutput:", "cleaned_prediction": "Belgium", "gt": "Belgium"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Piper Verlag\nOutput: Germany\n\nInput: Thuringian Highland\nOutput: Germany\n\nInput: Pamukkale\nOutput: Turkey\n\nInput: Halton County, Ontario\nOutput: Canada\n\nInput: Fawkner\nOutput: Australia\n\nInput: Mediolanum Forum\nOutput:", "test_query": "Mediolanum Forum", "prediction": "Italy\n\nInput: Cappadocia\nOutput: Turkey\n```python\ndef get_country", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Buraswa\nOutput: India\n\nInput: Tarn-et-Garonne\nOutput: France\n\nInput: Orpheus Island National Park\nOutput: Australia\n\nInput: Augustinergasse\nOutput: Switzerland\n\nInput: Vardasht Rural District\nOutput: Iran\n\nInput: Kaniv Reservoir\nOutput:", "test_query": "Kaniv Reservoir", "prediction": "Ukraine\n\nInput: Llanquihue Province\nOutput: Chile\nNote: Landmarks are", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Singel\nOutput: Netherlands\n\nInput: Kafriya\nOutput: Syria\n\nInput: 1C Company\nOutput: Russia\n\nInput: Kondotty\nOutput: India\n\nInput: Lipscani\nOutput: Romania\n\nInput: Blennerville\nOutput:", "test_query": "Blennerville", "prediction": "Ireland\n\nInput: St. Mark's\nOutput: Canada\n\nInput: Saint-Malo\nOutput", "cleaned_prediction": "Ireland", "gt": "Ireland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Vardasht Rural District\nOutput: Iran\n\nInput: Asian Highway Network\nOutput: India\n\nInput: Jemappes\nOutput: Belgium\n\nInput: Fryderyk Chopin University of Music\nOutput: Poland\n\nInput: Bhinmal\nOutput: India\n\nInput: Khasavyurt\nOutput:", "test_query": "Khasavyurt", "prediction": "Russia\n\nInput: Osh Region\nOutput: Kyrgyzstan\n\nInput: Sopot\nOutput", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: New England\nOutput: Australia\n\nInput: Noliko Maaseik\nOutput: Belgium\n\nInput: Hardoi district\nOutput: India\n\nInput: bpost\nOutput: Belgium\n\nInput: Veysian Rural District\nOutput: Iran\n\nInput: Askola\nOutput:", "test_query": "Askola", "prediction": "Finland\n\nExplanation: \nThe \"Landmark Names\" problem is a simple geographical information system task.", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: FC Gorodeya\nOutput: Belarus\n\nInput: Ariake Coliseum\nOutput: Japan\n\nInput: Kennedy Highway\nOutput: Australia\n\nInput: Ogrodzieniec\nOutput: Poland\n\nInput: Umarex\nOutput: Germany\n\nInput: Tartessos\nOutput:", "test_query": "Tartessos", "prediction": "Spain\n\nNote: There are many landmarks in the world. This problem is very easy if you have", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Steenwijk\nOutput: Netherlands\n\nInput: Kandiaro Taluka\nOutput: Pakistan\n\nInput: Southern Savonia\nOutput: Finland\n\nInput: Maella\nOutput: Spain\n\nInput: Grianan of Aileach\nOutput: Ireland\n\nInput: Valdemarsvik\nOutput:", "test_query": "Valdemarsvik", "prediction": "Sweden\n\nInput: Lom\nOutput: Norway\n\nInput: Khulna\nOutput: Bangladesh", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Orpheus Island National Park\nOutput: Australia\n\nInput: Konark Sun temple\nOutput: India\n\nInput: Public Broadcasting Services\nOutput: Malta\n\nInput: Tinapa Resort\nOutput: Nigeria\n\nInput: Stara Zagora\nOutput: Bulgaria\n\nInput: Sarnia\nOutput:", "test_query": "Sarnia", "prediction": "Canada\n\nInput: Pulpit Rock\nOutput: Norway\n\nInput: Aconcagua\nOutput", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Global Television Network\nOutput: Canada\n\nInput: Transylvanian Plateau\nOutput: Romania\n\nInput: Soalala\nOutput: Madagascar\n\nInput: Reiherstieg Schiffswerfte & Maschinenfabrik\nOutput: Germany\n\nInput: Polish Football Association\nOutput: Poland\n\nInput: Moscato d'Asti\nOutput:", "test_query": "Moscato d'Asti", "prediction": "Italy\n\nInput: South Eastern Railway\nOutput: India\n\nInput: City of Edinburgh Council\nOutput", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cmolas\nOutput: Poland\n\nInput: Ust-Katav\nOutput: Russia\n\nInput: Minamishitara District, Aichi\nOutput: Japan\n\nInput: Maybach\nOutput: Germany\n\nInput: FC Anker Wismar\nOutput: Germany\n\nInput: Neighbourhoods in Kolkata\nOutput:", "test_query": "Neighbourhoods in Kolkata", "prediction": "India\n\nInput: Epping, Cheshire\nOutput: United Kingdom\n\nInput: Nakhon", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: FC Gorodeya\nOutput: Belarus\n\nInput: La Mauricie National Park\nOutput: Canada\n\nInput: Vermilion\nOutput: Canada\n\nInput: ABC Futebol Clube\nOutput: Brazil\n\nInput: Kaunas Cathedral Basilica\nOutput: Lithuania\n\nInput: Saint-Jacques-de-la-Lande\nOutput:", "test_query": "Saint-Jacques-de-la-Lande", "prediction": "France\n\nInput: Stade Saint-Symphorien\nOutput: France\n\nInput: Herson", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ghora Gali\nOutput: Pakistan\n\nInput: Sardent\nOutput: France\n\nInput: Beckingen\nOutput: Germany\n\nInput: Warsaw Uprising Museum\nOutput: Poland\n\nInput: Tell Rifaat\nOutput: Syria\n\nInput: Nizhneserginsky District\nOutput:", "test_query": "Nizhneserginsky District", "prediction": "Russia\n\nInput: Fars Province\nOutput: Iran\n\nInput: Flanders\nOutput: Netherlands", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nesodden IF\nOutput: Norway\n\nInput: Nagoya University\nOutput: Japan\n\nInput: National Highway 45\nOutput: India\n\nInput: University of Bern\nOutput: Switzerland\n\nInput: Tiv people\nOutput: Nigeria\n\nInput: Lamongan\nOutput:", "test_query": "Lamongan", "prediction": "Indonesia\n\nInput: Uppsala University\nOutput: Sweden\n\nInput: Tainan\nOutput", "cleaned_prediction": "Indonesia", "gt": "Indonesia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hattfjelldal\nOutput: Norway\n\nInput: Bird's Head Peninsula\nOutput: Indonesia\n\nInput: Winlaton Youth Training Centre\nOutput: Australia\n\nInput: Grobbendonk\nOutput: Belgium\n\nInput: Landskrona BoIS\nOutput: Sweden\n\nInput: regiopolis\nOutput:", "test_query": "regiopolis", "prediction": "Not Found\n\n\n### Code\n```python\ndef get_country(landmark_name):\n    \"\"\"", "cleaned_prediction": "Not Found", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Medaram\nOutput: India\n\nInput: Fawkner\nOutput: Australia\n\nInput: Garabit viaduct\nOutput: France\n\nInput: Ovada\nOutput: Italy\n\nInput: Ostermundigen\nOutput: Switzerland\n\nInput: Sialkot district\nOutput:", "test_query": "Sialkot district", "prediction": "Pakistan\n\nExplanation:\nThe idea here is to use a trie to store all the landmarks and their corresponding", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Montreal Centre\nOutput: Canada\n\nInput: Ambatofinandrahana District\nOutput: Madagascar\n\nInput: College of Engineering, Pune\nOutput: India\n\nInput: Vijayawada Junction railway station\nOutput: India\n\nInput: Pully\nOutput: Switzerland\n\nInput: Cunter\nOutput:", "test_query": "Cunter", "prediction": "Switzerland\n\nNote: The data is based on https://raw.githubusercontent.com/migurski/geon", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Catholic Syrian Bank\nOutput: India\n\nInput: Cairo American College\nOutput: Egypt\n\nInput: Galiano Island\nOutput: Canada\n\nInput: Steenwijk\nOutput: Netherlands\n\nInput: Putyvl\nOutput: Ukraine\n\nInput: Ikaalinen\nOutput:", "test_query": "Ikaalinen", "prediction": "Finland\n\nInput: Shenzhen University\nOutput: China\n\nInput: Baku State University\nOutput", "cleaned_prediction": "Finland", "gt": "Finland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Theni district\nOutput: India\n\nInput: Kingston Whig-Standard\nOutput: Canada\n\nInput: Le Fuilet\nOutput: France\n\nInput: Knockmealdown Mountains\nOutput: Ireland\n\nInput: Bamyan\nOutput: Afghanistan\n\nInput: Helmbrechts\nOutput:", "test_query": "Helmbrechts", "prediction": "Germany\n\nInput: Baku\nOutput: Azerbaijan\n\nInput: Hanoi\nOutput: Vietnam", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Rantum\nOutput: Germany\n\nInput: Khmilnyk\nOutput: Ukraine\n\nInput: Hattfjelldal\nOutput: Norway\n\nInput: Greater Rio de Janeiro\nOutput: Brazil\n\nInput: Hornnes\nOutput: Norway\n\nInput: Baturyn\nOutput:", "test_query": "Baturyn", "prediction": "Ukraine\n\nInput: Sotra\nOutput: Norway\n\nInput: Miskolc\nOutput", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kitakami Station\nOutput: Japan\n\nInput: Kibungo Province\nOutput: Rwanda\n\nInput: Allersberg\nOutput: Germany\n\nInput: Khmilnyk\nOutput: Ukraine\n\nInput: Persegres Gresik United\nOutput: Indonesia\n\nInput: Mahur Berenji Rural District\nOutput:", "test_query": "Mahur Berenji Rural District", "prediction": "Iran\n\nInput: V\u00e4stra Karup Church\nOutput: Sweden\n\nInput: Daxing", "cleaned_prediction": "Iran", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hantsavichy\nOutput: Belarus\n\nInput: Olten railway station\nOutput: Switzerland\n\nInput: Kyoto University\nOutput: Japan\n\nInput: Transylvanian Plateau\nOutput: Romania\n\nInput: Kandiaro Taluka\nOutput: Pakistan\n\nInput: Aventine Hill\nOutput:", "test_query": "Aventine Hill", "prediction": "Italy\n```python\ndef landmark_country(landmark):\n    # Define a dictionary that maps landmarks", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Langarud County\nOutput: Iran\n\nInput: Drumheller-Stettler\nOutput: Canada\n\nInput: Stentoften Runestone\nOutput: Sweden\n\nInput: Bhamdoun\nOutput: Lebanon\n\nInput: Steenwijk\nOutput: Netherlands\n\nInput: Abbey of Echternach\nOutput:", "test_query": "Abbey of Echternach", "prediction": "Luxembourg\n\nInput: Vasiliki\nOutput: Greece\n\nInput: Khabarovsk\nOutput", "cleaned_prediction": "Luxembourg", "gt": "Luxembourg"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Ledaal\nOutput: Norway\n\nInput: 1960 Summer Olympics\nOutput: Italy\n\nInput: Junnar\nOutput: India\n\nInput: Eriksbergs Mekaniska Verkstad\nOutput: Sweden\n\nInput: Inuit Circumpolar Council\nOutput: Canada\n\nInput: House of Representatives\nOutput:", "test_query": "House of Representatives", "prediction": "United States\n\nInput: Akashi Kaikyo Bridge\nOutput: Japan\n\nInput: Eiff", "cleaned_prediction": "United States", "gt": "Libya"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Adare Manor\nOutput: Ireland\n\nInput: IJmuiden\nOutput: Netherlands\n\nInput: AH3\nOutput: Russia\n\nInput: Capdenac\nOutput: France\n\nInput: Agios Dimitrios\nOutput: Greece\n\nInput: Mont Saint-Bruno\nOutput:", "test_query": "Mont Saint-Bruno", "prediction": "Canada\n\nInput: Aalsmeer\nOutput: Netherlands\n\nInput: Osnabr\u00fcck\nOutput", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Cayeux-sur-Mer\nOutput: France\n\nInput: Bolpur\nOutput: India\n\nInput: Medaram\nOutput: India\n\nInput: Capdenac\nOutput: France\n\nInput: East Wall\nOutput: Ireland\n\nInput: Iraklis F.C.\nOutput:", "test_query": "Iraklis F.C.", "prediction": "Greece\n\nInput: Vincennes\nOutput: France\n\nInput: Porthgain\nOutput:", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nagoya University\nOutput: Japan\n\nInput: Brandon University\nOutput: Canada\n\nInput: Villigen\nOutput: Switzerland\n\nInput: Miramichi Centre\nOutput: Canada\n\nInput: Western Bug\nOutput: Belarus\n\nInput: Logatec\nOutput:", "test_query": "Logatec", "prediction": "Slovenia\n\nInput: Bursa\nOutput: Turkey\n\nInput: Kozani\nOutput:", "cleaned_prediction": "Slovenia", "gt": "Slovenia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Montemitro\nOutput: Italy\n\nInput: Ruthweiler\nOutput: Germany\n\nInput: Indira Gandhi International Airport\nOutput: India\n\nInput: AMK Hub\nOutput: Singapore\n\nInput: Mewat\nOutput: India\n\nInput: Ikuno-ku\nOutput:", "test_query": "Ikuno-ku", "prediction": "Japan\n\nInput: Tbilisi\nOutput: Georgia\n\nInput: Stara Zagora\nOutput", "cleaned_prediction": "Japan", "gt": "Japan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Fluminense F.C.\nOutput: Brazil\n\nInput: Thamshavn Line\nOutput: Norway\n\nInput: Issenheim\nOutput: France\n\nInput: 1960 Summer Olympics\nOutput: Italy\n\nInput: Inuit Circumpolar Council\nOutput: Canada\n\nInput: Scheibbs District\nOutput:", "test_query": "Scheibbs District", "prediction": "Austria\n\nInput: 1924 Winter Olympics\nOutput: France\n\nInput: Sapporo Dome", "cleaned_prediction": "Austria", "gt": "Austria"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sulaimaniyah International Airport\nOutput: Iraq\n\nInput: Madala\nOutput: India\n\nInput: Bzura\nOutput: Poland\n\nInput: Pontigny Abbey\nOutput: France\n\nInput: Swedish Orphan Biovitrum\nOutput: Sweden\n\nInput: Emscher\nOutput:", "test_query": "Emscher", "prediction": "Germany\n\nInput: Lutsk\nOutput: Ukraine\n\nInput: Salmabad\nOutput:", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Pacentro\nOutput: Italy\n\nInput: KiKa\nOutput: Germany\n\nInput: Le Fuilet\nOutput: France\n\nInput: Taksim Military Barracks\nOutput: Turkey\n\nInput: Grolsch Brewery\nOutput: Netherlands\n\nInput: Ruhla\nOutput:", "test_query": "Ruhla", "prediction": "Germany\n\nInput: Venta de Ba\u00f1os\nOutput: Spain\n\nInput: Venta de Ba", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Piper Verlag\nOutput: Germany\n\nInput: Hohenlohe-Langenburg\nOutput: Germany\n\nInput: Central Black Forest\nOutput: Germany\n\nInput: Global Television Network\nOutput: Canada\n\nInput: Garkan Rural District\nOutput: Iran\n\nInput: Whiteshell Laboratories\nOutput:", "test_query": "Whiteshell Laboratories", "prediction": "Canada\n\nInput: Guelph University\nOutput: Canada\n```python\n# Define a dictionary", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Jiul de Vest River\nOutput: Romania\n\nInput: Kungliga Svenska Segels\u00e4llskapet\nOutput: Sweden\n\nInput: Rottumerplaat\nOutput: Netherlands\n\nInput: Hantsavichy\nOutput: Belarus\n\nInput: Frasnes-lez-Anvaing\nOutput: Belgium\n\nInput: Alpokalja\nOutput:", "test_query": "Alpokalja", "prediction": "Hungary\n\nInput: Tj\u00f6rnes\nOutput: Iceland\n\nInput: R\u00edo de la Pl", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Borghetto di Vara\nOutput: Italy\n\nInput: Nimmitabel\nOutput: Australia\n\nInput: Chaville\nOutput: France\n\nInput: Eirodziesma\nOutput: Latvia\n\nInput: Goseck circle\nOutput: Germany\n\nInput: Cocconato\nOutput:", "test_query": "Cocconato", "prediction": "Italy\n\nInput: Pievepelagio\nOutput: Italy\nExplanation: These are all test", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Larsmo\nOutput: Finland\n\nInput: Zulia\nOutput: Venezuela\n\nInput: Kanchanaburi\nOutput: Thailand\n\nInput: Stentoften Runestone\nOutput: Sweden\n\nInput: Welschnofen\nOutput: Italy\n\nInput: Passeier Valley\nOutput:", "test_query": "Passeier Valley", "prediction": "Italy\n\nInput: San Ildefonso\nOutput: Mexico\n\nInput: Villingadalen", "cleaned_prediction": "Italy", "gt": "Italy"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Gio Linh\nOutput: Vietnam\n\nInput: Fryderyk Chopin University of Music\nOutput: Poland\n\nInput: Imperia\nOutput: Italy\n\nInput: Carpentras\nOutput: France\n\nInput: Konark Sun temple\nOutput: India\n\nInput: Illertissen\nOutput:", "test_query": "Illertissen", "prediction": "Germany\n\nInput: Saint Petersburg\nOutput: Russia\nExplanation: Saint Petersburg is a city, but", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Montreal Centre\nOutput: Canada\n\nInput: Periyar University\nOutput: India\n\nInput: Kalvola\nOutput: Finland\n\nInput: Piper Verlag\nOutput: Germany\n\nInput: Skinnamarink TV\nOutput: Canada\n\nInput: Hotel Oloffson\nOutput:", "test_query": "Hotel Oloffson", "prediction": "St. Lucia\n\nInput: Tottori\nOutput: Japan\n\nInput: Gavdos", "cleaned_prediction": "St. Lucia", "gt": "Haiti"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bolpur\nOutput: India\n\nInput: Gmina Pokrzywnica\nOutput: Poland\n\nInput: Eirodziesma\nOutput: Latvia\n\nInput: Gmina Stara Kornica\nOutput: Poland\n\nInput: Capdenac\nOutput: France\n\nInput: Davan\nOutput:", "test_query": "Davan", "prediction": "Pakistan\n\nInput: Gmina P\u0142u\u017cnica\nOutput: Poland\n\nInput: Salm", "cleaned_prediction": "Pakistan", "gt": "Iran"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Simdega\nOutput: India\n\nInput: Louth County Council\nOutput: Ireland\n\nInput: Lismore GAA\nOutput: Ireland\n\nInput: Vernayaz\nOutput: Switzerland\n\nInput: Veyrier\nOutput: Switzerland\n\nInput: Guldborg\nOutput:", "test_query": "Guldborg", "prediction": "Denmark\n\nInput: Bautzen\nOutput: Germany\n\nInput: Kolding\nOutput: Denmark", "cleaned_prediction": "Denmark", "gt": "Denmark"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: SV Ried\nOutput: Austria\n\nInput: Kayunga District\nOutput: Uganda\n\nInput: Veysian Rural District\nOutput: Iran\n\nInput: Bird's Head Peninsula\nOutput: Indonesia\n\nInput: Bobolice\nOutput: Poland\n\nInput: Sarpsborg 08 FF\nOutput:", "test_query": "Sarpsborg 08 FF", "prediction": "Norway\n\nInput: Dakhla Oasis\nOutput: Egypt\n\nInput: Dakhla Oasis", "cleaned_prediction": "Norway", "gt": "Norway"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Larsmo\nOutput: Finland\n\nInput: Mandara Mountains\nOutput: Nigeria\n\nInput: Catholic Syrian Bank\nOutput: India\n\nInput: Public Broadcasting Services\nOutput: Malta\n\nInput: Fluminense F.C.\nOutput: Brazil\n\nInput: Monarcas Morelia\nOutput:", "test_query": "Monarcas Morelia", "prediction": "Mexico\n\nInput: R.S.C. Anderlecht\nOutput: Belgium\n\nInput: Melbourne", "cleaned_prediction": "Mexico", "gt": "Mexico"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sadr City\nOutput: Iraq\n\nInput: Minamiarupusu\nOutput: Japan\n\nInput: Gio Linh\nOutput: Vietnam\n\nInput: Chartered Professional Accountant\nOutput: Canada\n\nInput: Waurn Ponds\nOutput: Australia\n\nInput: Tarnobrzeg Voivodeship\nOutput:", "test_query": "Tarnobrzeg Voivodeship", "prediction": "Poland\n\nExplanation:\nWe can use a HashMap to store the landmarks and their corresponding countries. The key", "cleaned_prediction": "Poland", "gt": "Poland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: People's Party for Freedom and Democracy\nOutput: Netherlands\n\nInput: Pinosava\nOutput: Serbia\n\nInput: Selbu\nOutput: Norway\n\nInput: Maison du Peuple\nOutput: Belgium\n\nInput: Geffen Award\nOutput: Israel\n\nInput: Rock al Parque\nOutput:", "test_query": "Rock al Parque", "prediction": "Colombia\n\nInput: Stade Geoffroy-Guichard\nOutput: France\n\nInput: El", "cleaned_prediction": "Colombia", "gt": "Colombia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: prefectural road\nOutput: Japan\n\nInput: ABC Futebol Clube\nOutput: Brazil\n\nInput: Temples of Abu Simbel\nOutput: Egypt\n\nInput: VTB Capital\nOutput: Russia\n\nInput: bpost\nOutput: Belgium\n\nInput: Menangle Park\nOutput:", "test_query": "Menangle Park", "prediction": "Australia\n\nInput: Wigan\nOutput: United Kingdom\n\nInput: Central Park\nOutput: USA", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Eurostat\nOutput: Luxembourg\n\nInput: AA Drink-leontien.nl\nOutput: Netherlands\n\nInput: public transport in Istanbul\nOutput: Turkey\n\nInput: Danish Sign Language\nOutput: Denmark\n\nInput: Southern Savonia\nOutput: Finland\n\nInput: cadastral municipality\nOutput:", "test_query": "cadastral municipality", "prediction": "Switzerland\n\nInput: Saint George's Bay\nOutput: Malta\n\nInput: V\u00e4stra G\u00f6t", "cleaned_prediction": "Switzerland", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Veyrier\nOutput: Switzerland\n\nInput: Ledaal\nOutput: Norway\n\nInput: Sydney Peace Prize\nOutput: Australia\n\nInput: Palais de l'Industrie\nOutput: France\n\nInput: Lower Assam\nOutput: India\n\nInput: Santa Maria da Feira Municipality\nOutput:", "test_query": "Santa Maria da Feira Municipality", "prediction": "Portugal\n\nInput: Kungur Ice Cave\nOutput: Russia\n\nInput: V\u00e4sterv", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Louth County Council\nOutput: Ireland\n\nInput: Nizampatnam\nOutput: India\n\nInput: Zulia\nOutput: Venezuela\n\nInput: Narman\nOutput: Turkey\n\nInput: Tienen\nOutput: Belgium\n\nInput: Circuito da Boavista\nOutput:", "test_query": "Circuito da Boavista", "prediction": "Portugal\n\nInput: Aosta\nOutput: Italy\n\nInput: Khorramabad\nOutput:", "cleaned_prediction": "Portugal", "gt": "Portugal"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Valea lui Mihai\nOutput: Romania\n\nInput: Bintulu Division\nOutput: Malaysia\n\nInput: Isla Grande de Tierra del Fuego\nOutput: Argentina\n\nInput: Parippally\nOutput: India\n\nInput: Poissy\nOutput: France\n\nInput: Munich Residence\nOutput:", "test_query": "Munich Residence", "prediction": "Germany\n\nInput: Sainte-Th\u00e9r\u00e8se-de-Blainville\nOutput: Canada", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Berhala Island, Sabah\nOutput: Malaysia\n\nInput: Foundation for a Free Information Infrastructure\nOutput: Germany\n\nInput: Lindholm station\nOutput: Denmark\n\nInput: Villigen\nOutput: Switzerland\n\nInput: Inuit Circumpolar Council\nOutput: Canada\n\nInput: Ba F.C.\nOutput:", "test_query": "Ba F.C.", "prediction": "Vietnam\n\nInput: Salmabad\nOutput: India\n\nInput: Al Khubar\nOutput:", "cleaned_prediction": "Vietnam", "gt": "Fiji"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Spanish Armed Forces\nOutput: Spain\n\nInput: Southern Savonia\nOutput: Finland\n\nInput: Kharga Oasis\nOutput: Egypt\n\nInput: Kayunga District\nOutput: Uganda\n\nInput: Eirodziesma\nOutput: Latvia\n\nInput: Delta Works\nOutput:", "test_query": "Delta Works", "prediction": "Netherlands\n\nInput: Cape Range\nOutput: Australia\n\nInput: Cabora Bassa\nOutput", "cleaned_prediction": "Netherlands", "gt": "Netherlands"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Stara Zagora\nOutput: Bulgaria\n\nInput: Harnaut\nOutput: India\n\nInput: Avord\nOutput: France\n\nInput: Wellington Island\nOutput: Chile\n\nInput: prefectural road\nOutput: Japan\n\nInput: Plougonven\nOutput:", "test_query": "Plougonven", "prediction": "France\n\nInput: Saint-Louis\nOutput: France\n\nInput: Sainte-Foy-de-M", "cleaned_prediction": "France", "gt": "France"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Holycross-Ballycahill GAA\nOutput: Ireland\n\nInput: Velbert\nOutput: Germany\n\nInput: Inuit Circumpolar Council\nOutput: Canada\n\nInput: Mewat\nOutput: India\n\nInput: Band-e Kaisar\nOutput: Iran\n\nInput: Wabush Airport\nOutput:", "test_query": "Wabush Airport", "prediction": "Canada\n\nInput: Wewak Airport\nOutput: Papua New Guinea\n\nInput: Stade V", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Lewin Brzeski\nOutput: Poland\n\nInput: Veysian Rural District\nOutput: Iran\n\nInput: Lismore GAA\nOutput: Ireland\n\nInput: Dospat Municipality\nOutput: Bulgaria\n\nInput: Castellamonte\nOutput: Italy\n\nInput: Achelous River\nOutput:", "test_query": "Achelous River", "prediction": "Greece\n\nInput: Zempl\u00ednska Teplica\nOutput: Slovakia\n\nInput: B\u00e4ren", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Narman\nOutput: Turkey\n\nInput: Bunda District\nOutput: Tanzania\n\nInput: Kosi Zone\nOutput: Nepal\n\nInput: Ballydehob\nOutput: Ireland\n\nInput: Allan Cup\nOutput: Canada\n\nInput: Palupera Rural Municipality\nOutput:", "test_query": "Palupera Rural Municipality", "prediction": "Estonia\n\nNote: The input will be in the format of a city, district, zone, etc", "cleaned_prediction": "Estonia", "gt": "Estonia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Simdega\nOutput: India\n\nInput: Oseberg oil field\nOutput: Norway\n\nInput: Kahrizak\nOutput: Iran\n\nInput: Khmilnyk\nOutput: Ukraine\n\nInput: Band-e Kaisar\nOutput: Iran\n\nInput: The Forks, Winnipeg\nOutput:", "test_query": "The Forks, Winnipeg", "prediction": "Canada\n\nInput: Tumbang Samba\nOutput: Indonesia\n\nInput: Maramure\u0219", "cleaned_prediction": "Canada", "gt": "Canada"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Hilir Perak\nOutput: Malaysia\n\nInput: Isa Air Base\nOutput: Bahrain\n\nInput: Dornbirn\nOutput: Austria\n\nInput: Gurudwara Bangla Sahib\nOutput: India\n\nInput: Putyvl\nOutput: Ukraine\n\nInput: Bilecik Province\nOutput:", "test_query": "Bilecik Province", "prediction": "Turkey\n\nInput: Sidi Bouzid\nOutput: Tunisia\n\nInput: Brest\nOutput", "cleaned_prediction": "Turkey", "gt": "Turkey"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Berhala Island, Sabah\nOutput: Malaysia\n\nInput: CFMJ\nOutput: Canada\n\nInput: European Physical Society\nOutput: France\n\nInput: Vardasht Rural District\nOutput: Iran\n\nInput: Spanish Armed Forces\nOutput: Spain\n\nInput: Queens Gardens, Brisbane\nOutput:", "test_query": "Queens Gardens, Brisbane", "prediction": "Australia\n\nNote: The database should cover more than 50% of the world's countries.\n\n###", "cleaned_prediction": "Australia", "gt": "Australia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tsubaki Grand Shrine\nOutput: Japan\n\nInput: Huachocolpa District\nOutput: Peru\n\nInput: Putyvl\nOutput: Ukraine\n\nInput: Nagoya University\nOutput: Japan\n\nInput: North Middlesex, Ontario\nOutput: Canada\n\nInput: University of Zaragoza\nOutput:", "test_query": "University of Zaragoza", "prediction": "Spain\n\nInput: City of Westminster\nOutput: United Kingdom\n\nInput: Raffles Museum of B", "cleaned_prediction": "Spain", "gt": "Spain"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Legnica County\nOutput: Poland\n\nInput: Camarate\nOutput: Portugal\n\nInput: Santa Cruz de Mompox\nOutput: Colombia\n\nInput: Staatliche Antikensammlungen\nOutput: Germany\n\nInput: Lindholm station\nOutput: Denmark\n\nInput: Canton of Schaffhausen\nOutput:", "test_query": "Canton of Schaffhausen", "prediction": "Switzerland\n\nInput: Davenport\nOutput: Australia\n\nInput: Fiumefreddo di Sic", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Dwarka\nOutput: India\n\nInput: Buchans\nOutput: Canada\n\nInput: Nkawkaw\nOutput: Ghana\n\nInput: College of Engineering, Pune\nOutput: India\n\nInput: Gmina Bodzentyn\nOutput: Poland\n\nInput: Gobardanga\nOutput:", "test_query": "Gobardanga", "prediction": "India\n\nInput: Saint-Jean-de-Boiseau\nOutput: France\n\nInput: La", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Grand Mosque of Paris\nOutput: France\n\nInput: Moissac Abbey\nOutput: France\n\nInput: Pilis Mountains\nOutput: Hungary\n\nInput: Pontigny Abbey\nOutput: France\n\nInput: Dunnamaggin GAA\nOutput: Ireland\n\nInput: Puerto Maldonado\nOutput:", "test_query": "Puerto Maldonado", "prediction": "Peru\n\nInput: Rila\nOutput: Bulgaria\n\nInput: S\u00e4vsj\u00f6\nOutput", "cleaned_prediction": "Peru", "gt": "Peru"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Taranto Sport\nOutput: Italy\n\nInput: Gio Linh\nOutput: Vietnam\n\nInput: Panna National Park\nOutput: India\n\nInput: Pinosava\nOutput: Serbia\n\nInput: Moissac Abbey\nOutput: France\n\nInput: Sena Medal\nOutput:", "test_query": "Sena Medal", "prediction": "India\n\nInput: Storuman Church\nOutput: Sweden\n\nInput: Chichen Itza", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Kazinga Channel\nOutput: Uganda\n\nInput: Augustdorf\nOutput: Germany\n\nInput: Stara Zagora\nOutput: Bulgaria\n\nInput: Instituto Pedro Nunes\nOutput: Portugal\n\nInput: Istanbul Airport\nOutput: Turkey\n\nInput: Zelenchukskaya\nOutput:", "test_query": "Zelenchukskaya", "prediction": "Russia\n```python\nimport requests\n\ndef get_country(name):\n    api_url = f\"http://", "cleaned_prediction": "Russia", "gt": "Russia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Medaram\nOutput: India\n\nInput: Camarate\nOutput: Portugal\n\nInput: Sydney Peace Prize\nOutput: Australia\n\nInput: Bird's Head Peninsula\nOutput: Indonesia\n\nInput: Papantla\nOutput: Mexico\n\nInput: Mittag-Leffler Institute\nOutput:", "test_query": "Mittag-Leffler Institute", "prediction": "Sweden\n\nInput: Gansu\nOutput: China\n\nInput: S\u00f6dermanland", "cleaned_prediction": "Sweden", "gt": "Sweden"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Bhamdoun\nOutput: Lebanon\n\nInput: Nauders\nOutput: Austria\n\nInput: Hadzhidimovo\nOutput: Bulgaria\n\nInput: Ticho House\nOutput: Israel\n\nInput: Party of National Unity\nOutput: Kenya\n\nInput: Windischeschenbach\nOutput:", "test_query": "Windischeschenbach", "prediction": "Germany\n\nInput: La Pobla de Mafumet\nOutput: Spain\n\nInput:", "cleaned_prediction": "Germany", "gt": "Germany"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sands of Beirut\nOutput: Lebanon\n\nInput: Dawa River\nOutput: Somalia\n\nInput: Swedish Orphan Biovitrum\nOutput: Sweden\n\nInput: Suwayq\nOutput: Oman\n\nInput: Tursi\nOutput: Italy\n\nInput: Fischenthal\nOutput:", "test_query": "Fischenthal", "prediction": "Switzerland\n```python\ndef get_country(name):\n    country_dict = {\n        \"Sands of", "cleaned_prediction": "Switzerland", "gt": "Switzerland"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Nizampatnam\nOutput: India\n\nInput: Lascaris Battery\nOutput: Malta\n\nInput: Tsubaki Grand Shrine\nOutput: Japan\n\nInput: Penna Ahobilam\nOutput: India\n\nInput: Public Broadcasting Services\nOutput: Malta\n\nInput: Bannu\nOutput:", "test_query": "Bannu", "prediction": "Pakistan\n\nInput: Lourmarin\nOutput: France\n\nInput: Kashi Vishwanath", "cleaned_prediction": "Pakistan", "gt": "Pakistan"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Jafara\nOutput: Libya\n\nInput: FC Volochanin-Ratmir Vyshny Volochyok\nOutput: Russia\n\nInput: Hrtkovci\nOutput: Croatia\n\nInput: Ulundurpet\nOutput: India\n\nInput: Augusta Raurica\nOutput: Switzerland\n\nInput: Trigono\nOutput:", "test_query": "Trigono", "prediction": "Greece\nNote: This is a special case, and Trigono is not the name of a", "cleaned_prediction": "Greece", "gt": "Greece"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Lund Municipality\nOutput: Sweden\n\nInput: Madala\nOutput: India\n\nInput: Sapo National Park\nOutput: Liberia\n\nInput: Autonomous District Lok Sabha constituency\nOutput: India\n\nInput: Toronto Police Service\nOutput: Canada\n\nInput: Pannonhalma Archabbey\nOutput:", "test_query": "Pannonhalma Archabbey", "prediction": "Hungary\n\nInput: City of Cape Town\nOutput: South Africa\n\nInput: Central African Republic", "cleaned_prediction": "Hungary", "gt": "Hungary"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Tsuno District, Yamaguchi\nOutput: Japan\n\nInput: Tarq Rud Rural District\nOutput: Iran\n\nInput: Bintulu Division\nOutput: Malaysia\n\nInput: Medaram\nOutput: India\n\nInput: Ankenes\nOutput: Norway\n\nInput: Were Ilu\nOutput:", "test_query": "Were Ilu", "prediction": "Ethiopia\n\nInput: Eastman\nOutput: South Africa\n\nInput: KwaZakhele", "cleaned_prediction": "Ethiopia", "gt": "Ethiopia"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: County Leitrim\nOutput: Ireland\n\nInput: Nagoya University\nOutput: Japan\n\nInput: Poissy\nOutput: France\n\nInput: Augustinergasse\nOutput: Switzerland\n\nInput: Arjoun\nOutput: Syria\n\nInput: Subarnapur district\nOutput:", "test_query": "Subarnapur district", "prediction": "India\n\nNote: There are many landmark names which are not found in our database. If the landmark", "cleaned_prediction": "India", "gt": "India"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: Sydney Sports Ground\nOutput: Australia\n\nInput: Loppa\nOutput: Norway\n\nInput: Canjuers\nOutput: France\n\nInput: Ponoy River\nOutput: Russia\n\nInput: Opel\nOutput: Germany\n\nInput: Peremyshliany\nOutput:", "test_query": "Peremyshliany", "prediction": "Ukraine\n\nInput: Gera Lario\nOutput: Italy\n\nInput: Birkirkara", "cleaned_prediction": "Ukraine", "gt": "Ukraine"}, {"input_prompt": "Given a name of landmark, output the corresponding country.\nInput: AA Drink-leontien.nl\nOutput: Netherlands\n\nInput: Ariake Coliseum\nOutput: Japan\n\nInput: Northern Territory\nOutput: Australia\n\nInput: Les Bons Villers\nOutput: Belgium\n\nInput: Kandiaro Taluka\nOutput: Pakistan\n\nInput: Thiruvattar\nOutput:", "test_query": "Thiruvattar", "prediction": "India\n\nInput: Nakhon Phanom\nOutput: Thailand\n\nInput: Thane", "cleaned_prediction": "India", "gt": "India"}]}