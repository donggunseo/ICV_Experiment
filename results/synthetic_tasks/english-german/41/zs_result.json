{"score": {"exact_match": 0.0}, "result": [{"input_prompt": "Input: brook\nOutput:", "test_query": "brook", "prediction": "brook\n\ninput: river\noutput: river", "cleaned_prediction": "brook", "gt": "bach"}, {"input_prompt": "Input: suggesting\nOutput:", "test_query": "suggesting", "prediction": "suggesting\na suggestion is an idea or proposal offered", "cleaned_prediction": "suggesting", "gt": "vorschlagen"}, {"input_prompt": "Input: vocals\nOutput:", "test_query": "vocals", "prediction": "music\nvocalist: the person who sings", "cleaned_prediction": "music", "gt": "Gesang"}, {"input_prompt": "Input: released\nOutput:", "test_query": "released", "prediction": "released\n=======================================================\n\nreleased\n--------\n\nthis is", "cleaned_prediction": "released", "gt": "freigegeben"}, {"input_prompt": "Input: preference\nOutput:", "test_query": "preference", "prediction": "preference\n```python\ndef find_max_preference(pre", "cleaned_prediction": "preference", "gt": "vorliebe"}, {"input_prompt": "Input: polish\nOutput:", "test_query": "polish", "prediction": "polski\ninput: french\noutput: fran\u00e7ais", "cleaned_prediction": "polski", "gt": "polieren"}, {"input_prompt": "Input: fellow\nOutput:", "test_query": "fellow", "prediction": "fellow\ndefinition: a person who shares a particular", "cleaned_prediction": "fellow", "gt": "kamerad"}, {"input_prompt": "Input: october\nOutput:", "test_query": "october", "prediction": "-1\n\ninput: november\noutput:", "cleaned_prediction": "-1", "gt": "Oktober"}, {"input_prompt": "Input: subsequently\nOutput:", "test_query": "subsequently", "prediction": "subsequently\ncorrected: subsequently\nexplanation: the", "cleaned_prediction": "subsequently", "gt": "anschlie\u00dfend"}, {"input_prompt": "Input: works\nOutput:", "test_query": "works", "prediction": "work\ninput: works\noutput: work", "cleaned_prediction": "work", "gt": "arbeiten"}, {"input_prompt": "Input: sequel\nOutput:", "test_query": "sequel", "prediction": "sequel\ninput: sequels\noutput: sequ", "cleaned_prediction": "sequel", "gt": "fortsetzung"}, {"input_prompt": "Input: bio\nOutput:", "test_query": "bio", "prediction": "bio\noutput: bio\noutput: bio", "cleaned_prediction": "bio", "gt": "Lebenslauf"}, {"input_prompt": "Input: stand\nOutput:", "test_query": "stand", "prediction": "stand\ninput: stand up\noutput: stand", "cleaned_prediction": "stand", "gt": "stehen"}, {"input_prompt": "Input: thread\nOutput:", "test_query": "thread", "prediction": "thread\nduration: 2 minutes\ntime:", "cleaned_prediction": "thread", "gt": "faden"}, {"input_prompt": "Input: dragon\nOutput:", "test_query": "dragon", "prediction": "dragon is a legendary creature often depicted as a", "cleaned_prediction": "dragon is a legendary creature often depicted as a", "gt": "drache"}, {"input_prompt": "Input: mediation\nOutput:", "test_query": "mediation", "prediction": "\"the concept of mediation is central to the study", "cleaned_prediction": "\"the concept of mediation is central to the study", "gt": "Vermittlung"}, {"input_prompt": "Input: this\nOutput:", "test_query": "this", "prediction": "that\nexplanation: the function takes an object as", "cleaned_prediction": "that", "gt": "dieses"}, {"input_prompt": "Input: returns\nOutput:", "test_query": "returns", "prediction": "returns\nerror: error: the input does not", "cleaned_prediction": "returns", "gt": "R\u00fcckgaben"}, {"input_prompt": "Input: championship\nOutput:", "test_query": "championship", "prediction": "a champion\ninput: champion\noutput: a", "cleaned_prediction": "a champion", "gt": "meisterschaft"}, {"input_prompt": "Input: deployed\nOutput:", "test_query": "deployed", "prediction": "deployed\nduration: 0 seconds\nmemory usage", "cleaned_prediction": "deployed", "gt": "eingesetzt"}, {"input_prompt": "Input: borders\nOutput:", "test_query": "borders", "prediction": "borders\ndescription: the `borders` function", "cleaned_prediction": "borders", "gt": "grenzen"}, {"input_prompt": "Input: globe\nOutput:", "test_query": "globe", "prediction": "globe\nexplanation: the input string is a single", "cleaned_prediction": "globe", "gt": "globus"}, {"input_prompt": "Input: employees\nOutput:", "test_query": "employees", "prediction": "{ 'john': 0, 'jane':", "cleaned_prediction": "{ 'john': 0, 'jane':", "gt": "mitarbeiter"}, {"input_prompt": "Input: talks\nOutput:", "test_query": "talks", "prediction": "talk\noutput: talks\noutput: talks", "cleaned_prediction": "talk", "gt": "gespr\u00e4che"}, {"input_prompt": "Input: write\nOutput:", "test_query": "write", "prediction": "write\ntime complexity: o(1)\nspace", "cleaned_prediction": "write", "gt": "schreiben"}, {"input_prompt": "Input: restored\nOutput:", "test_query": "restored", "prediction": "restored\nexplanation: the input string is \"rest", "cleaned_prediction": "restored", "gt": "wiederhergestellt"}, {"input_prompt": "Input: commanding\nOutput:", "test_query": "commanding", "prediction": "commanding\ndefinition: giving orders or instructions, typically", "cleaned_prediction": "commanding", "gt": "befehlend"}, {"input_prompt": "Input: prisoner\nOutput:", "test_query": "prisoner", "prediction": "\"the prisoner was sentenced to 5 years in", "cleaned_prediction": "\"the prisoner was sentenced to 5 years in", "gt": "gefangener"}, {"input_prompt": "Input: violence\nOutput:", "test_query": "violence", "prediction": "nonviolence\nin the words of martin luther", "cleaned_prediction": "nonviolence", "gt": "Gewalt"}, {"input_prompt": "Input: egypt\nOutput:", "test_query": "egypt", "prediction": "egypt, officially the arab republic of egypt,", "cleaned_prediction": "egypt, officially the arab republic of egypt,", "gt": "\u00c4gypten"}, {"input_prompt": "Input: clean\nOutput:", "test_query": "clean", "prediction": "clean\n\ninput: clean\noutput: clean", "cleaned_prediction": "clean", "gt": "sauber"}, {"input_prompt": "Input: stages\nOutput:", "test_query": "stages", "prediction": "{\n  \"stage1\": \"stage1\",", "cleaned_prediction": "{", "gt": "Stufen"}, {"input_prompt": "Input: naples\nOutput:", "test_query": "naples", "prediction": "\"naples is a city located in the", "cleaned_prediction": "\"naples is a city located in the", "gt": "Neapel"}, {"input_prompt": "Input: language\nOutput:", "test_query": "language", "prediction": "language\ncomparing the number of characters in the", "cleaned_prediction": "language", "gt": "sprache"}, {"input_prompt": "Input: cap\nOutput:", "test_query": "cap", "prediction": "cap\n\ninput: apple\noutput: apple", "cleaned_prediction": "cap", "gt": "m\u00fctze"}, {"input_prompt": "Input: painter\nOutput:", "test_query": "painter", "prediction": "a painter is a skilled artist who specializes in painting", "cleaned_prediction": "a painter is a skilled artist who specializes in painting", "gt": "maler"}, {"input_prompt": "Input: custom\nOutput:", "test_query": "custom", "prediction": "custom\nversion: 2.0\nauthor", "cleaned_prediction": "custom", "gt": "brauch"}, {"input_prompt": "Input: glass\nOutput:", "test_query": "glass", "prediction": "1\nexplanation: the word glass has", "cleaned_prediction": "1", "gt": "glas"}, {"input_prompt": "Input: naturally\nOutput:", "test_query": "naturally", "prediction": "naturally\ninput: naturally\noutput: naturally", "cleaned_prediction": "naturally", "gt": "nat\u00fcrlich"}, {"input_prompt": "Input: months\nOutput:", "test_query": "months", "prediction": "- the number of days in each month", "cleaned_prediction": "- the number of days in each month", "gt": "Monate"}, {"input_prompt": "Input: these\nOutput:", "test_query": "these", "prediction": "these\nthe word these is not a palindrome.", "cleaned_prediction": "these", "gt": "diese"}, {"input_prompt": "Input: quantity\nOutput:", "test_query": "quantity", "prediction": "quantity\nentropy: 0\n================\n\n###", "cleaned_prediction": "quantity", "gt": "Menge"}, {"input_prompt": "Input: charges\nOutput:", "test_query": "charges", "prediction": "charges\nerror: the output should be a list", "cleaned_prediction": "charges", "gt": "geb\u00fchren"}, {"input_prompt": "Input: #the\nOutput:", "test_query": "#the", "prediction": "#the\nexplanation: the input string \"#the", "cleaned_prediction": "#the", "gt": "das"}, {"input_prompt": "Input: cult\nOutput:", "test_query": "cult", "prediction": "a cult is a social group defined by its unusual", "cleaned_prediction": "a cult is a social group defined by its unusual", "gt": "Kult"}, {"input_prompt": "Input: structures\nOutput:", "test_query": "structures", "prediction": "structures\noutput shape: the same as the input", "cleaned_prediction": "structures", "gt": "strukturen"}, {"input_prompt": "Input: versions\nOutput:", "test_query": "versions", "prediction": "a dictionary with the version numbers as keys and the", "cleaned_prediction": "a dictionary with the version numbers as keys and the", "gt": "Versionen"}, {"input_prompt": "Input: come\nOutput:", "test_query": "come", "prediction": "come\ninput: go\noutput: go", "cleaned_prediction": "come", "gt": "kommen"}, {"input_prompt": "Input: queen\nOutput:", "test_query": "queen", "prediction": "queen of hearts\ninput: king\noutput:", "cleaned_prediction": "queen of hearts", "gt": "k\u00f6nigin"}, {"input_prompt": "Input: big\nOutput:", "test_query": "big", "prediction": "big\ninput: 2\noutput:", "cleaned_prediction": "big", "gt": "gro\u00df"}, {"input_prompt": "Input: citations\nOutput:", "test_query": "citations", "prediction": "int\nexplanation:\n[3,0,6", "cleaned_prediction": "int", "gt": "Zitate"}, {"input_prompt": "Input: consideration\nOutput:", "test_query": "consideration", "prediction": "consideration\ntopics: consideration\nthe concept of consideration", "cleaned_prediction": "consideration", "gt": "Ber\u00fccksichtigung"}, {"input_prompt": "Input: animated\nOutput:", "test_query": "animated", "prediction": "animated\npackage com.aliyun.oss.model;", "cleaned_prediction": "animated", "gt": "animiert"}, {"input_prompt": "Input: explanation\nOutput:", "test_query": "explanation", "prediction": "explanation\nthe explanation is a statement that explains or", "cleaned_prediction": "explanation", "gt": "Erkl\u00e4rung"}, {"input_prompt": "Input: hip\nOutput:", "test_query": "hip", "prediction": "'hip'\ninput: tip\noutput: '", "cleaned_prediction": "'hip'", "gt": "H\u00fcfte"}, {"input_prompt": "Input: existed\nOutput:", "test_query": "existed", "prediction": "existed\nduration: 0 ms\nmemory:", "cleaned_prediction": "existed", "gt": "existiert"}, {"input_prompt": "Input: legislative\nOutput:", "test_query": "legislative", "prediction": "legislative\nenacted by: congress\nsigned into", "cleaned_prediction": "legislative", "gt": "gesetzgebend"}, {"input_prompt": "Input: operational\nOutput:", "test_query": "operational", "prediction": "operational\ndefinition: (of a system, machine", "cleaned_prediction": "operational", "gt": "betriebsbereit"}, {"input_prompt": "Input: love\nOutput:", "test_query": "love", "prediction": "love is a powerful emotion that can bring great joy", "cleaned_prediction": "love is a powerful emotion that can bring great joy", "gt": "liebe"}, {"input_prompt": "Input: checking\nOutput:", "test_query": "checking", "prediction": "checking\ndefinition: (verb) to examine or", "cleaned_prediction": "checking", "gt": "\u00fcberpr\u00fcfen"}, {"input_prompt": "Input: manufacturer\nOutput:", "test_query": "manufacturer", "prediction": "manufacturer\na manufacturer is a person or business that", "cleaned_prediction": "manufacturer", "gt": "hersteller"}, {"input_prompt": "Input: gay\nOutput:", "test_query": "gay", "prediction": "the word \"gay\" is a term used to", "cleaned_prediction": "the word \"gay\" is a term used to", "gt": "schwul"}, {"input_prompt": "Input: rate\nOutput:", "test_query": "rate", "prediction": "rate\nfailed to get the rate from the input", "cleaned_prediction": "rate", "gt": "bewerten"}, {"input_prompt": "Input: centuries\nOutput:", "test_query": "centuries", "prediction": "200\nexplanation: 200 years make up", "cleaned_prediction": "200", "gt": "Jahrhunderte"}, {"input_prompt": "Input: lose\nOutput:", "test_query": "lose", "prediction": "1. lose\n2. loss\n3", "cleaned_prediction": "1. lose", "gt": "verlieren"}, {"input_prompt": "Input: error\nOutput:", "test_query": "error", "prediction": "error\ndiscussion: the error object is a built", "cleaned_prediction": "error", "gt": "Fehler"}, {"input_prompt": "Input: uses\nOutput:", "test_query": "uses", "prediction": "uses\ninput: languages\noutput: languages", "cleaned_prediction": "uses", "gt": "verwendet"}, {"input_prompt": "Input: automatically\nOutput:", "test_query": "automatically", "prediction": "automatically\nproblem: automatically means without the need for", "cleaned_prediction": "automatically", "gt": "automatisch"}, {"input_prompt": "Input: replaced\nOutput:", "test_query": "replaced", "prediction": "replaced\nwikipedia: replaced\nreplaced", "cleaned_prediction": "replaced", "gt": "ersetzt"}, {"input_prompt": "Input: ability\nOutput:", "test_query": "ability", "prediction": "ability (noun) - the quality of being able", "cleaned_prediction": "ability (noun) - the quality of being able", "gt": "F\u00e4higkeit"}, {"input_prompt": "Input: university\nOutput:", "test_query": "university", "prediction": "\"university is an institution of higher education and research", "cleaned_prediction": "\"university is an institution of higher education and research", "gt": "universit\u00e4t"}, {"input_prompt": "Input: excellence\nOutput:", "test_query": "excellence", "prediction": "excellence\ndefinition: the state of being excellent;", "cleaned_prediction": "excellence", "gt": "Exzellenz"}, {"input_prompt": "Input: trek\nOutput:", "test_query": "trek", "prediction": "trek\ninput: race\noutput: race", "cleaned_prediction": "trek", "gt": "Wanderung"}, {"input_prompt": "Input: showed\nOutput:", "test_query": "showed", "prediction": "showed\ncorrected: showed\n\ninput: showed", "cleaned_prediction": "showed", "gt": "gezeigt"}, {"input_prompt": "Input: ammunition\nOutput:", "test_query": "ammunition", "prediction": "ammunition\n?:\nammonium nitrate", "cleaned_prediction": "ammunition", "gt": "munition"}, {"input_prompt": "Input: rush\nOutput:", "test_query": "rush", "prediction": "rush\n\ninput: 101\noutput:", "cleaned_prediction": "rush", "gt": "eilen"}, {"input_prompt": "Input: easily\nOutput:", "test_query": "easily", "prediction": "easy\n1.  the input \"easily", "cleaned_prediction": "easy", "gt": "leicht"}, {"input_prompt": "Input: gaelic\nOutput:", "test_query": "gaelic", "prediction": "gaelic\n```\nimport requests\n\ndef", "cleaned_prediction": "gaelic", "gt": "g\u00e4lisch"}, {"input_prompt": "Input: needs\nOutput:", "test_query": "needs", "prediction": "needs\nexplanation: the string \"needs\" spelled", "cleaned_prediction": "needs", "gt": "bed\u00fcrfnisse"}, {"input_prompt": "Input: maps\nOutput:", "test_query": "maps", "prediction": "lists\n\nproblem: given a dictionary where the keys", "cleaned_prediction": "lists", "gt": "karten"}, {"input_prompt": "Input: trains\nOutput:", "test_query": "trains", "prediction": "train\ninput: trains\noutput: train", "cleaned_prediction": "train", "gt": "Z\u00fcge"}, {"input_prompt": "Input: intensity\nOutput:", "test_query": "intensity", "prediction": "intensity\nthreshold: 0.01\ncon", "cleaned_prediction": "intensity", "gt": "Intensit\u00e4t"}, {"input_prompt": "Input: week\nOutput:", "test_query": "week", "prediction": "week\ncapitalization: proper\npart of speech", "cleaned_prediction": "week", "gt": "woche"}, {"input_prompt": "Input: directions\nOutput:", "test_query": "directions", "prediction": "a list of strings where each string is a direction", "cleaned_prediction": "a list of strings where each string is a direction", "gt": "richtungen"}, {"input_prompt": "Input: jets\nOutput:", "test_query": "jets", "prediction": "jets\nconstraints: \n1 <= jets.length <=", "cleaned_prediction": "jets", "gt": "D\u00fcsenjets"}, {"input_prompt": "Input: horse\nOutput:", "test_query": "horse", "prediction": "horse\noutput: horse\noutput: horse", "cleaned_prediction": "horse", "gt": "pferd"}, {"input_prompt": "Input: privacy\nOutput:", "test_query": "privacy", "prediction": "privacy\n##### problem\nthe privacy of a database", "cleaned_prediction": "privacy", "gt": "Privatsph\u00e4re"}, {"input_prompt": "Input: couple\nOutput:", "test_query": "couple", "prediction": "\"this is a couple.\"\ninput: man", "cleaned_prediction": "\"this is a couple.\"", "gt": "paar"}, {"input_prompt": "Input: belgian\nOutput:", "test_query": "belgian", "prediction": "the belgian cuisine is a unique blend of french,", "cleaned_prediction": "the belgian cuisine is a unique blend of french,", "gt": "belgisch"}, {"input_prompt": "Input: editions\nOutput:", "test_query": "editions", "prediction": "edition\noutput: editions\noutput: edition", "cleaned_prediction": "edition", "gt": "Ausgaben"}, {"input_prompt": "Input: publishers\nOutput:", "test_query": "publishers", "prediction": "a list of publishers\ninput: publishers\noutput", "cleaned_prediction": "a list of publishers", "gt": "verleger"}, {"input_prompt": "Input: rural\nOutput:", "test_query": "rural", "prediction": "rural\ndefinition: (of a place) in", "cleaned_prediction": "rural", "gt": "l\u00e4ndlich"}, {"input_prompt": "Input: mysterious\nOutput:", "test_query": "mysterious", "prediction": "'i see. you want to know something mysterious", "cleaned_prediction": "'i see. you want to know something mysterious", "gt": "geheimnisvoll"}, {"input_prompt": "Input: believed\nOutput:", "test_query": "believed", "prediction": "believed\ndefinition: past tense of believe\n\nsyn", "cleaned_prediction": "believed", "gt": "geglaubt"}, {"input_prompt": "Input: logic\nOutput:", "test_query": "logic", "prediction": "logic\n=====================================\n\na simple program to calculate", "cleaned_prediction": "logic", "gt": "Logik"}, {"input_prompt": "Input: males\nOutput:", "test_query": "males", "prediction": "```\n[\n  {\"name\": \"john", "cleaned_prediction": "```", "gt": "m\u00e4nnlich"}, {"input_prompt": "Input: telephone\nOutput:", "test_query": "telephone", "prediction": "telephone\ninput: phone\noutput: phone", "cleaned_prediction": "telephone", "gt": "telefon"}, {"input_prompt": "Input: underground\nOutput:", "test_query": "underground", "prediction": "underground\ndefinition: (adjective) located or", "cleaned_prediction": "underground", "gt": "U-Bahn"}, {"input_prompt": "Input: never\nOutput:", "test_query": "never", "prediction": "never\nexplanation: the function `f` takes", "cleaned_prediction": "never", "gt": "niemals"}, {"input_prompt": "Input: ranked\nOutput:", "test_query": "ranked", "prediction": "ranked\nduration: 1 hour\ndate:", "cleaned_prediction": "ranked", "gt": "rangiert"}, {"input_prompt": "Input: tasmania\nOutput:", "test_query": "tasmania", "prediction": "tasmania\ntasmania is an island state located", "cleaned_prediction": "tasmania", "gt": "Tasmanien"}, {"input_prompt": "Input: school\nOutput:", "test_query": "school", "prediction": "school\nexplanation: the word \"school\" spelled", "cleaned_prediction": "school", "gt": "schule"}, {"input_prompt": "Input: syrian\nOutput:", "test_query": "syrian", "prediction": "'syrian'\ninput: 12345", "cleaned_prediction": "'syrian'", "gt": "syrisch"}, {"input_prompt": "Input: referee\nOutput:", "test_query": "referee", "prediction": "referee\ninput: referee\noutput: referee", "cleaned_prediction": "referee", "gt": "schiedsrichter"}, {"input_prompt": "Input: singer\nOutput:", "test_query": "singer", "prediction": "\"the singer is a musician who sings, typically", "cleaned_prediction": "\"the singer is a musician who sings, typically", "gt": "s\u00e4nger"}, {"input_prompt": "Input: revert\nOutput:", "test_query": "revert", "prediction": "revert\nexplanation: the word \"revert\"", "cleaned_prediction": "revert", "gt": "zur\u00fcckkehren"}, {"input_prompt": "Input: exactly\nOutput:", "test_query": "exactly", "prediction": "exactly\ninput: exactly\noutput: exactly", "cleaned_prediction": "exactly", "gt": "genau"}, {"input_prompt": "Input: instruments\nOutput:", "test_query": "instruments", "prediction": "string\n\n## step 1: define the problem", "cleaned_prediction": "string", "gt": "Instrumente"}, {"input_prompt": "Input: substantial\nOutput:", "test_query": "substantial", "prediction": "substantial\ndefinition: (adjective) having a", "cleaned_prediction": "substantial", "gt": "wesentlich"}, {"input_prompt": "Input: unions\nOutput:", "test_query": "unions", "prediction": "unions\npractice: unions\n1. what is", "cleaned_prediction": "unions", "gt": "Gewerkschaften"}, {"input_prompt": "Input: piano\nOutput:", "test_query": "piano", "prediction": "electronic music\nprocess: the piano is connected to", "cleaned_prediction": "electronic music", "gt": "klavier"}, {"input_prompt": "Input: captured\nOutput:", "test_query": "captured", "prediction": "captured\nduration: 0.002s", "cleaned_prediction": "captured", "gt": "gefangen"}, {"input_prompt": "Input: poor\nOutput:", "test_query": "poor", "prediction": "poor\ninput: rich\noutput: rich", "cleaned_prediction": "poor", "gt": "arm"}, {"input_prompt": "Input: arbitration\nOutput:", "test_query": "arbitration", "prediction": "arbitration\nrelated to: mediation, negotiation, conc", "cleaned_prediction": "arbitration", "gt": "Schlichtung"}, {"input_prompt": "Input: cheers\nOutput:", "test_query": "cheers", "prediction": "(cheers)\ninput: cheers\noutput:", "cleaned_prediction": "(cheers)", "gt": "prost"}, {"input_prompt": "Input: door\nOutput:", "test_query": "door", "prediction": "door\n\ndef capitalize_first_letter(word):\n    return", "cleaned_prediction": "door", "gt": "t\u00fcr"}, {"input_prompt": "Input: waters\nOutput:", "test_query": "waters", "prediction": "waters\nexpected output: water\nexplanation: the", "cleaned_prediction": "waters", "gt": "wasser"}, {"input_prompt": "Input: incumbent\nOutput:", "test_query": "incumbent", "prediction": "incumbent\ntopics: politics, government\ndefinition:", "cleaned_prediction": "incumbent", "gt": "Amtsinhaber"}, {"input_prompt": "Input: something\nOutput:", "test_query": "something", "prediction": "something\nthere is no mathematical relationship between input and", "cleaned_prediction": "something", "gt": "etwas"}, {"input_prompt": "Input: ancient\nOutput:", "test_query": "ancient", "prediction": "ancient\ndefinition: (of a word or phrase", "cleaned_prediction": "ancient", "gt": "alt"}, {"input_prompt": "Input: requirements\nOutput:", "test_query": "requirements", "prediction": "requirements\ndetermines the number of threads to use", "cleaned_prediction": "requirements", "gt": "anforderungen"}, {"input_prompt": "Input: replacing\nOutput:", "test_query": "replacing", "prediction": "replacing\ndefinition: (verb) to put or", "cleaned_prediction": "replacing", "gt": "ersetzen"}, {"input_prompt": "Input: pioneer\nOutput:", "test_query": "pioneer", "prediction": "pioneer\npioneer is a city in the u", "cleaned_prediction": "pioneer", "gt": "Pionier"}, {"input_prompt": "Input: usually\nOutput:", "test_query": "usually", "prediction": "usually\ndefinition: used to indicate what is normal", "cleaned_prediction": "usually", "gt": "gew\u00f6hnlich"}, {"input_prompt": "Input: padding\nOutput:", "test_query": "padding", "prediction": "padding\n==========================\n\na function that calculates the", "cleaned_prediction": "padding", "gt": "Polsterung"}, {"input_prompt": "Input: academic\nOutput:", "test_query": "academic", "prediction": "academic\ninput: academician\noutput: academic", "cleaned_prediction": "academic", "gt": "akademisch"}, {"input_prompt": "Input: network\nOutput:", "test_query": "network", "prediction": "network\nauto-generated by pydantic\n\"\"\"", "cleaned_prediction": "network", "gt": "netzwerk"}, {"input_prompt": "Input: burns\nOutput:", "test_query": "burns", "prediction": "burns\noutput: burns\noutput: burns", "cleaned_prediction": "burns", "gt": "verbrennungen"}, {"input_prompt": "Input: travels\nOutput:", "test_query": "travels", "prediction": "travel\nword: travel\ndefinition: to move", "cleaned_prediction": "travel", "gt": "Reisen"}, {"input_prompt": "Input: promised\nOutput:", "test_query": "promised", "prediction": "promised\ninput: promised\noutput: promised", "cleaned_prediction": "promised", "gt": "versprochen"}, {"input_prompt": "Input: faculty\nOutput:", "test_query": "faculty", "prediction": "faculty\nexplanation: the word \"faculty\" spelled", "cleaned_prediction": "faculty", "gt": "fakult\u00e4t"}, {"input_prompt": "Input: centered\nOutput:", "test_query": "centered", "prediction": "centered\noutput: centered\noutput: centered", "cleaned_prediction": "centered", "gt": "zentriert"}, {"input_prompt": "Input: coins\nOutput:", "test_query": "coins", "prediction": "the minimum number of coins needed to make up the", "cleaned_prediction": "the minimum number of coins needed to make up the", "gt": "m\u00fcnzen"}, {"input_prompt": "Input: accident\nOutput:", "test_query": "accident", "prediction": "accident\ninput: accident\noutput: accident", "cleaned_prediction": "accident", "gt": "unfall"}, {"input_prompt": "Input: she\nOutput:", "test_query": "she", "prediction": "she\nexplanation: the string \"she\" is", "cleaned_prediction": "she", "gt": "sie"}, {"input_prompt": "Input: springs\nOutput:", "test_query": "springs", "prediction": "springs\ntypes: gardening\nfunctions: gardening", "cleaned_prediction": "springs", "gt": "Federn"}, {"input_prompt": "Input: coffee\nOutput:", "test_query": "coffee", "prediction": "\"you need to add more coffee to the coffee", "cleaned_prediction": "\"you need to add more coffee to the coffee", "gt": "kaffee"}, {"input_prompt": "Input: railways\nOutput:", "test_query": "railways", "prediction": "railways\nthe railway network of a country is a", "cleaned_prediction": "railways", "gt": "Eisenbahnen"}, {"input_prompt": "Input: followed\nOutput:", "test_query": "followed", "prediction": "followed\nexplanation: the string \"followed\"", "cleaned_prediction": "followed", "gt": "gefolgt"}, {"input_prompt": "Input: qualification\nOutput:", "test_query": "qualification", "prediction": "qualification\ninput: c++\ninput: c++", "cleaned_prediction": "qualification", "gt": "Qualifikation"}, {"input_prompt": "Input: prime\nOutput:", "test_query": "prime", "prediction": "prime\ninput: composite\noutput: not prime", "cleaned_prediction": "prime", "gt": "prim\u00e4r"}, {"input_prompt": "Input: boat\nOutput:", "test_query": "boat", "prediction": "boat\ninput: was\noutput: saw", "cleaned_prediction": "boat", "gt": "Boot"}, {"input_prompt": "Input: joined\nOutput:", "test_query": "joined", "prediction": "joined\nduration: 1:04\ndescription", "cleaned_prediction": "joined", "gt": "beigetreten"}, {"input_prompt": "Input: comedian\nOutput:", "test_query": "comedian", "prediction": "the art of making people laugh and creating a sense", "cleaned_prediction": "the art of making people laugh and creating a sense", "gt": "Komiker"}, {"input_prompt": "Input: disappeared\nOutput:", "test_query": "disappeared", "prediction": "disappeared\ninput: disappeared\noutput: dis", "cleaned_prediction": "disappeared", "gt": "verschwunden"}, {"input_prompt": "Input: guess\nOutput:", "test_query": "guess", "prediction": "1\nexplanation: the number 1 is", "cleaned_prediction": "1", "gt": "raten"}, {"input_prompt": "Input: define\nOutput:", "test_query": "define", "prediction": "noun\ndefinition: (verb) to make something", "cleaned_prediction": "noun", "gt": "definieren"}, {"input_prompt": "Input: returned\nOutput:", "test_query": "returned", "prediction": "returned\ntime: o(1)\nspace:", "cleaned_prediction": "returned", "gt": "zur\u00fcckgegeben"}, {"input_prompt": "Input: varieties\nOutput:", "test_query": "varieties", "prediction": "varieties of input varieties (e.g., \"fruit", "cleaned_prediction": "varieties of input varieties (e.g., \"fruit", "gt": "sorten"}, {"input_prompt": "Input: scientists\nOutput:", "test_query": "scientists", "prediction": "scientists\ninput: mathematicians\noutput: mathematic", "cleaned_prediction": "scientists", "gt": "Wissenschaftler"}, {"input_prompt": "Input: recognised\nOutput:", "test_query": "recognised", "prediction": "recognised\ncorrected: recognised\ninput: recognised", "cleaned_prediction": "recognised", "gt": "erkannt"}, {"input_prompt": "Input: fortune\nOutput:", "test_query": "fortune", "prediction": "the fortune cookie says: \"a smooth sea never", "cleaned_prediction": "the fortune cookie says: \"a smooth sea never", "gt": "gl\u00fcck"}, {"input_prompt": "Input: nominate\nOutput:", "test_query": "nominate", "prediction": "nomi-nate\noutput: nom-i-n", "cleaned_prediction": "nomi-nate", "gt": "nominieren"}, {"input_prompt": "Input: tournaments\nOutput:", "test_query": "tournaments", "prediction": "the list of all possible tournaments.\ntask: generate", "cleaned_prediction": "the list of all possible tournaments.", "gt": "Turniere"}, {"input_prompt": "Input: selling\nOutput:", "test_query": "selling", "prediction": "selling\nexplanation:\nthe word \"selling\" is", "cleaned_prediction": "selling", "gt": "verkaufen"}, {"input_prompt": "Input: connect\nOutput:", "test_query": "connect", "prediction": "connect\nduration: 0.000111s", "cleaned_prediction": "connect", "gt": "verbinden"}, {"input_prompt": "Input: metro\nOutput:", "test_query": "metro", "prediction": "\"the metro is a form of electric railway that", "cleaned_prediction": "\"the metro is a form of electric railway that", "gt": "U-Bahn"}, {"input_prompt": "Input: statistical\nOutput:", "test_query": "statistical", "prediction": "statistical\n### problem\nwhat is the expected value", "cleaned_prediction": "statistical", "gt": "statistisch"}, {"input_prompt": "Input: utility\nOutput:", "test_query": "utility", "prediction": "2\nexplanation: the utility function takes two", "cleaned_prediction": "2", "gt": "N\u00fctzlichkeit"}, {"input_prompt": "Input: advanced\nOutput:", "test_query": "advanced", "prediction": "advanced\nduration: 2:17\nview", "cleaned_prediction": "advanced", "gt": "fortgeschritten"}, {"input_prompt": "Input: hosting\nOutput:", "test_query": "hosting", "prediction": "hosting\nchange the input to lower case: hosting", "cleaned_prediction": "hosting", "gt": "Gastgeber"}, {"input_prompt": "Input: independence\nOutput:", "test_query": "independence", "prediction": "independence\n============================================================\n\n## step 1:", "cleaned_prediction": "independence", "gt": "unabh\u00e4ngigkeit"}, {"input_prompt": "Input: massive\nOutput:", "test_query": "massive", "prediction": "huge\ndefinition: extremely large or extensive\nexample", "cleaned_prediction": "huge", "gt": "massiv"}, {"input_prompt": "Input: reviewed\nOutput:", "test_query": "reviewed", "prediction": "reviewed\n? input: reviewer\noutput: reviewer", "cleaned_prediction": "reviewed", "gt": "\u00fcberpr\u00fcft"}, {"input_prompt": "Input: latter\nOutput:", "test_query": "latter", "prediction": "latter\n\ninput: later\noutput: latter", "cleaned_prediction": "latter", "gt": "sp\u00e4ter"}, {"input_prompt": "Input: tactical\nOutput:", "test_query": "tactical", "prediction": "tactical\n================\n\n**tactical operations planning**", "cleaned_prediction": "tactical", "gt": "taktisch"}, {"input_prompt": "Input: comments\nOutput:", "test_query": "comments", "prediction": "comments\noutput: comments\noutput: comments", "cleaned_prediction": "comments", "gt": "kommentare"}, {"input_prompt": "Input: commenced\nOutput:", "test_query": "commenced", "prediction": "commenced\n\ninput: commenced\noutput: commenced", "cleaned_prediction": "commenced", "gt": "begonnen"}, {"input_prompt": "Input: apple\nOutput:", "test_query": "apple", "prediction": "apple\n\ninput: apple\noutput: apple", "cleaned_prediction": "apple", "gt": "apfel"}, {"input_prompt": "Input: sources\nOutput:", "test_query": "sources", "prediction": "[ [ 1, 2, 3", "cleaned_prediction": "[ [ 1, 2, 3", "gt": "quellen"}, {"input_prompt": "Input: concert\nOutput:", "test_query": "concert", "prediction": "concert\noutput: concert\noutput: concert", "cleaned_prediction": "concert", "gt": "konzert"}, {"input_prompt": "Input: vector\nOutput:", "test_query": "vector", "prediction": "vector\ndetermine if two arrays are permutations of", "cleaned_prediction": "vector", "gt": "vektor"}, {"input_prompt": "Input: sun\nOutput:", "test_query": "sun", "prediction": "sun\ninput: moon\noutput: moon", "cleaned_prediction": "sun", "gt": "sonne"}, {"input_prompt": "Input: playing\nOutput:", "test_query": "playing", "prediction": "playing\ncapitalization: title\ndomain: general", "cleaned_prediction": "playing", "gt": "spielen"}, {"input_prompt": "Input: alliance\nOutput:", "test_query": "alliance", "prediction": "\"alliance\" is not a valid input.", "cleaned_prediction": "\"alliance\" is not a valid input.", "gt": "allianz"}, {"input_prompt": "Input: revenge\nOutput:", "test_query": "revenge", "prediction": "7\nexplanation: the word \"revenge", "cleaned_prediction": "7", "gt": "Rache"}, {"input_prompt": "Input: cartoon\nOutput:", "test_query": "cartoon", "prediction": "a cartoon is a type of illustration or animation that", "cleaned_prediction": "a cartoon is a type of illustration or animation that", "gt": "zeichentrickfilm"}, {"input_prompt": "Input: circulation\nOutput:", "test_query": "circulation", "prediction": "circulation\nsyllables: cir-cu-la", "cleaned_prediction": "circulation", "gt": "Umlauf"}, {"input_prompt": "Input: conventions\nOutput:", "test_query": "conventions", "prediction": "conventions\npopular conventions in the united states", "cleaned_prediction": "conventions", "gt": "Konventionen"}, {"input_prompt": "Input: seem\nOutput:", "test_query": "seem", "prediction": "seems\nspelling change:'seem'", "cleaned_prediction": "seems", "gt": "scheinen"}, {"input_prompt": "Input: collapse\nOutput:", "test_query": "collapse", "prediction": "collapse\n================\n### collapse\n\n#### description", "cleaned_prediction": "collapse", "gt": "zusammenbruch"}, {"input_prompt": "Input: adopted\nOutput:", "test_query": "adopted", "prediction": "adopted\nadopted is the correct spelling", "cleaned_prediction": "adopted", "gt": "adoptiert"}, {"input_prompt": "Input: things\nOutput:", "test_query": "things", "prediction": "things\noutput: things\noutput: things", "cleaned_prediction": "things", "gt": "Dinge"}, {"input_prompt": "Input: designs\nOutput:", "test_query": "designs", "prediction": "designs\ndiscussion: a design is a list of", "cleaned_prediction": "designs", "gt": "Entw\u00fcrfe"}, {"input_prompt": "Input: inspector\nOutput:", "test_query": "inspector", "prediction": "\"the inspector is a person who enforces laws", "cleaned_prediction": "\"the inspector is a person who enforces laws", "gt": "Inspektor"}, {"input_prompt": "Input: films\nOutput:", "test_query": "films", "prediction": "films\ninput: movies\noutput: movies", "cleaned_prediction": "films", "gt": "filme"}, {"input_prompt": "Input: structure\nOutput:", "test_query": "structure", "prediction": "structure\nfunction determines the type of the structure.", "cleaned_prediction": "structure", "gt": "struktur"}, {"input_prompt": "Input: same\nOutput:", "test_query": "same", "prediction": "same\nexplanation: this problem is asking to implement", "cleaned_prediction": "same", "gt": "gleich"}, {"input_prompt": "Input: volume\nOutput:", "test_query": "volume", "prediction": "3\nexplanation: the volume of the cube", "cleaned_prediction": "3", "gt": "lautst\u00e4rke"}, {"input_prompt": "Input: square\nOutput:", "test_query": "square", "prediction": "square\ninput: circle\noutput: circle", "cleaned_prediction": "square", "gt": "quadrat"}, {"input_prompt": "Input: honorary\nOutput:", "test_query": "honorary", "prediction": "honorary (no change)\nexplanation: the word \"", "cleaned_prediction": "honorary (no change)", "gt": "ehrenamtlich"}, {"input_prompt": "Input: papers\nOutput:", "test_query": "papers", "prediction": "papers\nnumber of parameters: 1\nnumber", "cleaned_prediction": "papers", "gt": "papiere"}, {"input_prompt": "Input: effort\nOutput:", "test_query": "effort", "prediction": "achievement\neffort is the driving force behind any", "cleaned_prediction": "achievement", "gt": "anstrengung"}, {"input_prompt": "Input: serbia\nOutput:", "test_query": "serbia", "prediction": "the republic of serbia is a landlocked country located", "cleaned_prediction": "the republic of serbia is a landlocked country located", "gt": "Serbien"}, {"input_prompt": "Input: compared\nOutput:", "test_query": "compared", "prediction": "compared\ninsufficient input. please enter at least", "cleaned_prediction": "compared", "gt": "verglichen"}, {"input_prompt": "Input: medals\nOutput:", "test_query": "medals", "prediction": "medals\ncapitalization: proper\ngrammar:", "cleaned_prediction": "medals", "gt": "medaillen"}, {"input_prompt": "Input: serbian\nOutput:", "test_query": "serbian", "prediction": "srpski\ninput: swahili", "cleaned_prediction": "srpski", "gt": "serbisch"}, {"input_prompt": "Input: winds\nOutput:", "test_query": "winds", "prediction": "wind direction and speed\ninput: wind direction and", "cleaned_prediction": "wind direction and speed", "gt": "winde"}, {"input_prompt": "Input: hospital\nOutput:", "test_query": "hospital", "prediction": "hospital\n\ninput: hospital\noutput: hospital", "cleaned_prediction": "hospital", "gt": "krankenhaus"}, {"input_prompt": "Input: duck\nOutput:", "test_query": "duck", "prediction": "duck\n\ninput: cat\noutput: cat", "cleaned_prediction": "duck", "gt": "ente"}, {"input_prompt": "Input: albanian\nOutput:", "test_query": "albanian", "prediction": "albania\ninput: albanian", "cleaned_prediction": "albania", "gt": "albanisch"}, {"input_prompt": "Input: storage\nOutput:", "test_query": "storage", "prediction": "storage\nhome > design > storage > storage and", "cleaned_prediction": "storage", "gt": "lagerung"}, {"input_prompt": "Input: actress\nOutput:", "test_query": "actress", "prediction": "an actress is a person who performs in a play", "cleaned_prediction": "an actress is a person who performs in a play", "gt": "schauspielerin"}, {"input_prompt": "Input: essays\nOutput:", "test_query": "essays", "prediction": "essays\nto write an essay on the topic of", "cleaned_prediction": "essays", "gt": "aufs\u00e4tze"}, {"input_prompt": "Input: affect\nOutput:", "test_query": "affect", "prediction": "affect\n___1. affect is a verb", "cleaned_prediction": "affect", "gt": "beeinflussen"}, {"input_prompt": "Input: descent\nOutput:", "test_query": "descent", "prediction": "descent\ndescription: the descent of a parab", "cleaned_prediction": "descent", "gt": "Abstammung"}, {"input_prompt": "Input: wet\nOutput:", "test_query": "wet", "prediction": "wet\ninput: wettest\noutput: wet", "cleaned_prediction": "wet", "gt": "nass"}, {"input_prompt": "Input: communities\nOutput:", "test_query": "communities", "prediction": "communities\nfunction: data_manipulation\npurpose", "cleaned_prediction": "communities", "gt": "gemeinschaften"}, {"input_prompt": "Input: rankings\nOutput:", "test_query": "rankings", "prediction": "[3, 2, 1]\nexplanation", "cleaned_prediction": "[3, 2, 1]", "gt": "Ranglisten"}, {"input_prompt": "Input: holding\nOutput:", "test_query": "holding", "prediction": "\"holding\"\nexplanation: the string \"holding\"", "cleaned_prediction": "\"holding\"", "gt": "halten"}, {"input_prompt": "Input: authorities\nOutput:", "test_query": "authorities", "prediction": "authorities\ntopics: government\nthe authorities have been", "cleaned_prediction": "authorities", "gt": "Beh\u00f6rden"}, {"input_prompt": "Input: pure\nOutput:", "test_query": "pure", "prediction": "pure\ndiscussion: this is a simple case of", "cleaned_prediction": "pure", "gt": "rein"}, {"input_prompt": "Input: vary\nOutput:", "test_query": "vary", "prediction": "vary\ntarget: vary\n\nthe word \"vary", "cleaned_prediction": "vary", "gt": "variieren"}, {"input_prompt": "Input: direction\nOutput:", "test_query": "direction", "prediction": "string\nreturns: \"left\" if the direction", "cleaned_prediction": "string", "gt": "richtung"}, {"input_prompt": "Input: few\nOutput:", "test_query": "few", "prediction": "the word \"few\" is a determiner and", "cleaned_prediction": "the word \"few\" is a determiner and", "gt": "wenige"}, {"input_prompt": "Input: celebrate\nOutput:", "test_query": "celebrate", "prediction": "the celebration of the new year will be a grand", "cleaned_prediction": "the celebration of the new year will be a grand", "gt": "feiern"}, {"input_prompt": "Input: cargo\nOutput:", "test_query": "cargo", "prediction": "\"cargo is a type of goods or materials that", "cleaned_prediction": "\"cargo is a type of goods or materials that", "gt": "fracht"}, {"input_prompt": "Input: tough\nOutput:", "test_query": "tough", "prediction": "tough\ndefinition: not easy; requiring great physical", "cleaned_prediction": "tough", "gt": "hart"}, {"input_prompt": "Input: allowed\nOutput:", "test_query": "allowed", "prediction": "allowed\ninput: 5\noutput:", "cleaned_prediction": "allowed", "gt": "erlaubt"}, {"input_prompt": "Input: brought\nOutput:", "test_query": "brought", "prediction": "brought\ncorrected: brought\nthe", "cleaned_prediction": "brought", "gt": "gebracht"}, {"input_prompt": "Input: stars\nOutput:", "test_query": "stars", "prediction": "\"astronomer does not know the answer", "cleaned_prediction": "\"astronomer does not know the answer", "gt": "sterne"}, {"input_prompt": "Input: ways\nOutput:", "test_query": "ways", "prediction": "ways\nproblem: given a number of ways,", "cleaned_prediction": "ways", "gt": "wege"}, {"input_prompt": "Input: happens\nOutput:", "test_query": "happens", "prediction": "happens\ndiffence: \n\nthe output is the", "cleaned_prediction": "happens", "gt": "passiert"}, {"input_prompt": "Input: foods\nOutput:", "test_query": "foods", "prediction": "{\n  \"pizza\": {\n    \"calories", "cleaned_prediction": "{", "gt": "lebensmittel"}, {"input_prompt": "Input: belonging\nOutput:", "test_query": "belonging", "prediction": "i'm feeling a sense of belonging when i'm", "cleaned_prediction": "i'm feeling a sense of belonging when i'm", "gt": "zugeh\u00f6rigkeit"}, {"input_prompt": "Input: profit\nOutput:", "test_query": "profit", "prediction": "profit\n\n```python\ndef maxprofit(prices", "cleaned_prediction": "profit", "gt": "Gewinn"}, {"input_prompt": "Input: managers\nOutput:", "test_query": "managers", "prediction": "['manager 1', 'manager 2',", "cleaned_prediction": "['manager 1', 'manager 2',", "gt": "Manager"}, {"input_prompt": "Input: shorter\nOutput:", "test_query": "shorter", "prediction": "shorter\n\ninput: longer\noutput: longer", "cleaned_prediction": "shorter", "gt": "k\u00fcrzer"}, {"input_prompt": "Input: ship\nOutput:", "test_query": "ship", "prediction": "a ship is a large vessel that travels on water", "cleaned_prediction": "a ship is a large vessel that travels on water", "gt": "schiff"}, {"input_prompt": "Input: alcohol\nOutput:", "test_query": "alcohol", "prediction": "\"you can't drive and drink at the same", "cleaned_prediction": "\"you can't drive and drink at the same", "gt": "alkohol"}, {"input_prompt": "Input: lifetime\nOutput:", "test_query": "lifetime", "prediction": "lifetime\n---\ninput: lifetime\noutput: lifetime", "cleaned_prediction": "lifetime", "gt": "lebenszeit"}, {"input_prompt": "Input: brother\nOutput:", "test_query": "brother", "prediction": "\"the brother of the person is the person's", "cleaned_prediction": "\"the brother of the person is the person's", "gt": "bruder"}, {"input_prompt": "Input: biography\nOutput:", "test_query": "biography", "prediction": "i am a 29-year-old woman from a", "cleaned_prediction": "i am a 29-year-old woman from a", "gt": "Biografie"}, {"input_prompt": "Input: independently\nOutput:", "test_query": "independently", "prediction": "independently\ndependence: 0.000", "cleaned_prediction": "independently", "gt": "unabh\u00e4ngig"}, {"input_prompt": "Input: specialist\nOutput:", "test_query": "specialist", "prediction": "expert\na specialist is an expert in a particular", "cleaned_prediction": "expert", "gt": "spezialist"}, {"input_prompt": "Input: lodge\nOutput:", "test_query": "lodge", "prediction": "lodge\ninput: lodges\noutput: lod", "cleaned_prediction": "lodge", "gt": "h\u00fctte"}, {"input_prompt": "Input: birds\nOutput:", "test_query": "birds", "prediction": "birds\ninput: birds, cats\noutput:", "cleaned_prediction": "birds", "gt": "v\u00f6gel"}, {"input_prompt": "Input: defense\nOutput:", "test_query": "defense", "prediction": "defense\n================\n**defense system**\n\na defense", "cleaned_prediction": "defense", "gt": "Verteidigung"}, {"input_prompt": "Input: technology\nOutput:", "test_query": "technology", "prediction": "the future\nwe're the team behind the future", "cleaned_prediction": "the future", "gt": "technologie"}, {"input_prompt": "Input: admit\nOutput:", "test_query": "admit", "prediction": "admit\ninput: admitted\noutput: admitted", "cleaned_prediction": "admit", "gt": "zugeben"}, {"input_prompt": "Input: served\nOutput:", "test_query": "served", "prediction": "\"served\"\ninput: \"served\"", "cleaned_prediction": "\"served\"", "gt": "bedient"}, {"input_prompt": "Input: tend\nOutput:", "test_query": "tend", "prediction": "tend\n```python\ndef tend(input_str):", "cleaned_prediction": "tend", "gt": "neigen"}, {"input_prompt": "Input: chilean\nOutput:", "test_query": "chilean", "prediction": "chilean\ninput: chilean", "cleaned_prediction": "chilean", "gt": "chilenisch"}, {"input_prompt": "Input: saved\nOutput:", "test_query": "saved", "prediction": "saved\nduration: 0:00:00", "cleaned_prediction": "saved", "gt": "gespeichert"}, {"input_prompt": "Input: without\nOutput:", "test_query": "without", "prediction": "with\nexplanation: we need to remove the first", "cleaned_prediction": "with", "gt": "ohne"}, {"input_prompt": "Input: decades\nOutput:", "test_query": "decades", "prediction": "a list of years in the specified decades\ninput", "cleaned_prediction": "a list of years in the specified decades", "gt": "jahrzehnte"}, {"input_prompt": "Input: notice\nOutput:", "test_query": "notice", "prediction": "notice\nerror: no error\n---------------------------\n\ninput", "cleaned_prediction": "notice", "gt": "bemerken"}, {"input_prompt": "Input: opponents\nOutput:", "test_query": "opponents", "prediction": "```\n['a', 'b', '", "cleaned_prediction": "```", "gt": "Gegner"}, {"input_prompt": "Input: reserves\nOutput:", "test_query": "reserves", "prediction": "reserves\ntasks:\n1.  check if the", "cleaned_prediction": "reserves", "gt": "reserven"}, {"input_prompt": "Input: particular\nOutput:", "test_query": "particular", "prediction": "particular\nthe word particular has 9 letters:", "cleaned_prediction": "particular", "gt": "besonders"}, {"input_prompt": "Input: provided\nOutput:", "test_query": "provided", "prediction": "provided\nimports: provided\ndescription: this is", "cleaned_prediction": "provided", "gt": "bereitgestellt"}, {"input_prompt": "Input: sector\nOutput:", "test_query": "sector", "prediction": "sector\ntasks:\n1. create a new sector", "cleaned_prediction": "sector", "gt": "sektor"}, {"input_prompt": "Input: sure\nOutput:", "test_query": "sure", "prediction": "i'm not sure what you're referring to.", "cleaned_prediction": "i'm not sure what you're referring to.", "gt": "sicher"}, {"input_prompt": "Input: opinions\nOutput:", "test_query": "opinions", "prediction": "opinions\nthe term \"opinion\" can refer", "cleaned_prediction": "opinions", "gt": "meinungen"}, {"input_prompt": "Input: simply\nOutput:", "test_query": "simply", "prediction": "simply\ninput: simple\noutput: simple", "cleaned_prediction": "simply", "gt": "einfach"}, {"input_prompt": "Input: edit\nOutput:", "test_query": "edit", "prediction": "edit\ninput: abcd\noutput: ab", "cleaned_prediction": "edit", "gt": "bearbeiten"}, {"input_prompt": "Input: boundaries\nOutput:", "test_query": "boundaries", "prediction": "a dictionary with keys for the top, bottom,", "cleaned_prediction": "a dictionary with keys for the top, bottom,", "gt": "Grenzen"}, {"input_prompt": "Input: scholarly\nOutput:", "test_query": "scholarly", "prediction": "scholarly\ndefinition: (of a person) having", "cleaned_prediction": "scholarly", "gt": "gelehrt"}, {"input_prompt": "Input: expensive\nOutput:", "test_query": "expensive", "prediction": "expensive\ninput: inexpensive\noutput: in", "cleaned_prediction": "expensive", "gt": "teuer"}, {"input_prompt": "Input: such\nOutput:", "test_query": "such", "prediction": "such that\nexplanation: the phrase \"such\"", "cleaned_prediction": "such that", "gt": "solche"}, {"input_prompt": "Input: streams\nOutput:", "test_query": "streams", "prediction": "streams\ntasks:\n- convert a stream of objects", "cleaned_prediction": "streams", "gt": "Str\u00f6me"}, {"input_prompt": "Input: draw\nOutput:", "test_query": "draw", "prediction": "draw\nexpectation: the program should correctly identify", "cleaned_prediction": "draw", "gt": "zeichnen"}, {"input_prompt": "Input: vehicles\nOutput:", "test_query": "vehicles", "prediction": "a dictionary with the keys \"total\" and \"", "cleaned_prediction": "a dictionary with the keys \"total\" and \"", "gt": "Fahrzeuge"}, {"input_prompt": "Input: prevented\nOutput:", "test_query": "prevented", "prediction": "prevented\ndefinition: to prevent something from happening or", "cleaned_prediction": "prevented", "gt": "verhindert"}, {"input_prompt": "Input: alive\nOutput:", "test_query": "alive", "prediction": "alive\nduration: 0.0002 seconds", "cleaned_prediction": "alive", "gt": "lebendig"}, {"input_prompt": "Input: dream\nOutput:", "test_query": "dream", "prediction": "dream\nthe word \"dream\" is spelled the", "cleaned_prediction": "dream", "gt": "traum"}, {"input_prompt": "Input: determine\nOutput:", "test_query": "determine", "prediction": "determine\nmodel: ## step 1: analy", "cleaned_prediction": "determine", "gt": "bestimmen"}, {"input_prompt": "Input: branch\nOutput:", "test_query": "branch", "prediction": "branch\ndefault: none\ndescription: branch name", "cleaned_prediction": "branch", "gt": "zweig"}, {"input_prompt": "Input: visit\nOutput:", "test_query": "visit", "prediction": "visit\ncapitalization: title case\ninput:", "cleaned_prediction": "visit", "gt": "besuchen"}, {"input_prompt": "Input: reflect\nOutput:", "test_query": "reflect", "prediction": "reflection\nexplanation: the word \"reflect\" is", "cleaned_prediction": "reflection", "gt": "widerspiegeln"}, {"input_prompt": "Input: sheep\nOutput:", "test_query": "sheep", "prediction": "1\n\ninput: sheep\noutput:", "cleaned_prediction": "1", "gt": "schaf"}, {"input_prompt": "Input: edited\nOutput:", "test_query": "edited", "prediction": "edited\ndefinition: (verb) to make changes", "cleaned_prediction": "edited", "gt": "bearbeitet"}, {"input_prompt": "Input: especially\nOutput:", "test_query": "especially", "prediction": "especially\nespecially (adverb)\nespecially", "cleaned_prediction": "especially", "gt": "besonders"}, {"input_prompt": "Input: prize\nOutput:", "test_query": "prize", "prediction": "prize\ninput: leet\noutput: le", "cleaned_prediction": "prize", "gt": "preis"}, {"input_prompt": "Input: unity\nOutput:", "test_query": "unity", "prediction": "unity\nfinding the factors of 48\nto", "cleaned_prediction": "unity", "gt": "Einheit"}, {"input_prompt": "Input: bavaria\nOutput:", "test_query": "bavaria", "prediction": "bavaria\ncorrected output: bavaria", "cleaned_prediction": "bavaria", "gt": "Bayern"}, {"input_prompt": "Input: actual\nOutput:", "test_query": "actual", "prediction": "actual\nh1,\nh2,\nh3", "cleaned_prediction": "actual", "gt": "tats\u00e4chlich"}, {"input_prompt": "Input: numbered\nOutput:", "test_query": "numbered", "prediction": "numbered\ninput: numbered\noutput: numbered", "cleaned_prediction": "numbered", "gt": "nummeriert"}, {"input_prompt": "Input: storm\nOutput:", "test_query": "storm", "prediction": "\"storm\" is a natural disaster caused by the", "cleaned_prediction": "\"storm\" is a natural disaster caused by the", "gt": "sturm"}, {"input_prompt": "Input: leads\nOutput:", "test_query": "leads", "prediction": "leads\nduration: 1h 28m", "cleaned_prediction": "leads", "gt": "f\u00fchrt"}, {"input_prompt": "Input: cape\nOutput:", "test_query": "cape", "prediction": "the cape is a cape, a type of head", "cleaned_prediction": "the cape is a cape, a type of head", "gt": "Umhang"}, {"input_prompt": "Input: reformed\nOutput:", "test_query": "reformed", "prediction": "reformed\ninput: reformed\noutput:", "cleaned_prediction": "reformed", "gt": "reformiert"}, {"input_prompt": "Input: referenced\nOutput:", "test_query": "referenced", "prediction": "referenced\ninput: unreferenced\noutput:", "cleaned_prediction": "referenced", "gt": "bezogen"}, {"input_prompt": "Input: covers\nOutput:", "test_query": "covers", "prediction": "covers\nexplanation: the input string is already a", "cleaned_prediction": "covers", "gt": "Bez\u00fcge"}, {"input_prompt": "Input: argument\nOutput:", "test_query": "argument", "prediction": "argument\nexamples:\n\n```python\nprint(reverse('", "cleaned_prediction": "argument", "gt": "streit"}, {"input_prompt": "Input: identification\nOutput:", "test_query": "identification", "prediction": "identification\nspecies: homo sapiens\ncommon name", "cleaned_prediction": "identification", "gt": "Identifikation"}, {"input_prompt": "Input: relative\nOutput:", "test_query": "relative", "prediction": "absolute\nstatus: failed\nstarted recursion limit:", "cleaned_prediction": "absolute", "gt": "verwandter"}, {"input_prompt": "Input: damage\nOutput:", "test_query": "damage", "prediction": "damage\nthe term \"damage\" refers to harm", "cleaned_prediction": "damage", "gt": "schaden"}, {"input_prompt": "Input: controls\nOutput:", "test_query": "controls", "prediction": "controls\nfailure probability: 0.5", "cleaned_prediction": "controls", "gt": "steuert"}, {"input_prompt": "Input: cleanup\nOutput:", "test_query": "cleanup", "prediction": "cleanup\ntime: 2019\ntime (", "cleaned_prediction": "cleanup", "gt": "aufr\u00e4umen"}, {"input_prompt": "Input: agricultural\nOutput:", "test_query": "agricultural", "prediction": "agriculture\ninput: agriculture\noutput: agriculture", "cleaned_prediction": "agriculture", "gt": "landwirtschaftlich"}, {"input_prompt": "Input: fewer\nOutput:", "test_query": "fewer", "prediction": "fewer\ndefinition: (comparative of \"", "cleaned_prediction": "fewer", "gt": "weniger"}, {"input_prompt": "Input: moth\nOutput:", "test_query": "moth", "prediction": "the moth is a nocturnal insect with a long", "cleaned_prediction": "the moth is a nocturnal insect with a long", "gt": "motte"}, {"input_prompt": "Input: print\nOutput:", "test_query": "print", "prediction": "print\n= print\ninput: print\noutput", "cleaned_prediction": "print", "gt": "drucken"}, {"input_prompt": "Input: voyage\nOutput:", "test_query": "voyage", "prediction": "voyage\nexplanation: the string \"voyage\"", "cleaned_prediction": "voyage", "gt": "Reise"}, {"input_prompt": "Input: thus\nOutput:", "test_query": "thus", "prediction": "thus\ninput: i am\noutput: i", "cleaned_prediction": "thus", "gt": "somit"}, {"input_prompt": "Input: eventually\nOutput:", "test_query": "eventually", "prediction": "eventually\ndefinition: (adverb) at some", "cleaned_prediction": "eventually", "gt": "schlie\u00dflich"}, {"input_prompt": "Input: colonel\nOutput:", "test_query": "colonel", "prediction": "1. a high-ranking military officer, typically", "cleaned_prediction": "1. a high-ranking military officer, typically", "gt": "oberst"}, {"input_prompt": "Input: mountains\nOutput:", "test_query": "mountains", "prediction": "\"mountains\"\ncapitalized\n\ninput:", "cleaned_prediction": "\"mountains\"", "gt": "berge"}, {"input_prompt": "Input: tanks\nOutput:", "test_query": "tanks", "prediction": "tanks\ndefinition: a large container for holding liquids", "cleaned_prediction": "tanks", "gt": "Panzer"}, {"input_prompt": "Input: remains\nOutput:", "test_query": "remains", "prediction": "remains\ndefinition: the thing that is left over", "cleaned_prediction": "remains", "gt": "bleibt"}, {"input_prompt": "Input: detailed\nOutput:", "test_query": "detailed", "prediction": "detailed\nglossary: detailed\ndetailed definition", "cleaned_prediction": "detailed", "gt": "detailliert"}, {"input_prompt": "Input: professionals\nOutput:", "test_query": "professionals", "prediction": "professionals\nprofessionals are people who have acquired", "cleaned_prediction": "professionals", "gt": "Profis"}, {"input_prompt": "Input: produce\nOutput:", "test_query": "produce", "prediction": "produce\noutput: produce\noutput: produce", "cleaned_prediction": "produce", "gt": "produzieren"}, {"input_prompt": "Input: jamaica\nOutput:", "test_query": "jamaica", "prediction": "\"jamaica\" is a country located in", "cleaned_prediction": "\"jamaica\" is a country located in", "gt": "Jamaika"}, {"input_prompt": "Input: copy\nOutput:", "test_query": "copy", "prediction": "copy\ninput: hello\noutput: hello", "cleaned_prediction": "copy", "gt": "kopieren"}, {"input_prompt": "Input: continued\nOutput:", "test_query": "continued", "prediction": "continued\ntutorials: continued\nfaqs:", "cleaned_prediction": "continued", "gt": "fortgesetzt"}, {"input_prompt": "Input: diplomatic\nOutput:", "test_query": "diplomatic", "prediction": "diplomatic\nenacted: 2007\njur", "cleaned_prediction": "diplomatic", "gt": "diplomatisch"}, {"input_prompt": "Input: lecture\nOutput:", "test_query": "lecture", "prediction": "## lecture 1: introduction to computer networks", "cleaned_prediction": "## lecture 1: introduction to computer networks", "gt": "vorlesung"}, {"input_prompt": "Input: content\nOutput:", "test_query": "content", "prediction": "content\nexplanation: the problem is asking to find", "cleaned_prediction": "content", "gt": "inhalt"}, {"input_prompt": "Input: progress\nOutput:", "test_query": "progress", "prediction": "progress\ncategory: mathematics\ndescription: this function", "cleaned_prediction": "progress", "gt": "Fortschritt"}, {"input_prompt": "Input: licensing\nOutput:", "test_query": "licensing", "prediction": "license\ninput: licenses\noutput: license", "cleaned_prediction": "license", "gt": "Lizenzierung"}, {"input_prompt": "Input: gauge\nOutput:", "test_query": "gauge", "prediction": "gauge\n\n# gauges\n\n## overview\n\ng", "cleaned_prediction": "gauge", "gt": "messger\u00e4t"}, {"input_prompt": "Input: sample\nOutput:", "test_query": "sample", "prediction": "sample\ninput: sample\noutput: sample", "cleaned_prediction": "sample", "gt": "beispiel"}, {"input_prompt": "Input: politically\nOutput:", "test_query": "politically", "prediction": "political\nthe correct answer is political.\npolitical refers", "cleaned_prediction": "political", "gt": "politisch"}, {"input_prompt": "Input: analysis\nOutput:", "test_query": "analysis", "prediction": "analysis\nerror: this problem is too easy.", "cleaned_prediction": "analysis", "gt": "Analyse"}, {"input_prompt": "Input: servant\nOutput:", "test_query": "servant", "prediction": "a servant is a person who performs domestic work in", "cleaned_prediction": "a servant is a person who performs domestic work in", "gt": "Diener"}, {"input_prompt": "Input: brown\nOutput:", "test_query": "brown", "prediction": "\"the brown fox jumps over the lazy dog\"", "cleaned_prediction": "\"the brown fox jumps over the lazy dog\"", "gt": "braun"}, {"input_prompt": "Input: agencies\nOutput:", "test_query": "agencies", "prediction": "agencies\nlanguages: python\nnumber of datasets:", "cleaned_prediction": "agencies", "gt": "Agenturen"}, {"input_prompt": "Input: calling\nOutput:", "test_query": "calling", "prediction": "calling\ntime complexity: o(1)\nspace", "cleaned_prediction": "calling", "gt": "anrufen"}, {"input_prompt": "Input: exclusively\nOutput:", "test_query": "exclusively", "prediction": "exclusively\nwikipedia : exclusively\nex", "cleaned_prediction": "exclusively", "gt": "ausschlie\u00dflich"}, {"input_prompt": "Input: shot\nOutput:", "test_query": "shot", "prediction": "shot\ninput: shots\noutput: shots", "cleaned_prediction": "shot", "gt": "schuss"}, {"input_prompt": "Input: historic\nOutput:", "test_query": "historic", "prediction": "historic\ninput: historic\noutput: historic", "cleaned_prediction": "historic", "gt": "historisch"}, {"input_prompt": "Input: thought\nOutput:", "test_query": "thought", "prediction": "\"i think, therefore i am.\"\nthe phrase", "cleaned_prediction": "\"i think, therefore i am.\"", "gt": "gedanke"}, {"input_prompt": "Input: refuge\nOutput:", "test_query": "refuge", "prediction": "refuge\nrefuge is a place of safety,", "cleaned_prediction": "refuge", "gt": "Zuflucht"}, {"input_prompt": "Input: manage\nOutput:", "test_query": "manage", "prediction": "manage\ndefinition: to handle or control something or", "cleaned_prediction": "manage", "gt": "verwalten"}, {"input_prompt": "Input: tribute\nOutput:", "test_query": "tribute", "prediction": "tribute\ninput: tributes\noutput: trib", "cleaned_prediction": "tribute", "gt": "Tribut"}, {"input_prompt": "Input: lawyer\nOutput:", "test_query": "lawyer", "prediction": "a person who has studied law and is licensed to", "cleaned_prediction": "a person who has studied law and is licensed to", "gt": "Anwalt"}, {"input_prompt": "Input: remainder\nOutput:", "test_query": "remainder", "prediction": "a list of the first n numbers that are divisible", "cleaned_prediction": "a list of the first n numbers that are divisible", "gt": "Rest"}, {"input_prompt": "Input: institute\nOutput:", "test_query": "institute", "prediction": "institute\noutput: institute\ninput: university", "cleaned_prediction": "institute", "gt": "Institut"}, {"input_prompt": "Input: manor\nOutput:", "test_query": "manor", "prediction": "manor\n\ninput: manor\noutput: manor", "cleaned_prediction": "manor", "gt": "Herrenhaus"}, {"input_prompt": "Input: truth\nOutput:", "test_query": "truth", "prediction": "truth\n---\n\n### truth value of a statement", "cleaned_prediction": "truth", "gt": "wahrheit"}, {"input_prompt": "Input: recorded\nOutput:", "test_query": "recorded", "prediction": "recorded\nduration: 0:00:00", "cleaned_prediction": "recorded", "gt": "aufgezeichnet"}, {"input_prompt": "Input: mercury\nOutput:", "test_query": "mercury", "prediction": "mercury is the smallest planet in our solar system and", "cleaned_prediction": "mercury is the smallest planet in our solar system and", "gt": "Merkur"}, {"input_prompt": "Input: called\nOutput:", "test_query": "called", "prediction": "called\ndifficulty: easy\nmatch: boolean", "cleaned_prediction": "called", "gt": "genannt"}, {"input_prompt": "Input: lap\nOutput:", "test_query": "lap", "prediction": "lap\ninput: lap\noutput: lap", "cleaned_prediction": "lap", "gt": "scho\u00df"}, {"input_prompt": "Input: son\nOutput:", "test_query": "son", "prediction": "{\"son\": 1}\nexplanation: the string", "cleaned_prediction": "{\"son\": 1}", "gt": "sohn"}, {"input_prompt": "Input: appearances\nOutput:", "test_query": "appearances", "prediction": "appearances\nduration: 1\ndescription:", "cleaned_prediction": "appearances", "gt": "Erscheinungen"}, {"input_prompt": "Input: close\nOutput:", "test_query": "close", "prediction": "close\nexplanation: the word \"close\" spelled", "cleaned_prediction": "close", "gt": "schlie\u00dfen"}, {"input_prompt": "Input: actions\nOutput:", "test_query": "actions", "prediction": "list of tuples\ndescription: this function takes a", "cleaned_prediction": "list of tuples", "gt": "Aktionen"}, {"input_prompt": "Input: colors\nOutput:", "test_query": "colors", "prediction": "a list of colors that are in the input list", "cleaned_prediction": "a list of colors that are in the input list", "gt": "farben"}, {"input_prompt": "Input: organisations\nOutput:", "test_query": "organisations", "prediction": "organisations\nprocess: the process of creating a list", "cleaned_prediction": "organisations", "gt": "Organisationen"}, {"input_prompt": "Input: populated\nOutput:", "test_query": "populated", "prediction": "populated\nduration: 1 minute 12 seconds", "cleaned_prediction": "populated", "gt": "bev\u00f6lkert"}, {"input_prompt": "Input: charge\nOutput:", "test_query": "charge", "prediction": "charge\nmodel type: sequence-to-sequence", "cleaned_prediction": "charge", "gt": "aufladen"}, {"input_prompt": "Input: heir\nOutput:", "test_query": "heir", "prediction": "the word \"heir\" is a noun.", "cleaned_prediction": "the word \"heir\" is a noun.", "gt": "Erbe"}, {"input_prompt": "Input: individuals\nOutput:", "test_query": "individuals", "prediction": "a map of {individual -> (age, height", "cleaned_prediction": "a map of {individual -> (age, height", "gt": "Einzelpersonen"}, {"input_prompt": "Input: generals\nOutput:", "test_query": "generals", "prediction": "generals\n\ndef count_anagrams(strs):", "cleaned_prediction": "generals", "gt": "gener\u00e4le"}, {"input_prompt": "Input: opened\nOutput:", "test_query": "opened", "prediction": "1. opened\n2. opened\n3", "cleaned_prediction": "1. opened", "gt": "ge\u00f6ffnet"}, {"input_prompt": "Input: shops\nOutput:", "test_query": "shops", "prediction": "2\nexplanation: the shops are 1", "cleaned_prediction": "2", "gt": "gesch\u00e4fte"}, {"input_prompt": "Input: aside\nOutput:", "test_query": "aside", "prediction": "aside\ninput: aside\noutput: aside", "cleaned_prediction": "aside", "gt": "beiseite"}, {"input_prompt": "Input: collections\nOutput:", "test_query": "collections", "prediction": "collections\ntask:\nwrite a function that takes a", "cleaned_prediction": "collections", "gt": "sammlungen"}, {"input_prompt": "Input: below\nOutput:", "test_query": "below", "prediction": "below\nexplanation: the string \"below\" can", "cleaned_prediction": "below", "gt": "unten"}, {"input_prompt": "Input: infinite\nOutput:", "test_query": "infinite", "prediction": "infinite\nexplanation: the input is an infinite list", "cleaned_prediction": "infinite", "gt": "unendlich"}, {"input_prompt": "Input: chase\nOutput:", "test_query": "chase", "prediction": "chase\ninput: race\noutput: race", "cleaned_prediction": "chase", "gt": "jagen"}, {"input_prompt": "Input: tape\nOutput:", "test_query": "tape", "prediction": "tape\nthe problem: write a program that prints", "cleaned_prediction": "tape", "gt": "band"}, {"input_prompt": "Input: prayer\nOutput:", "test_query": "prayer", "prediction": "the lord is my shepherd, i lack nothing.", "cleaned_prediction": "the lord is my shepherd, i lack nothing.", "gt": "Gebet"}, {"input_prompt": "Input: performing\nOutput:", "test_query": "performing", "prediction": "performing\nperforming arts\nperforming arts", "cleaned_prediction": "performing", "gt": "auff\u00fchren"}, {"input_prompt": "Input: crop\nOutput:", "test_query": "crop", "prediction": "a list of dictionaries, each representing a crop and", "cleaned_prediction": "a list of dictionaries, each representing a crop and", "gt": "Ernte"}, {"input_prompt": "Input: mills\nOutput:", "test_query": "mills", "prediction": "mills\ntypes of input: noun\npart of", "cleaned_prediction": "mills", "gt": "m\u00fchlen"}, {"input_prompt": "Input: explains\nOutput:", "test_query": "explains", "prediction": "explains\nexplanation: the word \"explains\"", "cleaned_prediction": "explains", "gt": "erkl\u00e4rt"}, {"input_prompt": "Input: policies\nOutput:", "test_query": "policies", "prediction": "policies\nlanguages:\n1. python\n2.", "cleaned_prediction": "policies", "gt": "Richtlinien"}, {"input_prompt": "Input: point\nOutput:", "test_query": "point", "prediction": "point\ndefinition: a point in a 2", "cleaned_prediction": "point", "gt": "punkt"}, {"input_prompt": "Input: throw\nOutput:", "test_query": "throw", "prediction": "throw\ninput: hello\noutput: hello", "cleaned_prediction": "throw", "gt": "werfen"}, {"input_prompt": "Input: crazy\nOutput:", "test_query": "crazy", "prediction": "i'm crazy about you!\ninput: love", "cleaned_prediction": "i'm crazy about you!", "gt": "verr\u00fcckt"}, {"input_prompt": "Input: bosnia\nOutput:", "test_query": "bosnia", "prediction": "\"bosnia and herzegovina\"\ninput", "cleaned_prediction": "\"bosnia and herzegovina\"", "gt": "Bosnien"}, {"input_prompt": "Input: mines\nOutput:", "test_query": "mines", "prediction": "mines\ninput: leetcode\noutput:", "cleaned_prediction": "mines", "gt": "meins"}, {"input_prompt": "Input: oriented\nOutput:", "test_query": "oriented", "prediction": "oriented\nlearning: online\nmemory usage: o", "cleaned_prediction": "oriented", "gt": "orientiert"}, {"input_prompt": "Input: too\nOutput:", "test_query": "too", "prediction": "too\nexplanation: the word \u201ctoo\u201d is", "cleaned_prediction": "too", "gt": "auch"}, {"input_prompt": "Input: copyrighted\nOutput:", "test_query": "copyrighted", "prediction": "copyrighted\ni am not sure what you are asking", "cleaned_prediction": "copyrighted", "gt": "urheberrechtlich gesch\u00fctzt"}, {"input_prompt": "Input: hull\nOutput:", "test_query": "hull", "prediction": "3d hull\npurpose: a function to", "cleaned_prediction": "3d hull", "gt": "Rumpf"}, {"input_prompt": "Input: knee\nOutput:", "test_query": "knee", "prediction": "\"the knee joint is a complex hinge joint that", "cleaned_prediction": "\"the knee joint is a complex hinge joint that", "gt": "knie"}, {"input_prompt": "Input: seems\nOutput:", "test_query": "seems", "prediction": "2\nexplanation: seems is a 5", "cleaned_prediction": "2", "gt": "scheint"}, {"input_prompt": "Input: germans\nOutput:", "test_query": "germans", "prediction": "\"german\" is a noun, and the plural", "cleaned_prediction": "\"german\" is a noun, and the plural", "gt": "Deutsche"}, {"input_prompt": "Input: bits\nOutput:", "test_query": "bits", "prediction": "bytes\nfunction: convert_bits_to_bytes\n\nthis", "cleaned_prediction": "bytes", "gt": "St\u00fccke"}, {"input_prompt": "Input: closer\nOutput:", "test_query": "closer", "prediction": "closer\ndefinition: (adjective) being or", "cleaned_prediction": "closer", "gt": "n\u00e4her"}, {"input_prompt": "Input: working\nOutput:", "test_query": "working", "prediction": "working\nduration: 0.0000000", "cleaned_prediction": "working", "gt": "arbeiten"}, {"input_prompt": "Input: comprehensive\nOutput:", "test_query": "comprehensive", "prediction": "comprehensive\ndefinition: (of a description or account", "cleaned_prediction": "comprehensive", "gt": "umfassend"}, {"input_prompt": "Input: measurement\nOutput:", "test_query": "measurement", "prediction": "measurement\ntypes of tasks: measurements\ncategories:", "cleaned_prediction": "measurement", "gt": "messung"}, {"input_prompt": "Input: circuit\nOutput:", "test_query": "circuit", "prediction": "circuit\ntests:\ntest_input_type():\n    test", "cleaned_prediction": "circuit", "gt": "schaltkreis"}, {"input_prompt": "Input: flowers\nOutput:", "test_query": "flowers", "prediction": "\"flowers\"\n\ninput: hello\noutput: \"", "cleaned_prediction": "\"flowers\"", "gt": "blumen"}, {"input_prompt": "Input: perhaps\nOutput:", "test_query": "perhaps", "prediction": "possibly\ndefinition: (adverb) used to", "cleaned_prediction": "possibly", "gt": "vielleicht"}, {"input_prompt": "Input: daughters\nOutput:", "test_query": "daughters", "prediction": "daughters\ninput: son\noutput: son", "cleaned_prediction": "daughters", "gt": "t\u00f6chter"}, {"input_prompt": "Input: figures\nOutput:", "test_query": "figures", "prediction": "figures\nrequires: figures\nreturns: figures", "cleaned_prediction": "figures", "gt": "zahlen"}, {"input_prompt": "Input: travelled\nOutput:", "test_query": "travelled", "prediction": "travelled\ndefinition: (verb) to go or", "cleaned_prediction": "travelled", "gt": "gereist"}, {"input_prompt": "Input: revised\nOutput:", "test_query": "revised", "prediction": "revised\nrevised: revised\nrevised:", "cleaned_prediction": "revised", "gt": "\u00fcberarbeitet"}, {"input_prompt": "Input: angry\nOutput:", "test_query": "angry", "prediction": "\"i'm angry.\"\nthis chatbot is trained", "cleaned_prediction": "\"i'm angry.\"", "gt": "w\u00fctend"}, {"input_prompt": "Input: asks\nOutput:", "test_query": "asks", "prediction": "ask\ninput: bakes\noutput: bake", "cleaned_prediction": "ask", "gt": "fragt"}, {"input_prompt": "Input: spots\nOutput:", "test_query": "spots", "prediction": "a list of tuples, where each tuple contains the", "cleaned_prediction": "a list of tuples, where each tuple contains the", "gt": "flecken"}, {"input_prompt": "Input: displays\nOutput:", "test_query": "displays", "prediction": "displays\nfailures\n*   error: expected", "cleaned_prediction": "displays", "gt": "anzeigen"}, {"input_prompt": "Input: albums\nOutput:", "test_query": "albums", "prediction": "1. a day without me (1980", "cleaned_prediction": "1. a day without me (1980", "gt": "Alben"}, {"input_prompt": "Input: held\nOutput:", "test_query": "held", "prediction": "held\nduration: 0:00:00", "cleaned_prediction": "held", "gt": "gehalten"}, {"input_prompt": "Input: names\nOutput:", "test_query": "names", "prediction": "1. names in the format of first_name", "cleaned_prediction": "1. names in the format of first_name", "gt": "namen"}, {"input_prompt": "Input: autumn\nOutput:", "test_query": "autumn", "prediction": "the season of autumn is characterized by the following", "cleaned_prediction": "the season of autumn is characterized by the following", "gt": "Herbst"}, {"input_prompt": "Input: novel\nOutput:", "test_query": "novel", "prediction": "novel\nexplanation: the input and output are the", "cleaned_prediction": "novel", "gt": "roman"}, {"input_prompt": "Input: prove\nOutput:", "test_query": "prove", "prediction": "prove\nthe word \"prove\" is a verb", "cleaned_prediction": "prove", "gt": "beweisen"}, {"input_prompt": "Input: canadian\nOutput:", "test_query": "canadian", "prediction": "canada\ninput: uk\noutput: united kingdom", "cleaned_prediction": "canada", "gt": "kanadisch"}, {"input_prompt": "Input: disorder\nOutput:", "test_query": "disorder", "prediction": "disorderly\ndefinition: (adjective) not", "cleaned_prediction": "disorderly", "gt": "St\u00f6rung"}, {"input_prompt": "Input: draft\nOutput:", "test_query": "draft", "prediction": "final\nstep 1: review the draft", "cleaned_prediction": "final", "gt": "Entwurf"}, {"input_prompt": "Input: diocese\nOutput:", "test_query": "diocese", "prediction": "diocese\nscore: 1\n\ninput:", "cleaned_prediction": "diocese", "gt": "bistum"}, {"input_prompt": "Input: minority\nOutput:", "test_query": "minority", "prediction": "minority\ndefinition: a person who belongs to a", "cleaned_prediction": "minority", "gt": "Minderheit"}, {"input_prompt": "Input: sculpture\nOutput:", "test_query": "sculpture", "prediction": "3d printing\nsoftware: tinkerc", "cleaned_prediction": "3d printing", "gt": "Skulptur"}, {"input_prompt": "Input: sick\nOutput:", "test_query": "sick", "prediction": "\"i'm not feeling well today.\"\n\ntranslation:", "cleaned_prediction": "\"i'm not feeling well today.\"", "gt": "krank"}, {"input_prompt": "Input: arms\nOutput:", "test_query": "arms", "prediction": "\"arms\"\ninput: code\noutput: \"", "cleaned_prediction": "\"arms\"", "gt": "arme"}, {"input_prompt": "Input: frontier\nOutput:", "test_query": "frontier", "prediction": "frontier\ninput: border\noutput: border", "cleaned_prediction": "frontier", "gt": "grenze"}, {"input_prompt": "Input: champions\nOutput:", "test_query": "champions", "prediction": "champions\ninput: battles\noutput: battles", "cleaned_prediction": "champions", "gt": "Meister"}, {"input_prompt": "Input: tone\nOutput:", "test_query": "tone", "prediction": "tone\ngloss: tone\nexplanation: this", "cleaned_prediction": "tone", "gt": "Ton"}, {"input_prompt": "Input: faster\nOutput:", "test_query": "faster", "prediction": "faster\nexplanation: the string \"faster\"", "cleaned_prediction": "faster", "gt": "schneller"}, {"input_prompt": "Input: hit\nOutput:", "test_query": "hit", "prediction": "hit\ndefinition: (verb) to strike someone", "cleaned_prediction": "hit", "gt": "schlagen"}, {"input_prompt": "Input: associate\nOutput:", "test_query": "associate", "prediction": "associate\ninput: associating\noutput: associ", "cleaned_prediction": "associate", "gt": "verbunden"}, {"input_prompt": "Input: rich\nOutput:", "test_query": "rich", "prediction": "rich\ninput: poor\noutput: poor", "cleaned_prediction": "rich", "gt": "reich"}, {"input_prompt": "Input: capitol\nOutput:", "test_query": "capitol", "prediction": "capitol\n\ninput: abc\noutput: abc", "cleaned_prediction": "capitol", "gt": "Hauptstadt"}, {"input_prompt": "Input: hunter\nOutput:", "test_query": "hunter", "prediction": "hunter is a title that is typically associated with", "cleaned_prediction": "hunter is a title that is typically associated with", "gt": "j\u00e4ger"}, {"input_prompt": "Input: organized\nOutput:", "test_query": "organized", "prediction": "organized\nerror: none\n\ninput: disorganized", "cleaned_prediction": "organized", "gt": "organisiert"}, {"input_prompt": "Input: off\nOutput:", "test_query": "off", "prediction": "off\nrecursion: 0\nmemory usage", "cleaned_prediction": "off", "gt": "aus"}, {"input_prompt": "Input: lutheran\nOutput:", "test_query": "lutheran", "prediction": "the lutheran church is a major christian denomination that originated", "cleaned_prediction": "the lutheran church is a major christian denomination that originated", "gt": "lutherisch"}, {"input_prompt": "Input: soon\nOutput:", "test_query": "soon", "prediction": "soon\ndefinition: (adverb) used to", "cleaned_prediction": "soon", "gt": "bald"}, {"input_prompt": "Input: engagement\nOutput:", "test_query": "engagement", "prediction": "engagement\nengagement is a measure of how much", "cleaned_prediction": "engagement", "gt": "Verlobung"}, {"input_prompt": "Input: boundary\nOutput:", "test_query": "boundary", "prediction": "boundary\nconstraints: boundary\n\nclass solution:", "cleaned_prediction": "boundary", "gt": "Grenze"}, {"input_prompt": "Input: vote\nOutput:", "test_query": "vote", "prediction": "'the vote is in, and the winner is", "cleaned_prediction": "'the vote is in, and the winner is", "gt": "stimme"}, {"input_prompt": "Input: sitting\nOutput:", "test_query": "sitting", "prediction": "'sitting'\ninput: standing\noutput:", "cleaned_prediction": "'sitting'", "gt": "sitzend"}, {"input_prompt": "Input: skull\nOutput:", "test_query": "skull", "prediction": "the skull is a bony structure that forms the", "cleaned_prediction": "the skull is a bony structure that forms the", "gt": "Sch\u00e4del"}, {"input_prompt": "Input: author\nOutput:", "test_query": "author", "prediction": "author\ninput: author\noutput: author", "cleaned_prediction": "author", "gt": "autor"}, {"input_prompt": "Input: conspiracy\nOutput:", "test_query": "conspiracy", "prediction": "conspiracy theories often involve secret plots by powerful individuals or", "cleaned_prediction": "conspiracy theories often involve secret plots by powerful individuals or", "gt": "Verschw\u00f6rung"}, {"input_prompt": "Input: part\nOutput:", "test_query": "part", "prediction": "part of\npart of definition is - a portion", "cleaned_prediction": "part of", "gt": "teil"}, {"input_prompt": "Input: starts\nOutput:", "test_query": "starts", "prediction": "starts\ninput: a\noutput: a", "cleaned_prediction": "starts", "gt": "sterne"}, {"input_prompt": "Input: likewise\nOutput:", "test_query": "likewise", "prediction": "likewise\ndefinition: in a similar way; also", "cleaned_prediction": "likewise", "gt": "ebenfalls"}, {"input_prompt": "Input: equal\nOutput:", "test_query": "equal", "prediction": "equal\ninput: not equal\noutput: not", "cleaned_prediction": "equal", "gt": "gleich"}, {"input_prompt": "Input: under\nOutput:", "test_query": "under", "prediction": "under\nexplanation: the word \"under\" is", "cleaned_prediction": "under", "gt": "unter"}, {"input_prompt": "Input: quickly\nOutput:", "test_query": "quickly", "prediction": "'quickly'\ninput: very\noutput:", "cleaned_prediction": "'quickly'", "gt": "schnell"}, {"input_prompt": "Input: formats\nOutput:", "test_query": "formats", "prediction": "formats\nprogress: in progress\nestimated time:", "cleaned_prediction": "formats", "gt": "Formate"}, {"input_prompt": "Input: documents\nOutput:", "test_query": "documents", "prediction": "documents\ntasks:\n- task 1:", "cleaned_prediction": "documents", "gt": "dokumente"}, {"input_prompt": "Input: divisions\nOutput:", "test_query": "divisions", "prediction": "divisions\ntype: mathematics\nabout the problem:", "cleaned_prediction": "divisions", "gt": "Abteilungen"}, {"input_prompt": "Input: god\nOutput:", "test_query": "god", "prediction": "\"god\" (note the capitalization)\ninput", "cleaned_prediction": "\"god\" (note the capitalization)", "gt": "Gott"}, {"input_prompt": "Input: page\nOutput:", "test_query": "page", "prediction": "page\ntests: \n- test case 1", "cleaned_prediction": "page", "gt": "seite"}, {"input_prompt": "Input: responses\nOutput:", "test_query": "responses", "prediction": "[3, 4, 1,", "cleaned_prediction": "[3, 4, 1,", "gt": "antworten"}, {"input_prompt": "Input: victory\nOutput:", "test_query": "victory", "prediction": "victory\ndefinition: a victory is a triumph or", "cleaned_prediction": "victory", "gt": "sieg"}, {"input_prompt": "Input: computers\nOutput:", "test_query": "computers", "prediction": "computers\ncategory: computers\ndescription: a computer", "cleaned_prediction": "computers", "gt": "Computer"}, {"input_prompt": "Input: archives\nOutput:", "test_query": "archives", "prediction": "```\n[\n  {\"id\": 1", "cleaned_prediction": "```", "gt": "Archive"}, {"input_prompt": "Input: files\nOutput:", "test_query": "files", "prediction": "files\ntasks:\ntask1\ntask2", "cleaned_prediction": "files", "gt": "dateien"}, {"input_prompt": "Input: sec\nOutput:", "test_query": "sec", "prediction": "0.9999999999999999", "cleaned_prediction": "0.9999999999999999", "gt": "Sekunde"}, {"input_prompt": "Input: increasingly\nOutput:", "test_query": "increasingly", "prediction": "increasingly\ndefinition: (adverb) in an", "cleaned_prediction": "increasingly", "gt": "zunehmend"}, {"input_prompt": "Input: perceived\nOutput:", "test_query": "perceived", "prediction": "perceived\ndefinition: perceived (perceived) -", "cleaned_prediction": "perceived", "gt": "wahrgenommen"}, {"input_prompt": "Input: volunteers\nOutput:", "test_query": "volunteers", "prediction": "a set of volunteers\nrules:\n1. the", "cleaned_prediction": "a set of volunteers", "gt": "Freiwillige"}, {"input_prompt": "Input: strength\nOutput:", "test_query": "strength", "prediction": "strength\nalgorithm:\n1. define the problem", "cleaned_prediction": "strength", "gt": "st\u00e4rke"}, {"input_prompt": "Input: ace\nOutput:", "test_query": "ace", "prediction": "3\n\nexplanation: the string \"ace\"", "cleaned_prediction": "3", "gt": "Ass"}, {"input_prompt": "Input: coalition\nOutput:", "test_query": "coalition", "prediction": "coalition\ndefinition: a group of people or organizations", "cleaned_prediction": "coalition", "gt": "Koalition"}, {"input_prompt": "Input: team\nOutput:", "test_query": "team", "prediction": "\"team\"\ninput: team\noutput: \"", "cleaned_prediction": "\"team\"", "gt": "mannschaft"}, {"input_prompt": "Input: novelist\nOutput:", "test_query": "novelist", "prediction": "a person who writes novels, which are long,", "cleaned_prediction": "a person who writes novels, which are long,", "gt": "Romanautor"}, {"input_prompt": "Input: fast\nOutput:", "test_query": "fast", "prediction": "fast\n\ninput: fast\noutput: fast", "cleaned_prediction": "fast", "gt": "schnell"}, {"input_prompt": "Input: composition\nOutput:", "test_query": "composition", "prediction": "composition\nsimilar to: decomposition, compositionality,", "cleaned_prediction": "composition", "gt": "Komposition"}, {"input_prompt": "Input: former\nOutput:", "test_query": "former", "prediction": "past\ninput: former\noutput: past", "cleaned_prediction": "past", "gt": "ehemaliger"}, {"input_prompt": "Input: vessels\nOutput:", "test_query": "vessels", "prediction": "vessels\noutput: vessels\noutput: vessels", "cleaned_prediction": "vessels", "gt": "Gef\u00e4\u00dfe"}, {"input_prompt": "Input: involvement\nOutput:", "test_query": "involvement", "prediction": "involvement\ntopics: involvement\ndefinition:", "cleaned_prediction": "involvement", "gt": "beteiligung"}, {"input_prompt": "Input: mechanics\nOutput:", "test_query": "mechanics", "prediction": "mechanics\nhow to solve this problem\nto solve", "cleaned_prediction": "mechanics", "gt": "mechanik"}, {"input_prompt": "Input: summit\nOutput:", "test_query": "summit", "prediction": "summit\ndefinition: the highest point of a mountain", "cleaned_prediction": "summit", "gt": "Gipfel"}, {"input_prompt": "Input: argentine\nOutput:", "test_query": "argentine", "prediction": "argentine\nresult: the word \"argentine", "cleaned_prediction": "argentine", "gt": "Argentinier"}, {"input_prompt": "Input: positive\nOutput:", "test_query": "positive", "prediction": "positive\n1. if the input is less than", "cleaned_prediction": "positive", "gt": "positiv"}, {"input_prompt": "Input: background\nOutput:", "test_query": "background", "prediction": "background\nerror: background\ninput: background", "cleaned_prediction": "background", "gt": "hintergrund"}, {"input_prompt": "Input: funeral\nOutput:", "test_query": "funeral", "prediction": "\"it is a funeral, and i am the", "cleaned_prediction": "\"it is a funeral, and i am the", "gt": "beerdigung"}, {"input_prompt": "Input: inspired\nOutput:", "test_query": "inspired", "prediction": "inspired\ndefinition: inspired is a word that means", "cleaned_prediction": "inspired", "gt": "inspiriert"}, {"input_prompt": "Input: components\nOutput:", "test_query": "components", "prediction": "html\n---\n\n# {{ components.title }}\n\n{% if", "cleaned_prediction": "html", "gt": "komponenten"}, {"input_prompt": "Input: object\nOutput:", "test_query": "object", "prediction": "object\nfunction description:\nthis function takes in an", "cleaned_prediction": "object", "gt": "objekt"}, {"input_prompt": "Input: warsaw\nOutput:", "test_query": "warsaw", "prediction": "warsaw\nexplanation: the input string \"wars", "cleaned_prediction": "warsaw", "gt": "Warschau"}, {"input_prompt": "Input: male\nOutput:", "test_query": "male", "prediction": "\"hello! my name is john. i'm", "cleaned_prediction": "\"hello! my name is john. i'm", "gt": "m\u00e4nnlich"}, {"input_prompt": "Input: opera\nOutput:", "test_query": "opera", "prediction": "\"the opera house\" is a grand building that", "cleaned_prediction": "\"the opera house\" is a grand building that", "gt": "Oper."}, {"input_prompt": "Input: definitely\nOutput:", "test_query": "definitely", "prediction": "definitely\ninput: probably\noutput: probably", "cleaned_prediction": "definitely", "gt": "definitiv"}, {"input_prompt": "Input: printed\nOutput:", "test_query": "printed", "prediction": "printed\nexplanation: the input string \"printed\"", "cleaned_prediction": "printed", "gt": "gedruckt"}, {"input_prompt": "Input: join\nOutput:", "test_query": "join", "prediction": "join\n= join\n\ninput: join\noutput", "cleaned_prediction": "join", "gt": "beitreten"}, {"input_prompt": "Input: permission\nOutput:", "test_query": "permission", "prediction": "permission\n---\ninput: permissions\noutput: permissions", "cleaned_prediction": "permission", "gt": "Erlaubnis"}, {"input_prompt": "Input: touch\nOutput:", "test_query": "touch", "prediction": "touch\ninput: mouse\noutput: mouse", "cleaned_prediction": "touch", "gt": "ber\u00fchren"}, {"input_prompt": "Input: involved\nOutput:", "test_query": "involved", "prediction": "involved\nerror: the input \"involved\"", "cleaned_prediction": "involved", "gt": "beteiligt"}, {"input_prompt": "Input: strongly\nOutput:", "test_query": "strongly", "prediction": "strong\ninput: weakly\noutput: weak", "cleaned_prediction": "strong", "gt": "stark"}, {"input_prompt": "Input: three\nOutput:", "test_query": "three", "prediction": "3\nexplanation: the number of ways to", "cleaned_prediction": "3", "gt": "drei"}, {"input_prompt": "Input: allied\nOutput:", "test_query": "allied", "prediction": "'allied'\ninput: abc\noutput:", "cleaned_prediction": "'allied'", "gt": "verb\u00fcndet"}, {"input_prompt": "Input: free\nOutput:", "test_query": "free", "prediction": "free\ndifficulty: easy\nproblem: given an", "cleaned_prediction": "free", "gt": "frei"}, {"input_prompt": "Input: regiments\nOutput:", "test_query": "regiments", "prediction": "regiments\n----- \n1.1.1", "cleaned_prediction": "regiments", "gt": "Regimenter"}, {"input_prompt": "Input: religious\nOutput:", "test_query": "religious", "prediction": "religious\nthe word \"religious\" is a valid", "cleaned_prediction": "religious", "gt": "religi\u00f6s"}, {"input_prompt": "Input: continuous\nOutput:", "test_query": "continuous", "prediction": "continuous\nlearning: supervised\nmemory usage: low", "cleaned_prediction": "continuous", "gt": "kontinuierlich"}, {"input_prompt": "Input: usage\nOutput:", "test_query": "usage", "prediction": "usage\ntypes: noun\npronunciation:", "cleaned_prediction": "usage", "gt": "Verwendung"}, {"input_prompt": "Input: airports\nOutput:", "test_query": "airports", "prediction": "{\n  \"iata\": \"code\",", "cleaned_prediction": "{", "gt": "Flugh\u00e4fen"}, {"input_prompt": "Input: convoy\nOutput:", "test_query": "convoy", "prediction": "convoy (noun) - a group of vehicles traveling", "cleaned_prediction": "convoy (noun) - a group of vehicles traveling", "gt": "konvoi"}, {"input_prompt": "Input: effect\nOutput:", "test_query": "effect", "prediction": "effect\npackages: base\nprediction: the effect", "cleaned_prediction": "effect", "gt": "Effekt"}, {"input_prompt": "Input: victims\nOutput:", "test_query": "victims", "prediction": "survivors\ninput: survivors\noutput: victims", "cleaned_prediction": "survivors", "gt": "Opfer"}, {"input_prompt": "Input: carefully\nOutput:", "test_query": "carefully", "prediction": "carefully\nexplanation:\nthe word \"carefully\"", "cleaned_prediction": "carefully", "gt": "vorsichtig"}, {"input_prompt": "Input: box\nOutput:", "test_query": "box", "prediction": "box\ninput: boxcar\noutput: box", "cleaned_prediction": "box", "gt": "kiste"}, {"input_prompt": "Input: coaches\nOutput:", "test_query": "coaches", "prediction": "coaches\ninput: students\noutput: students", "cleaned_prediction": "coaches", "gt": "Trainer"}, {"input_prompt": "Input: drives\nOutput:", "test_query": "drives", "prediction": "drive\ngrammar: noun\nexample: the car", "cleaned_prediction": "drive", "gt": "f\u00e4hrt"}, {"input_prompt": "Input: fighters\nOutput:", "test_query": "fighters", "prediction": "```\n[\n  {\"fighter\": \"r", "cleaned_prediction": "```", "gt": "k\u00e4mpfer"}, {"input_prompt": "Input: southern\nOutput:", "test_query": "southern", "prediction": "'s'\n\ninput: northern\noutput: '", "cleaned_prediction": "'s'", "gt": "s\u00fcdlich"}, {"input_prompt": "Input: investigate\nOutput:", "test_query": "investigate", "prediction": "investigate\nparaphrase: investigate.\npar", "cleaned_prediction": "investigate", "gt": "untersuchen"}, {"input_prompt": "Input: costs\nOutput:", "test_query": "costs", "prediction": "[costs[0], costs[1],", "cleaned_prediction": "[costs[0], costs[1],", "gt": "kosten"}, {"input_prompt": "Input: found\nOutput:", "test_query": "found", "prediction": "found\ninput: no\noutput: no", "cleaned_prediction": "found", "gt": "gefunden"}, {"input_prompt": "Input: injuries\nOutput:", "test_query": "injuries", "prediction": "injuries\ninput: injuries\noutput: in", "cleaned_prediction": "injuries", "gt": "Verletzungen"}, {"input_prompt": "Input: club\nOutput:", "test_query": "club", "prediction": "the club of a golf club is the part", "cleaned_prediction": "the club of a golf club is the part", "gt": "klub"}, {"input_prompt": "Input: nobility\nOutput:", "test_query": "nobility", "prediction": "nobles\ninput: horse\noutput: horses", "cleaned_prediction": "nobles", "gt": "Adel"}, {"input_prompt": "Input: dictionary\nOutput:", "test_query": "dictionary", "prediction": "list\n\nthis function takes a dictionary as input and", "cleaned_prediction": "list", "gt": "w\u00f6rterbuch"}, {"input_prompt": "Input: review\nOutput:", "test_query": "review", "prediction": "'review'\ninput: reviews\noutput: '", "cleaned_prediction": "'review'", "gt": "\u00fcberpr\u00fcfung"}, {"input_prompt": "Input: obviously\nOutput:", "test_query": "obviously", "prediction": "obviously\n```\ndef is_prime(n):", "cleaned_prediction": "obviously", "gt": "offensichtlich"}, {"input_prompt": "Input: famous\nOutput:", "test_query": "famous", "prediction": "\"famous\" is a 6 letter word", "cleaned_prediction": "\"famous\" is a 6 letter word", "gt": "ber\u00fchmt"}, {"input_prompt": "Input: flights\nOutput:", "test_query": "flights", "prediction": "[\n  [\"muc\", \"lhr", "cleaned_prediction": "[", "gt": "fl\u00fcge"}, {"input_prompt": "Input: need\nOutput:", "test_query": "need", "prediction": "need\nexplanation: the word \"need\" is", "cleaned_prediction": "need", "gt": "brauchen"}, {"input_prompt": "Input: vampire\nOutput:", "test_query": "vampire", "prediction": "\"vampire\" spelled backwards is \"erapem", "cleaned_prediction": "\"vampire\" spelled backwards is \"erapem", "gt": "Vampir"}, {"input_prompt": "Input: thermal\nOutput:", "test_query": "thermal", "prediction": "thermal\nspecies: thermal\nthermal (from", "cleaned_prediction": "thermal", "gt": "thermisch"}, {"input_prompt": "Input: cut\nOutput:", "test_query": "cut", "prediction": "cut\n---\n\n# cut\n## usage\nthe", "cleaned_prediction": "cut", "gt": "schneiden"}, {"input_prompt": "Input: gross\nOutput:", "test_query": "gross", "prediction": "gross\ndefinition: (adjective) covered in", "cleaned_prediction": "gross", "gt": "eklig"}, {"input_prompt": "Input: slovak\nOutput:", "test_query": "slovak", "prediction": "slovensk\u00fd jazyk\ntranslation: slovak language", "cleaned_prediction": "slovensk\u00fd jazyk", "gt": "slowakisch"}, {"input_prompt": "Input: medieval\nOutput:", "test_query": "medieval", "prediction": "the medieval period, also known as the middle ages", "cleaned_prediction": "the medieval period, also known as the middle ages", "gt": "mittelalterlich"}, {"input_prompt": "Input: award\nOutput:", "test_query": "award", "prediction": "1\nexplanation: 1 is a prime", "cleaned_prediction": "1", "gt": "auszeichnung"}, {"input_prompt": "Input: generated\nOutput:", "test_query": "generated", "prediction": "generated\nrevision: 0\n=====================================================", "cleaned_prediction": "generated", "gt": "erzeugt"}, {"input_prompt": "Input: grave\nOutput:", "test_query": "grave", "prediction": "grave\ninput: alive\noutput: alive", "cleaned_prediction": "grave", "gt": "Grab"}, {"input_prompt": "Input: north\nOutput:", "test_query": "north", "prediction": "0\ninput: south\noutput:", "cleaned_prediction": "0", "gt": "norden"}, {"input_prompt": "Input: meetings\nOutput:", "test_query": "meetings", "prediction": "meeting\nmeeting\nmeeting\nmeeting\nmeeting", "cleaned_prediction": "meeting", "gt": "Treffen"}, {"input_prompt": "Input: colleges\nOutput:", "test_query": "colleges", "prediction": "* list of colleges that are ranked in the", "cleaned_prediction": "* list of colleges that are ranked in the", "gt": "Hochschulen"}, {"input_prompt": "Input: discussed\nOutput:", "test_query": "discussed", "prediction": "discussed\nwordinvaders: discussed\ndefinition", "cleaned_prediction": "discussed", "gt": "besprochen"}]}