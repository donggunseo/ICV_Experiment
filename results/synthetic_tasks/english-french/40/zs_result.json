{"score": {"exact_match": 0.0}, "result": [{"input_prompt": "Input: printing\nOutput:", "test_query": "printing", "prediction": "printing\n================\n\n### printing output in python", "cleaned_prediction": "printing", "gt": "impression"}, {"input_prompt": "Input: iceland\nOutput:", "test_query": "iceland", "prediction": "iceland is a nordic island nation located in the north", "cleaned_prediction": "iceland is a nordic island nation located in the north", "gt": "Islande"}, {"input_prompt": "Input: fault\nOutput:", "test_query": "fault", "prediction": "fault\ninput: faults\noutput: faults", "cleaned_prediction": "fault", "gt": "faute"}, {"input_prompt": "Input: arrest\nOutput:", "test_query": "arrest", "prediction": "arrest\ninput: arrest\noutput: arrest", "cleaned_prediction": "arrest", "gt": "arr\u00eater"}, {"input_prompt": "Input: reducing\nOutput:", "test_query": "reducing", "prediction": "reducing\nrelationship: synonym\ninput: less", "cleaned_prediction": "reducing", "gt": "r\u00e9duisant"}, {"input_prompt": "Input: chart\nOutput:", "test_query": "chart", "prediction": "2\nexplanation: the first row has", "cleaned_prediction": "2", "gt": "graphique"}, {"input_prompt": "Input: compromise\nOutput:", "test_query": "compromise", "prediction": "compromise\nrelated: conflict, negotiation, settlement,", "cleaned_prediction": "compromise", "gt": "compromis"}, {"input_prompt": "Input: compared\nOutput:", "test_query": "compared", "prediction": "compared\ninput: compare\noutput: compare", "cleaned_prediction": "compared", "gt": "compar\u00e9"}, {"input_prompt": "Input: thousands\nOutput:", "test_query": "thousands", "prediction": "thousands\nexplanation: we can split the input string", "cleaned_prediction": "thousands", "gt": "milliers"}, {"input_prompt": "Input: prevent\nOutput:", "test_query": "prevent", "prediction": "prevent\ninput: prevent\noutput: prevent", "cleaned_prediction": "prevent", "gt": "pr\u00e9venir"}, {"input_prompt": "Input: foundation\nOutput:", "test_query": "foundation", "prediction": "foundation\nduration: 1 sec\ndescription:", "cleaned_prediction": "foundation", "gt": "fondation"}, {"input_prompt": "Input: tribes\nOutput:", "test_query": "tribes", "prediction": "tribes\nprofile completion: 100%\ntrib", "cleaned_prediction": "tribes", "gt": "tribus"}, {"input_prompt": "Input: vocals\nOutput:", "test_query": "vocals", "prediction": "music\nthe music of the spheres is an ancient", "cleaned_prediction": "music", "gt": "voix"}, {"input_prompt": "Input: intermediate\nOutput:", "test_query": "intermediate", "prediction": "intermediate\ntime complexity: o(n)\nspace complexity", "cleaned_prediction": "intermediate", "gt": "interm\u00e9diaire"}, {"input_prompt": "Input: gallery\nOutput:", "test_query": "gallery", "prediction": "gallery\n================\n### gallery\n\na gallery is", "cleaned_prediction": "gallery", "gt": "galerie"}, {"input_prompt": "Input: especially\nOutput:", "test_query": "especially", "prediction": "especially\nespecially (adverb)\nin a special", "cleaned_prediction": "especially", "gt": "particuli\u00e8rement"}, {"input_prompt": "Input: arguing\nOutput:", "test_query": "arguing", "prediction": "arguing\narguing is a form of verbal", "cleaned_prediction": "arguing", "gt": "se disputer"}, {"input_prompt": "Input: conservative\nOutput:", "test_query": "conservative", "prediction": "liberal\ncomment: the 2020 election saw", "cleaned_prediction": "liberal", "gt": "conservateur"}, {"input_prompt": "Input: processes\nOutput:", "test_query": "processes", "prediction": "processes\ntext: processes\nprocesses are a series", "cleaned_prediction": "processes", "gt": "processus"}, {"input_prompt": "Input: platform\nOutput:", "test_query": "platform", "prediction": "\"this platform is a digital platform that allows users", "cleaned_prediction": "\"this platform is a digital platform that allows users", "gt": "plateforme"}, {"input_prompt": "Input: scope\nOutput:", "test_query": "scope", "prediction": "scope\npackages: datetime, math, numpy,", "cleaned_prediction": "scope", "gt": "port\u00e9e"}, {"input_prompt": "Input: contributors\nOutput:", "test_query": "contributors", "prediction": "contributors\ndescription: this module is used to create", "cleaned_prediction": "contributors", "gt": "contributeurs"}, {"input_prompt": "Input: colleges\nOutput:", "test_query": "colleges", "prediction": "colleges\ninput: universities\noutput: universities", "cleaned_prediction": "colleges", "gt": "universit\u00e9s"}, {"input_prompt": "Input: audiences\nOutput:", "test_query": "audiences", "prediction": "audiences\naudiences can be found in many different", "cleaned_prediction": "audiences", "gt": "publics"}, {"input_prompt": "Input: waiting\nOutput:", "test_query": "waiting", "prediction": "waiting\ninput: run\noutput: waiting", "cleaned_prediction": "waiting", "gt": "attente"}, {"input_prompt": "Input: bike\nOutput:", "test_query": "bike", "prediction": "\"i love biking!\"\n\ninput: \"bike\"", "cleaned_prediction": "\"i love biking!\"", "gt": "v\u00e9lo"}, {"input_prompt": "Input: serbia\nOutput:", "test_query": "serbia", "prediction": "serbia\ninput: usa\noutput: usa", "cleaned_prediction": "serbia", "gt": "Serbie"}, {"input_prompt": "Input: unfortunately\nOutput:", "test_query": "unfortunately", "prediction": "unfortunately, i am unable to complete this task as", "cleaned_prediction": "unfortunately, i am unable to complete this task as", "gt": "malheureusement"}, {"input_prompt": "Input: separation\nOutput:", "test_query": "separation", "prediction": "separation\ntypes of input: noun\nmodel type", "cleaned_prediction": "separation", "gt": "s\u00e9paration"}, {"input_prompt": "Input: rain\nOutput:", "test_query": "rain", "prediction": "\"you can go for a walk in the park", "cleaned_prediction": "\"you can go for a walk in the park", "gt": "pluie"}, {"input_prompt": "Input: gradually\nOutput:", "test_query": "gradually", "prediction": "gradually\ndefinition: in a gradual or continuous manner", "cleaned_prediction": "gradually", "gt": "progressivement"}, {"input_prompt": "Input: leo\nOutput:", "test_query": "leo", "prediction": "leo\n\ninput: hello\noutput:", "cleaned_prediction": "leo", "gt": "lion"}, {"input_prompt": "Input: birthday\nOutput:", "test_query": "birthday", "prediction": "\"the goats are michael jordan, lebron", "cleaned_prediction": "\"the goats are michael jordan, lebron", "gt": "anniversaire"}, {"input_prompt": "Input: listed\nOutput:", "test_query": "listed", "prediction": "listed\noutput: listed\noutput: listed", "cleaned_prediction": "listed", "gt": "\u00e9num\u00e9r\u00e9"}, {"input_prompt": "Input: separately\nOutput:", "test_query": "separately", "prediction": "separately\ndefinition: in a separate way or at", "cleaned_prediction": "separately", "gt": "s\u00e9par\u00e9ment"}, {"input_prompt": "Input: land\nOutput:", "test_query": "land", "prediction": "- 1.0\n- 1", "cleaned_prediction": "- 1.0", "gt": "terre"}, {"input_prompt": "Input: particularly\nOutput:", "test_query": "particularly", "prediction": "particularly\ndefinition: to a greater degree or extent", "cleaned_prediction": "particularly", "gt": "particuli\u00e8rement"}, {"input_prompt": "Input: moses\nOutput:", "test_query": "moses", "prediction": "moses\nexplanation: the input string \"moses", "cleaned_prediction": "moses", "gt": "Mo\u00efse"}, {"input_prompt": "Input: explorer\nOutput:", "test_query": "explorer", "prediction": "explorer is a profession that involves traveling to remote or", "cleaned_prediction": "explorer is a profession that involves traveling to remote or", "gt": "explorateur"}, {"input_prompt": "Input: animals\nOutput:", "test_query": "animals", "prediction": "[\n  { name: 'lion', category:", "cleaned_prediction": "[", "gt": "animaux"}, {"input_prompt": "Input: legend\nOutput:", "test_query": "legend", "prediction": "legend\ntypes: object\ndescription: a legend", "cleaned_prediction": "legend", "gt": "l\u00e9gende"}, {"input_prompt": "Input: arms\nOutput:", "test_query": "arms", "prediction": "arms\nexplanation: the word \"arms\" is", "cleaned_prediction": "arms", "gt": "bras"}, {"input_prompt": "Input: notably\nOutput:", "test_query": "notably", "prediction": "notably\ninput: notably\noutput: notably", "cleaned_prediction": "notably", "gt": "notamment"}, {"input_prompt": "Input: throne\nOutput:", "test_query": "throne", "prediction": "\"the throne is a symbol of power and authority", "cleaned_prediction": "\"the throne is a symbol of power and authority", "gt": "tr\u00f4ne"}, {"input_prompt": "Input: competitive\nOutput:", "test_query": "competitive", "prediction": "competitive\ninput: noncompetitive\noutput: non", "cleaned_prediction": "competitive", "gt": "comp\u00e9titif"}, {"input_prompt": "Input: quickly\nOutput:", "test_query": "quickly", "prediction": "quick\ninput: codeforces\noutput: code", "cleaned_prediction": "quick", "gt": "rapidement"}, {"input_prompt": "Input: frank\nOutput:", "test_query": "frank", "prediction": "5\n\nexplanation: the number of words in", "cleaned_prediction": "5", "gt": "franc"}, {"input_prompt": "Input: burial\nOutput:", "test_query": "burial", "prediction": "burial\nsyllable stress: bur-i-al", "cleaned_prediction": "burial", "gt": "enterrement"}, {"input_prompt": "Input: significantly\nOutput:", "test_query": "significantly", "prediction": "significantly\ninput: significantly\noutput: sign", "cleaned_prediction": "significantly", "gt": "significativement"}, {"input_prompt": "Input: bound\nOutput:", "test_query": "bound", "prediction": "0.0\n\ninput: 0", "cleaned_prediction": "0.0", "gt": "li\u00e9"}, {"input_prompt": "Input: leaving\nOutput:", "test_query": "leaving", "prediction": "leaving\n================\n\n### leaving\n\nleaving is", "cleaned_prediction": "leaving", "gt": "partir"}, {"input_prompt": "Input: installed\nOutput:", "test_query": "installed", "prediction": "installed\ndiff: 0\n\ninput: un", "cleaned_prediction": "installed", "gt": "install\u00e9"}, {"input_prompt": "Input: changed\nOutput:", "test_query": "changed", "prediction": "changed\nrevision: 2\n---\n\ninput:", "cleaned_prediction": "changed", "gt": "chang\u00e9"}, {"input_prompt": "Input: build\nOutput:", "test_query": "build", "prediction": "build\n---\n\nbuilds a new `build`", "cleaned_prediction": "build", "gt": "construire"}, {"input_prompt": "Input: geographic\nOutput:", "test_query": "geographic", "prediction": "geographic\ncategories: geography\ntags: 10", "cleaned_prediction": "geographic", "gt": "g\u00e9ographique"}, {"input_prompt": "Input: queens\nOutput:", "test_query": "queens", "prediction": "[[1,3,8],[2,7", "cleaned_prediction": "[[1,3,8],[2,7", "gt": "reines"}, {"input_prompt": "Input: core\nOutput:", "test_query": "core", "prediction": "core\ntime complexity: o(n)\nspace complexity", "cleaned_prediction": "core", "gt": "noyau"}, {"input_prompt": "Input: voices\nOutput:", "test_query": "voices", "prediction": "voices\nduration: 4:05\nupload", "cleaned_prediction": "voices", "gt": "voix"}, {"input_prompt": "Input: gas\nOutput:", "test_query": "gas", "prediction": "int\nconstraints: 1 <= gas <=", "cleaned_prediction": "int", "gt": "gaz"}, {"input_prompt": "Input: opposed\nOutput:", "test_query": "opposed", "prediction": "opposed\nthe word \"opposed\" is a", "cleaned_prediction": "opposed", "gt": "oppos\u00e9"}, {"input_prompt": "Input: award\nOutput:", "test_query": "award", "prediction": "award\ninput: awards\noutput: awards", "cleaned_prediction": "award", "gt": "prix"}, {"input_prompt": "Input: freestyle\nOutput:", "test_query": "freestyle", "prediction": "freestyle\ninput: freestyle\noutput:", "cleaned_prediction": "freestyle", "gt": "style libre"}, {"input_prompt": "Input: baltic\nOutput:", "test_query": "baltic", "prediction": "baltic\nexplanation: the string \"b", "cleaned_prediction": "baltic", "gt": "baltique"}, {"input_prompt": "Input: vary\nOutput:", "test_query": "vary", "prediction": "vary\nseries: vary\nvary - english", "cleaned_prediction": "vary", "gt": "varier"}, {"input_prompt": "Input: road\nOutput:", "test_query": "road", "prediction": "\"road\"\n\ninput: racecar\noutput:", "cleaned_prediction": "\"road\"", "gt": "route"}, {"input_prompt": "Input: something\nOutput:", "test_query": "something", "prediction": "something\n\n## step 1: understand the problem", "cleaned_prediction": "something", "gt": "quelque chose"}, {"input_prompt": "Input: described\nOutput:", "test_query": "described", "prediction": "described\na 12-year-old girl who was", "cleaned_prediction": "described", "gt": "d\u00e9crit"}, {"input_prompt": "Input: under\nOutput:", "test_query": "under", "prediction": "under\ndefinition: (adverb) in a", "cleaned_prediction": "under", "gt": "sous"}, {"input_prompt": "Input: assets\nOutput:", "test_query": "assets", "prediction": "asset\n\n# assets\nassets are the physical or", "cleaned_prediction": "asset", "gt": "actifs"}, {"input_prompt": "Input: struck\nOutput:", "test_query": "struck", "prediction": "struck\ninput: strike\noutput: strike", "cleaned_prediction": "struck", "gt": "frapp\u00e9"}, {"input_prompt": "Input: current\nOutput:", "test_query": "current", "prediction": "voltage\ngain: 1\ntype: in", "cleaned_prediction": "voltage", "gt": "actuel"}, {"input_prompt": "Input: cars\nOutput:", "test_query": "cars", "prediction": "[\"cadillac\", \"chevrolet\", \"ch", "cleaned_prediction": "[\"cadillac\", \"chevrolet\", \"ch", "gt": "voitures"}, {"input_prompt": "Input: graduated\nOutput:", "test_query": "graduated", "prediction": "\"you are a graduate.\"\ninput: graduated", "cleaned_prediction": "\"you are a graduate.\"", "gt": "dipl\u00f4m\u00e9"}, {"input_prompt": "Input: petersburg\nOutput:", "test_query": "petersburg", "prediction": "\"petersburg\"\nexplanation: petersburg is a", "cleaned_prediction": "\"petersburg\"", "gt": "P\u00e9tersbourg"}, {"input_prompt": "Input: tue\nOutput:", "test_query": "tue", "prediction": "tuesday\n\ninput: wed\noutput: wednesday", "cleaned_prediction": "tuesday", "gt": "mardi"}, {"input_prompt": "Input: served\nOutput:", "test_query": "served", "prediction": "served\ndefinition: (verb) to give food", "cleaned_prediction": "served", "gt": "servi"}, {"input_prompt": "Input: adding\nOutput:", "test_query": "adding", "prediction": "adding\ntime: 1\nfuzzing", "cleaned_prediction": "adding", "gt": "ajoutant"}, {"input_prompt": "Input: weeks\nOutput:", "test_query": "weeks", "prediction": "weeks\nconstraints: 1 <= weeks <=", "cleaned_prediction": "weeks", "gt": "semaines"}, {"input_prompt": "Input: stay\nOutput:", "test_query": "stay", "prediction": "stay\ninput: stays\noutput: stays", "cleaned_prediction": "stay", "gt": "rester"}, {"input_prompt": "Input: can\nOutput:", "test_query": "can", "prediction": "the input string is a palindrome.\n\nexplanation:", "cleaned_prediction": "the input string is a palindrome.", "gt": "peut"}, {"input_prompt": "Input: wanted\nOutput:", "test_query": "wanted", "prediction": "wanted\ninput: the quick brown fox jumps over", "cleaned_prediction": "wanted", "gt": "voulu"}, {"input_prompt": "Input: how\nOutput:", "test_query": "how", "prediction": "what\ninput: who\noutput: where", "cleaned_prediction": "what", "gt": "comment"}, {"input_prompt": "Input: reliable\nOutput:", "test_query": "reliable", "prediction": "reliable\n======\n\n### overview\n\nthis is a", "cleaned_prediction": "reliable", "gt": "fiable"}, {"input_prompt": "Input: archaeological\nOutput:", "test_query": "archaeological", "prediction": "archaeological\ndefinition: (of a site or find", "cleaned_prediction": "archaeological", "gt": "arch\u00e9ologique"}, {"input_prompt": "Input: leaders\nOutput:", "test_query": "leaders", "prediction": "leaders\nduration: 3:00\ndescription", "cleaned_prediction": "leaders", "gt": "dirigeants"}, {"input_prompt": "Input: when\nOutput:", "test_query": "when", "prediction": "when\nconstraints: when\n\nprocess:\n1.", "cleaned_prediction": "when", "gt": "quand"}, {"input_prompt": "Input: wings\nOutput:", "test_query": "wings", "prediction": "chicken wings\ninput: apple\noutput: apple", "cleaned_prediction": "chicken wings", "gt": "ailes"}, {"input_prompt": "Input: receiving\nOutput:", "test_query": "receiving", "prediction": "receiving\ninput: receiving\noutput: receiving", "cleaned_prediction": "receiving", "gt": "r\u00e9ception"}, {"input_prompt": "Input: clothes\nOutput:", "test_query": "clothes", "prediction": "{\"dress\": 1, \"hat\":", "cleaned_prediction": "{\"dress\": 1, \"hat\":", "gt": "v\u00eatements"}, {"input_prompt": "Input: clinical\nOutput:", "test_query": "clinical", "prediction": "clinical\ninput: clinical\noutput: clinical", "cleaned_prediction": "clinical", "gt": "clinique"}, {"input_prompt": "Input: prussia\nOutput:", "test_query": "prussia", "prediction": "\"prussia was a historical state that existed from", "cleaned_prediction": "\"prussia was a historical state that existed from", "gt": "Prusse"}, {"input_prompt": "Input: judicial\nOutput:", "test_query": "judicial", "prediction": "judicial\nthe word judicial has 8 letters:", "cleaned_prediction": "judicial", "gt": "judiciaire"}, {"input_prompt": "Input: ground\nOutput:", "test_query": "ground", "prediction": "ground\nadding a word that is a synonym of", "cleaned_prediction": "ground", "gt": "sol"}, {"input_prompt": "Input: grounds\nOutput:", "test_query": "grounds", "prediction": "grounds\ntime complexity: o(n)\nspace complexity", "cleaned_prediction": "grounds", "gt": "terrains"}, {"input_prompt": "Input: useless\nOutput:", "test_query": "useless", "prediction": "useless\nexplanation: the input string is \"use", "cleaned_prediction": "useless", "gt": "inutile"}, {"input_prompt": "Input: touchdown\nOutput:", "test_query": "touchdown", "prediction": "touchdown\ninput: touchdown\noutput: touchdown", "cleaned_prediction": "touchdown", "gt": "touch\u00e9"}, {"input_prompt": "Input: azerbaijan\nOutput:", "test_query": "azerbaijan", "prediction": "azerbaijan, officially known as the republic", "cleaned_prediction": "azerbaijan, officially known as the republic", "gt": "Azerba\u00efd"}, {"input_prompt": "Input: decide\nOutput:", "test_query": "decide", "prediction": "decide\nmodel type: decision-making\ndescription:", "cleaned_prediction": "decide", "gt": "d\u00e9cider"}, {"input_prompt": "Input: breast\nOutput:", "test_query": "breast", "prediction": "breast\ninput: breastplate\noutput: breast", "cleaned_prediction": "breast", "gt": "sein"}, {"input_prompt": "Input: week\nOutput:", "test_query": "week", "prediction": "\"week is a period of 7 days,", "cleaned_prediction": "\"week is a period of 7 days,", "gt": "semaine"}, {"input_prompt": "Input: hidden\nOutput:", "test_query": "hidden", "prediction": "visible\nhidden layer: 1\nactivation function", "cleaned_prediction": "visible", "gt": "cach\u00e9"}, {"input_prompt": "Input: ruled\nOutput:", "test_query": "ruled", "prediction": "ruled\ninput: unruled\noutput:", "cleaned_prediction": "ruled", "gt": "r\u00e9gi"}, {"input_prompt": "Input: possibly\nOutput:", "test_query": "possibly", "prediction": "1\ninput: no\noutput:", "cleaned_prediction": "1", "gt": "peut-\u00eatre"}, {"input_prompt": "Input: sin\nOutput:", "test_query": "sin", "prediction": "sin\nratio: 1\n\ninput: cos", "cleaned_prediction": "sin", "gt": "p\u00e9ch\u00e9"}, {"input_prompt": "Input: artistic\nOutput:", "test_query": "artistic", "prediction": "the painting of the three sisters is a beautiful example", "cleaned_prediction": "the painting of the three sisters is a beautiful example", "gt": "artistique"}, {"input_prompt": "Input: truck\nOutput:", "test_query": "truck", "prediction": "\"truck\"\noutput: \"truck\"", "cleaned_prediction": "\"truck\"", "gt": "camion"}, {"input_prompt": "Input: collapsed\nOutput:", "test_query": "collapsed", "prediction": "collapsed\n\ninput: expanded\noutput: expanded", "cleaned_prediction": "collapsed", "gt": "effondr\u00e9"}, {"input_prompt": "Input: pretty\nOutput:", "test_query": "pretty", "prediction": "pretty\ninput: pretty\noutput: pretty", "cleaned_prediction": "pretty", "gt": "joli"}, {"input_prompt": "Input: tour\nOutput:", "test_query": "tour", "prediction": "tour\ncapitalized: tour\nupperc", "cleaned_prediction": "tour", "gt": "visite"}, {"input_prompt": "Input: tel\nOutput:", "test_query": "tel", "prediction": "tel\noutput: tel\noutput: tel", "cleaned_prediction": "tel", "gt": "t\u00e9l\u00e9phone"}, {"input_prompt": "Input: pattern\nOutput:", "test_query": "pattern", "prediction": "array of objects with the given pattern\ndescription:", "cleaned_prediction": "array of objects with the given pattern", "gt": "motif"}, {"input_prompt": "Input: rank\nOutput:", "test_query": "rank", "prediction": "1-5 stars\n\"\"\"\n\ndef get_star", "cleaned_prediction": "1-5 stars", "gt": "rang"}, {"input_prompt": "Input: torpedo\nOutput:", "test_query": "torpedo", "prediction": "\"torpedo\" is a noun. it refers", "cleaned_prediction": "\"torpedo\" is a noun. it refers", "gt": "torpille"}, {"input_prompt": "Input: undo\nOutput:", "test_query": "undo", "prediction": "undo\ndefinition: to cancel or reverse an action", "cleaned_prediction": "undo", "gt": "annuler"}, {"input_prompt": "Input: limestone\nOutput:", "test_query": "limestone", "prediction": "limestone\nprocess: limestone is crushed and then heated", "cleaned_prediction": "limestone", "gt": "calcaire"}, {"input_prompt": "Input: opportunities\nOutput:", "test_query": "opportunities", "prediction": "opportunities\nerror: the input and output values are", "cleaned_prediction": "opportunities", "gt": "opportunit\u00e9s"}, {"input_prompt": "Input: grass\nOutput:", "test_query": "grass", "prediction": "grass\n\ninput: water\noutput: water", "cleaned_prediction": "grass", "gt": "herbe"}, {"input_prompt": "Input: declined\nOutput:", "test_query": "declined", "prediction": "declined\n================\n### declined\n\na simple", "cleaned_prediction": "declined", "gt": "refus\u00e9"}, {"input_prompt": "Input: statements\nOutput:", "test_query": "statements", "prediction": "statements\n======\n\nthe goal of this problem is", "cleaned_prediction": "statements", "gt": "d\u00e9clarations"}, {"input_prompt": "Input: badge\nOutput:", "test_query": "badge", "prediction": "badge\n-------------------\n# badge\na badge is", "cleaned_prediction": "badge", "gt": "insigne"}, {"input_prompt": "Input: aftermath\nOutput:", "test_query": "aftermath", "prediction": "after-math\nchange: after + math \u2192", "cleaned_prediction": "after-math", "gt": "cons\u00e9quences"}, {"input_prompt": "Input: offices\nOutput:", "test_query": "offices", "prediction": "office\ninput: restaurants\noutput: restaurant", "cleaned_prediction": "office", "gt": "bureaux"}, {"input_prompt": "Input: cold\nOutput:", "test_query": "cold", "prediction": "cold\n================\n\n## description\n\nthis function takes", "cleaned_prediction": "cold", "gt": "froid"}, {"input_prompt": "Input: funeral\nOutput:", "test_query": "funeral", "prediction": "the funeral was a sad occasion.\nexample: the", "cleaned_prediction": "the funeral was a sad occasion.", "gt": "fun\u00e9railles"}, {"input_prompt": "Input: weapons\nOutput:", "test_query": "weapons", "prediction": "1. a rifle\n2. a pistol", "cleaned_prediction": "1. a rifle", "gt": "armes"}, {"input_prompt": "Input: philippine\nOutput:", "test_query": "philippine", "prediction": "the philippines (/\u02c8f\u026al", "cleaned_prediction": "the philippines (/\u02c8f\u026al", "gt": "philippin"}, {"input_prompt": "Input: replacing\nOutput:", "test_query": "replacing", "prediction": "replacing\ndefinition: (verb) to put or", "cleaned_prediction": "replacing", "gt": "rempla\u00e7ant"}, {"input_prompt": "Input: categories\nOutput:", "test_query": "categories", "prediction": "a list of tuples containing the category name and the", "cleaned_prediction": "a list of tuples containing the category name and the", "gt": "cat\u00e9gories"}, {"input_prompt": "Input: improvements\nOutput:", "test_query": "improvements", "prediction": "improvements\nin the context of input and output,", "cleaned_prediction": "improvements", "gt": "am\u00e9liorations"}, {"input_prompt": "Input: implementation\nOutput:", "test_query": "implementation", "prediction": "implementation\n```\ndef get_intersection(lst1,", "cleaned_prediction": "implementation", "gt": "mise en \u0153uvre"}, {"input_prompt": "Input: fires\nOutput:", "test_query": "fires", "prediction": "fire\ninput: fires\noutput: fire", "cleaned_prediction": "fire", "gt": "incendies"}, {"input_prompt": "Input: edit\nOutput:", "test_query": "edit", "prediction": "edit\nduration: 1\ntime:", "cleaned_prediction": "edit", "gt": "modifier"}, {"input_prompt": "Input: sweet\nOutput:", "test_query": "sweet", "prediction": "sweet\ninput: sweetest\noutput: sweet", "cleaned_prediction": "sweet", "gt": "doux"}, {"input_prompt": "Input: defeated\nOutput:", "test_query": "defeated", "prediction": "defeated\ndefinition: (verb) to overcome or", "cleaned_prediction": "defeated", "gt": "d\u00e9fait"}, {"input_prompt": "Input: handle\nOutput:", "test_query": "handle", "prediction": "output\n\n# problem: how to use the `", "cleaned_prediction": "output", "gt": "poign\u00e9e"}, {"input_prompt": "Input: cable\nOutput:", "test_query": "cable", "prediction": "usb\noutput: usb-c\noutput: hdmi", "cleaned_prediction": "usb", "gt": "c\u00e2ble"}, {"input_prompt": "Input: paying\nOutput:", "test_query": "paying", "prediction": "pay\ninput: pay\noutput: pay", "cleaned_prediction": "pay", "gt": "payer"}, {"input_prompt": "Input: published\nOutput:", "test_query": "published", "prediction": "published\ninput: publish\noutput: publish", "cleaned_prediction": "published", "gt": "publi\u00e9"}, {"input_prompt": "Input: for\nOutput:", "test_query": "for", "prediction": "1\nexplanation: the input string \"for", "cleaned_prediction": "1", "gt": "pour"}, {"input_prompt": "Input: sustained\nOutput:", "test_query": "sustained", "prediction": "sustained\ninput: sustained\noutput: sustained", "cleaned_prediction": "sustained", "gt": "soutenu"}, {"input_prompt": "Input: upcoming\nOutput:", "test_query": "upcoming", "prediction": "upcoming\ncorrected: upcoming\n\nexplanation", "cleaned_prediction": "upcoming", "gt": "\u00e0 venir"}, {"input_prompt": "Input: mineral\nOutput:", "test_query": "mineral", "prediction": "mineral\n================\n\na simple script that takes a", "cleaned_prediction": "mineral", "gt": "min\u00e9ral"}, {"input_prompt": "Input: tourists\nOutput:", "test_query": "tourists", "prediction": "\"hello, tourists! welcome to our beautiful city", "cleaned_prediction": "\"hello, tourists! welcome to our beautiful city", "gt": "touristes"}, {"input_prompt": "Input: politicians\nOutput:", "test_query": "politicians", "prediction": "politicians\nthe term politician is often associated with politics", "cleaned_prediction": "politicians", "gt": "politiciens"}, {"input_prompt": "Input: attack\nOutput:", "test_query": "attack", "prediction": "attack\n```python\nimport re\n\ndef detect", "cleaned_prediction": "attack", "gt": "attaque"}, {"input_prompt": "Input: free\nOutput:", "test_query": "free", "prediction": "free\ndifficulty: easy\nmaximum marks:", "cleaned_prediction": "free", "gt": "gratuit"}, {"input_prompt": "Input: trees\nOutput:", "test_query": "trees", "prediction": "the number of trees\ninput: 5", "cleaned_prediction": "the number of trees", "gt": "arbres"}, {"input_prompt": "Input: starts\nOutput:", "test_query": "starts", "prediction": "starts\ninput: hello world\noutput: hello", "cleaned_prediction": "starts", "gt": "\u00e9toiles"}, {"input_prompt": "Input: students\nOutput:", "test_query": "students", "prediction": "```\n['a', 'b', '", "cleaned_prediction": "```", "gt": "\u00e9tudiants"}, {"input_prompt": "Input: buffalo\nOutput:", "test_query": "buffalo", "prediction": "buffalo\n\ninput: zebra\noutput: z", "cleaned_prediction": "buffalo", "gt": "bison"}, {"input_prompt": "Input: geneva\nOutput:", "test_query": "geneva", "prediction": "geneva\ninput: geneva\noutput: geneva", "cleaned_prediction": "geneva", "gt": "Gen\u00e8ve"}, {"input_prompt": "Input: ruins\nOutput:", "test_query": "ruins", "prediction": "1. the remains of a building, especially", "cleaned_prediction": "1. the remains of a building, especially", "gt": "ruines"}, {"input_prompt": "Input: rebuilt\nOutput:", "test_query": "rebuilt", "prediction": "rebuilt\nrevision: 1\nnumber of revisions", "cleaned_prediction": "rebuilt", "gt": "reconstruit"}, {"input_prompt": "Input: preserve\nOutput:", "test_query": "preserve", "prediction": "preserve\ndefinition: to keep or save something from", "cleaned_prediction": "preserve", "gt": "pr\u00e9server"}, {"input_prompt": "Input: bed\nOutput:", "test_query": "bed", "prediction": "bed\nbed\nbed\nbed\n\ninput", "cleaned_prediction": "bed", "gt": "lit"}, {"input_prompt": "Input: button\nOutput:", "test_query": "button", "prediction": "[output]\n---\n```markdown\n# button input", "cleaned_prediction": "[output]", "gt": "bouton"}, {"input_prompt": "Input: beauty\nOutput:", "test_query": "beauty", "prediction": "beauty\ninput: beauty\noutput: beauty", "cleaned_prediction": "beauty", "gt": "beaut\u00e9"}, {"input_prompt": "Input: states\nOutput:", "test_query": "states", "prediction": "list of dictionaries, each containing the state name,", "cleaned_prediction": "list of dictionaries, each containing the state name,", "gt": "\u00e9tats"}, {"input_prompt": "Input: nuclear\nOutput:", "test_query": "nuclear", "prediction": "nuclear\n================\n\n### explanation\n\nthis problem is", "cleaned_prediction": "nuclear", "gt": "nucl\u00e9aire"}, {"input_prompt": "Input: coached\nOutput:", "test_query": "coached", "prediction": "coached\ncorrected: coached\n\ncoached", "cleaned_prediction": "coached", "gt": "entra\u00een\u00e9"}, {"input_prompt": "Input: prefer\nOutput:", "test_query": "prefer", "prediction": "prefer\nexplanation: the word \"prefer\" spelled", "cleaned_prediction": "prefer", "gt": "pr\u00e9f\u00e9rer"}, {"input_prompt": "Input: organic\nOutput:", "test_query": "organic", "prediction": "organic\nthe term organic refers to something that is", "cleaned_prediction": "organic", "gt": "biologique"}, {"input_prompt": "Input: begun\nOutput:", "test_query": "begun", "prediction": "begun\ndefinition: (verb) start to speak", "cleaned_prediction": "begun", "gt": "commenc\u00e9"}, {"input_prompt": "Input: recognised\nOutput:", "test_query": "recognised", "prediction": "recognised\ninput: recognises\noutput: recognised", "cleaned_prediction": "recognised", "gt": "reconnu"}, {"input_prompt": "Input: stayed\nOutput:", "test_query": "stayed", "prediction": "stayed\ndefinition: (verb) remain in a", "cleaned_prediction": "stayed", "gt": "rest\u00e9"}, {"input_prompt": "Input: mail\nOutput:", "test_query": "mail", "prediction": "mail\ninput: mail box\noutput: box", "cleaned_prediction": "mail", "gt": "courrier"}, {"input_prompt": "Input: reasoning\nOutput:", "test_query": "reasoning", "prediction": "\"i'm not sure what you mean by '", "cleaned_prediction": "\"i'm not sure what you mean by '", "gt": "raisonnement"}, {"input_prompt": "Input: patrol\nOutput:", "test_query": "patrol", "prediction": "patrol\nsynonyms: guard\nantonyms:", "cleaned_prediction": "patrol", "gt": "patrouille"}, {"input_prompt": "Input: fluid\nOutput:", "test_query": "fluid", "prediction": "liquid\nprocess: the process of turning fluid into", "cleaned_prediction": "liquid", "gt": "liquide"}, {"input_prompt": "Input: oxygen\nOutput:", "test_query": "oxygen", "prediction": "oxygen\ninput: hydrogen\noutput: hydrogen", "cleaned_prediction": "oxygen", "gt": "oxyg\u00e8ne"}, {"input_prompt": "Input: corner\nOutput:", "test_query": "corner", "prediction": "corner\ndefinition: a corner of a rectangle,", "cleaned_prediction": "corner", "gt": "coin"}, {"input_prompt": "Input: referendum\nOutput:", "test_query": "referendum", "prediction": "referendum\nrelated to: vote, election, ballot", "cleaned_prediction": "referendum", "gt": "r\u00e9f\u00e9rendum"}, {"input_prompt": "Input: wrestling\nOutput:", "test_query": "wrestling", "prediction": "wrestling is a combat sport in which two people engage", "cleaned_prediction": "wrestling is a combat sport in which two people engage", "gt": "lutte"}, {"input_prompt": "Input: roughly\nOutput:", "test_query": "roughly", "prediction": "roughly\ndefinition: in a vague or approximate manner", "cleaned_prediction": "roughly", "gt": "approximativement"}, {"input_prompt": "Input: academy\nOutput:", "test_query": "academy", "prediction": "\"academy\"\ninput: \"the matrix", "cleaned_prediction": "\"academy\"", "gt": "acad\u00e9mie"}, {"input_prompt": "Input: indoor\nOutput:", "test_query": "indoor", "prediction": "outdoor\nexplanation: the word \"indoor\"", "cleaned_prediction": "outdoor", "gt": "int\u00e9rieur"}, {"input_prompt": "Input: pearl\nOutput:", "test_query": "pearl", "prediction": "pearl\ninput: ralep\noutput:", "cleaned_prediction": "pearl", "gt": "perle"}, {"input_prompt": "Input: draft\nOutput:", "test_query": "draft", "prediction": "final\nstep 1: review the draft for", "cleaned_prediction": "final", "gt": "brouillon"}, {"input_prompt": "Input: honor\nOutput:", "test_query": "honor", "prediction": "honor\nhonor is a virtue that is valued", "cleaned_prediction": "honor", "gt": "honneur"}, {"input_prompt": "Input: right\nOutput:", "test_query": "right", "prediction": "1. 1.000000", "cleaned_prediction": "1. 1.000000", "gt": "droit"}, {"input_prompt": "Input: privacy\nOutput:", "test_query": "privacy", "prediction": "privacy\n##### problem\ngiven a set of points", "cleaned_prediction": "privacy", "gt": "intimit\u00e9"}, {"input_prompt": "Input: tuesday\nOutput:", "test_query": "tuesday", "prediction": "tuesday\n\ninput: wednesday\noutput:", "cleaned_prediction": "tuesday", "gt": "mardi"}, {"input_prompt": "Input: egypt\nOutput:", "test_query": "egypt", "prediction": "1. 7 2. 7", "cleaned_prediction": "1. 7 2. 7", "gt": "\u00c9gypte"}, {"input_prompt": "Input: catholic\nOutput:", "test_query": "catholic", "prediction": "\"the catholic church, also known as the roman", "cleaned_prediction": "\"the catholic church, also known as the roman", "gt": "catholique"}, {"input_prompt": "Input: november\nOutput:", "test_query": "november", "prediction": "november is the 11th month of the", "cleaned_prediction": "november is the 11th month of the", "gt": "novembre"}, {"input_prompt": "Input: offering\nOutput:", "test_query": "offering", "prediction": "offering\nrelated terms: gift, donation, contribution", "cleaned_prediction": "offering", "gt": "offre"}, {"input_prompt": "Input: resumed\nOutput:", "test_query": "resumed", "prediction": "resumed\ndefinition: (verb) to resume an", "cleaned_prediction": "resumed", "gt": "repris"}, {"input_prompt": "Input: precise\nOutput:", "test_query": "precise", "prediction": "precise\n=====\n\n### step 1: analy", "cleaned_prediction": "precise", "gt": "pr\u00e9cis"}, {"input_prompt": "Input: unofficial\nOutput:", "test_query": "unofficial", "prediction": "unofficial\nthe word \"unofficial\" is a", "cleaned_prediction": "unofficial", "gt": "non officiel"}, {"input_prompt": "Input: string\nOutput:", "test_query": "string", "prediction": "string\n\nfunction takes a string as input and returns", "cleaned_prediction": "string", "gt": "corde"}, {"input_prompt": "Input: grid\nOutput:", "test_query": "grid", "prediction": "minimum number of moves to get from the start cell", "cleaned_prediction": "minimum number of moves to get from the start cell", "gt": "grille"}, {"input_prompt": "Input: life\nOutput:", "test_query": "life", "prediction": "\"the length of life is long, if you", "cleaned_prediction": "\"the length of life is long, if you", "gt": "vie"}, {"input_prompt": "Input: electrical\nOutput:", "test_query": "electrical", "prediction": "audio\ntechnology: digital\nbrand: sony", "cleaned_prediction": "audio", "gt": "\u00e9lectrique"}, {"input_prompt": "Input: sharing\nOutput:", "test_query": "sharing", "prediction": "sharing\ncategory: concept\nwiki: https://", "cleaned_prediction": "sharing", "gt": "partage"}, {"input_prompt": "Input: alexander\nOutput:", "test_query": "alexander", "prediction": "1. alexander the great (356-323", "cleaned_prediction": "1. alexander the great (356-323", "gt": "Alexandre"}, {"input_prompt": "Input: diseases\nOutput:", "test_query": "diseases", "prediction": "1. **influenza** (", "cleaned_prediction": "1. **influenza** (", "gt": "maladies"}, {"input_prompt": "Input: item\nOutput:", "test_query": "item", "prediction": "item\n\n# item\n=====================================\n\nan item", "cleaned_prediction": "item", "gt": "article"}, {"input_prompt": "Input: runner\nOutput:", "test_query": "runner", "prediction": "runner\n\ninput: runners\noutput: runners", "cleaned_prediction": "runner", "gt": "coureur"}, {"input_prompt": "Input: put\nOutput:", "test_query": "put", "prediction": "put\nduration: 0 ms\nsuccess:", "cleaned_prediction": "put", "gt": "mettre"}, {"input_prompt": "Input: characters\nOutput:", "test_query": "characters", "prediction": "string\n\nrules:\n- function takes a string of", "cleaned_prediction": "string", "gt": "personnages"}, {"input_prompt": "Input: seven\nOutput:", "test_query": "seven", "prediction": "7\nexplanation: the input integer is", "cleaned_prediction": "7", "gt": "sept"}, {"input_prompt": "Input: christopher\nOutput:", "test_query": "christopher", "prediction": "christopher\n\ninput: christopher\noutput: christopher", "cleaned_prediction": "christopher", "gt": "christophe"}, {"input_prompt": "Input: live\nOutput:", "test_query": "live", "prediction": "live\ninput: evil\noutput: live", "cleaned_prediction": "live", "gt": "vivre"}, {"input_prompt": "Input: vietnamese\nOutput:", "test_query": "vietnamese", "prediction": "(v) vi\u1ec7t nam\nthe flag of vietnam", "cleaned_prediction": "(v) vi\u1ec7t nam", "gt": "vietnamien"}, {"input_prompt": "Input: the\nOutput:", "test_query": "the", "prediction": "the\ninput: the\noutput: the", "cleaned_prediction": "the", "gt": "le/la/les"}, {"input_prompt": "Input: situated\nOutput:", "test_query": "situated", "prediction": "situated\ninput: situated\noutput: situated", "cleaned_prediction": "situated", "gt": "situ\u00e9"}, {"input_prompt": "Input: mrs\nOutput:", "test_query": "mrs", "prediction": "3\nexplanation: the only possible way to", "cleaned_prediction": "3", "gt": "madame"}, {"input_prompt": "Input: diversity\nOutput:", "test_query": "diversity", "prediction": "diversity\nerror: 0\nstandard deviation:", "cleaned_prediction": "diversity", "gt": "diversit\u00e9"}, {"input_prompt": "Input: blind\nOutput:", "test_query": "blind", "prediction": "blind\ndefinition: (adjective) unable to", "cleaned_prediction": "blind", "gt": "aveugle"}, {"input_prompt": "Input: brought\nOutput:", "test_query": "brought", "prediction": "brought\ncorrected: brought\ninput", "cleaned_prediction": "brought", "gt": "apport\u00e9"}, {"input_prompt": "Input: departed\nOutput:", "test_query": "departed", "prediction": "departed\ninput: arrived\noutput: arrived", "cleaned_prediction": "departed", "gt": "parti"}, {"input_prompt": "Input: locally\nOutput:", "test_query": "locally", "prediction": "locally\nexamples:\n* \"i am going to", "cleaned_prediction": "locally", "gt": "localement"}, {"input_prompt": "Input: customs\nOutput:", "test_query": "customs", "prediction": "\"customs\"\ninput: custom\noutput:", "cleaned_prediction": "\"customs\"", "gt": "douanes"}, {"input_prompt": "Input: derivative\nOutput:", "test_query": "derivative", "prediction": "derivative\nfailed to parse (mathml with svg", "cleaned_prediction": "derivative", "gt": "d\u00e9riv\u00e9"}, {"input_prompt": "Input: morocco\nOutput:", "test_query": "morocco", "prediction": "morocco, officially known as the kingdom of morocco,", "cleaned_prediction": "morocco, officially known as the kingdom of morocco,", "gt": "maroc"}, {"input_prompt": "Input: technically\nOutput:", "test_query": "technically", "prediction": "technically\ndefinition: (adverb) in a", "cleaned_prediction": "technically", "gt": "techniquement"}, {"input_prompt": "Input: immediate\nOutput:", "test_query": "immediate", "prediction": "immediate\nside effects: none\neffects: none", "cleaned_prediction": "immediate", "gt": "imm\u00e9diat"}, {"input_prompt": "Input: signals\nOutput:", "test_query": "signals", "prediction": "a vector of indices\nmath function: none", "cleaned_prediction": "a vector of indices", "gt": "signaux"}, {"input_prompt": "Input: location\nOutput:", "test_query": "location", "prediction": "location\noutput: location\noutput: location", "cleaned_prediction": "location", "gt": "emplacement"}, {"input_prompt": "Input: valley\nOutput:", "test_query": "valley", "prediction": "the valley is a low area of land between hills", "cleaned_prediction": "the valley is a low area of land between hills", "gt": "vall\u00e9e"}, {"input_prompt": "Input: revolt\nOutput:", "test_query": "revolt", "prediction": "revolt\nthe word revolt is not a valid input", "cleaned_prediction": "revolt", "gt": "r\u00e9volte"}, {"input_prompt": "Input: composers\nOutput:", "test_query": "composers", "prediction": "list of composers\ninput: composers\noutput:", "cleaned_prediction": "list of composers", "gt": "compositeurs"}, {"input_prompt": "Input: deal\nOutput:", "test_query": "deal", "prediction": "deal\ncapitalization is not needed for this word", "cleaned_prediction": "deal", "gt": "accord"}, {"input_prompt": "Input: amazing\nOutput:", "test_query": "amazing", "prediction": "amazing\ninput: awesome\noutput: awesome", "cleaned_prediction": "amazing", "gt": "incroyable"}, {"input_prompt": "Input: humanity\nOutput:", "test_query": "humanity", "prediction": "a 3d model of the human body", "cleaned_prediction": "a 3d model of the human body", "gt": "humanit\u00e9"}, {"input_prompt": "Input: birth\nOutput:", "test_query": "birth", "prediction": "\"happy birthday to you!\"\ninput: cake", "cleaned_prediction": "\"happy birthday to you!\"", "gt": "naissance"}, {"input_prompt": "Input: donated\nOutput:", "test_query": "donated", "prediction": "donated\ninput: donated\noutput: don", "cleaned_prediction": "donated", "gt": "donn\u00e9"}, {"input_prompt": "Input: interim\nOutput:", "test_query": "interim", "prediction": "interim\nconfidence: 0.97", "cleaned_prediction": "interim", "gt": "int\u00e9rim"}, {"input_prompt": "Input: traditionally\nOutput:", "test_query": "traditionally", "prediction": "traditionally\ntraditionally, the term \"gentry", "cleaned_prediction": "traditionally", "gt": "traditionnellement"}, {"input_prompt": "Input: increase\nOutput:", "test_query": "increase", "prediction": "increase\ninput: decrease\noutput: decrease", "cleaned_prediction": "increase", "gt": "augmenter"}, {"input_prompt": "Input: sandy\nOutput:", "test_query": "sandy", "prediction": "sandy\n\ninput: sdfsdfsdf\noutput", "cleaned_prediction": "sandy", "gt": "sableux"}, {"input_prompt": "Input: disaster\nOutput:", "test_query": "disaster", "prediction": "disaster\ninput: disasters\noutput: disasters", "cleaned_prediction": "disaster", "gt": "d\u00e9sastre"}, {"input_prompt": "Input: collaborative\nOutput:", "test_query": "collaborative", "prediction": "collaborative\nerror: collaborative\ni am a collaborative", "cleaned_prediction": "collaborative", "gt": "collaboratif"}, {"input_prompt": "Input: recurring\nOutput:", "test_query": "recurring", "prediction": "recurring\ninput: recurring\noutput: recurring", "cleaned_prediction": "recurring", "gt": "r\u00e9current"}, {"input_prompt": "Input: deployed\nOutput:", "test_query": "deployed", "prediction": "deployed\nduration: 1 ms\nsuccess rate", "cleaned_prediction": "deployed", "gt": "d\u00e9ploy\u00e9"}, {"input_prompt": "Input: tiny\nOutput:", "test_query": "tiny", "prediction": "tiny\n\ninput: small\noutput: small", "cleaned_prediction": "tiny", "gt": "petit"}, {"input_prompt": "Input: ref\nOutput:", "test_query": "ref", "prediction": "ref\nfailure: ref\nsuccess: ref", "cleaned_prediction": "ref", "gt": "r\u00e9f\u00e9rence"}, {"input_prompt": "Input: connects\nOutput:", "test_query": "connects", "prediction": "connects\ndefinition: verb. to link or join", "cleaned_prediction": "connects", "gt": "se connecte"}, {"input_prompt": "Input: edge\nOutput:", "test_query": "edge", "prediction": "edge\ninput: edge\noutput: edge", "cleaned_prediction": "edge", "gt": "bord"}, {"input_prompt": "Input: all\nOutput:", "test_query": "all", "prediction": "all\nerror: all\n\n# error: all", "cleaned_prediction": "all", "gt": "tous"}, {"input_prompt": "Input: against\nOutput:", "test_query": "against", "prediction": "against\ndefinition: (adverb) in opposition", "cleaned_prediction": "against", "gt": "contre"}, {"input_prompt": "Input: realize\nOutput:", "test_query": "realize", "prediction": "realize\nsynonyms: understand, comprehend, grasp", "cleaned_prediction": "realize", "gt": "r\u00e9aliser"}, {"input_prompt": "Input: meat\nOutput:", "test_query": "meat", "prediction": "1. beef\n2. pork\n3", "cleaned_prediction": "1. beef", "gt": "viande"}, {"input_prompt": "Input: reveals\nOutput:", "test_query": "reveals", "prediction": "reveals\ncategory: general\ntopic: information", "cleaned_prediction": "reveals", "gt": "r\u00e9v\u00e8le"}, {"input_prompt": "Input: translator\nOutput:", "test_query": "translator", "prediction": "\"the english language is a west germanic language", "cleaned_prediction": "\"the english language is a west germanic language", "gt": "traducteur"}, {"input_prompt": "Input: collect\nOutput:", "test_query": "collect", "prediction": "collect\ndifficulty: easy\nmaximum marks:", "cleaned_prediction": "collect", "gt": "recueillir"}, {"input_prompt": "Input: execution\nOutput:", "test_query": "execution", "prediction": "execution\ninsights:\n- the input and output", "cleaned_prediction": "execution", "gt": "ex\u00e9cution"}, {"input_prompt": "Input: dinner\nOutput:", "test_query": "dinner", "prediction": "\"dinner is typically eaten in the evening.", "cleaned_prediction": "\"dinner is typically eaten in the evening.", "gt": "d\u00eener"}, {"input_prompt": "Input: viola\nOutput:", "test_query": "viola", "prediction": "1\n\ninput: cello\noutput:", "cleaned_prediction": "1", "gt": "alto"}, {"input_prompt": "Input: instructor\nOutput:", "test_query": "instructor", "prediction": "a list of students who are in the same group", "cleaned_prediction": "a list of students who are in the same group", "gt": "instructeur"}, {"input_prompt": "Input: broadcasts\nOutput:", "test_query": "broadcasts", "prediction": "analysis:\nthe problem is asking to find the", "cleaned_prediction": "analysis:", "gt": "diffusions"}, {"input_prompt": "Input: jurisdiction\nOutput:", "test_query": "jurisdiction", "prediction": "a list of all the possible jurisdictions in the legal", "cleaned_prediction": "a list of all the possible jurisdictions in the legal", "gt": "juridiction"}, {"input_prompt": "Input: wearing\nOutput:", "test_query": "wearing", "prediction": "wearing\nsynonyms: donning\nantonyms", "cleaned_prediction": "wearing", "gt": "porter"}, {"input_prompt": "Input: griffin\nOutput:", "test_query": "griffin", "prediction": "griffin\ninput: griffins\noutput:", "cleaned_prediction": "griffin", "gt": "griffon"}, {"input_prompt": "Input: chilean\nOutput:", "test_query": "chilean", "prediction": "chile\ninput: bahrain\noutput: bahrain", "cleaned_prediction": "chile", "gt": "chilien"}, {"input_prompt": "Input: hired\nOutput:", "test_query": "hired", "prediction": "hired\ninput: fired\noutput: fired", "cleaned_prediction": "hired", "gt": "embauch\u00e9"}, {"input_prompt": "Input: hell\nOutput:", "test_query": "hell", "prediction": "2\nexplanation: the word \"hell\"", "cleaned_prediction": "2", "gt": "enfer"}, {"input_prompt": "Input: previously\nOutput:", "test_query": "previously", "prediction": "previously\ninput: previously\noutput: previously", "cleaned_prediction": "previously", "gt": "pr\u00e9c\u00e9demment"}, {"input_prompt": "Input: empty\nOutput:", "test_query": "empty", "prediction": "empty\nexplanation: there are no elements in the", "cleaned_prediction": "empty", "gt": "vide"}, {"input_prompt": "Input: jun\nOutput:", "test_query": "jun", "prediction": "\"jun\"\n\ninput: june\noutput:", "cleaned_prediction": "\"jun\"", "gt": "Jun"}, {"input_prompt": "Input: bacteria\nOutput:", "test_query": "bacteria", "prediction": "bacteria\n---\n\ndef count_bacteria(population):", "cleaned_prediction": "bacteria", "gt": "bact\u00e9rie"}, {"input_prompt": "Input: remote\nOutput:", "test_query": "remote", "prediction": "remote\ninput: remote\noutput: remote", "cleaned_prediction": "remote", "gt": "t\u00e9l\u00e9commande"}, {"input_prompt": "Input: actively\nOutput:", "test_query": "actively", "prediction": "actively\ndefinition: (adv) in a positive", "cleaned_prediction": "actively", "gt": "activement"}, {"input_prompt": "Input: nicholas\nOutput:", "test_query": "nicholas", "prediction": "nicholas was a bishop of myra in", "cleaned_prediction": "nicholas was a bishop of myra in", "gt": "Nicolas"}, {"input_prompt": "Input: hot\nOutput:", "test_query": "hot", "prediction": "hot\nexplanation: the word \"hot\" spelled", "cleaned_prediction": "hot", "gt": "chaud"}, {"input_prompt": "Input: scientific\nOutput:", "test_query": "scientific", "prediction": "scientific\nin physics, a scalar is a quantity", "cleaned_prediction": "scientific", "gt": "scientifique"}, {"input_prompt": "Input: released\nOutput:", "test_query": "released", "prediction": "released\ndifficult level: easy\ncategory:", "cleaned_prediction": "released", "gt": "lib\u00e9r\u00e9"}, {"input_prompt": "Input: substantial\nOutput:", "test_query": "substantial", "prediction": "substantial\ndefinition: (adjective) important or", "cleaned_prediction": "substantial", "gt": "substantiel"}, {"input_prompt": "Input: com\nOutput:", "test_query": "com", "prediction": "com\nexplanation: the string \"com\" is", "cleaned_prediction": "com", "gt": "dot com - point com"}, {"input_prompt": "Input: girl\nOutput:", "test_query": "girl", "prediction": "the girl is a young female.\n\nexplanation: the", "cleaned_prediction": "the girl is a young female.", "gt": "fille"}, {"input_prompt": "Input: eldest\nOutput:", "test_query": "eldest", "prediction": "\"i am the eldest.\"\nexplanation: the input", "cleaned_prediction": "\"i am the eldest.\"", "gt": "a\u00een\u00e9"}, {"input_prompt": "Input: funny\nOutput:", "test_query": "funny", "prediction": "i'm funny. i'm happy. i'm", "cleaned_prediction": "i'm funny. i'm happy. i'm", "gt": "dr\u00f4le"}, {"input_prompt": "Input: victories\nOutput:", "test_query": "victories", "prediction": "victories\ndefinition: the number of times an algorithm", "cleaned_prediction": "victories", "gt": "victoires"}, {"input_prompt": "Input: eagles\nOutput:", "test_query": "eagles", "prediction": "eagle\n\nexplanation: the first letter of the word", "cleaned_prediction": "eagle", "gt": "aigles"}, {"input_prompt": "Input: increasing\nOutput:", "test_query": "increasing", "prediction": "increasing\n\nexplanation: the given array is already sorted", "cleaned_prediction": "increasing", "gt": "augmentant"}, {"input_prompt": "Input: promoting\nOutput:", "test_query": "promoting", "prediction": "promoting\ndefinition: to give support or encouragement to", "cleaned_prediction": "promoting", "gt": "promouvoir"}, {"input_prompt": "Input: mosque\nOutput:", "test_query": "mosque", "prediction": "'mosque' is a noun, referring to", "cleaned_prediction": "'mosque' is a noun, referring to", "gt": "mosqu\u00e9e"}, {"input_prompt": "Input: bavaria\nOutput:", "test_query": "bavaria", "prediction": "bavaria\ncorrected: bavaria\nreason", "cleaned_prediction": "bavaria", "gt": "Bavi\u00e8re"}, {"input_prompt": "Input: explains\nOutput:", "test_query": "explains", "prediction": "explains\ninput: explain\noutput: explain", "cleaned_prediction": "explains", "gt": "explique"}, {"input_prompt": "Input: nice\nOutput:", "test_query": "nice", "prediction": "nice\n\ninput: racecar\noutput: race", "cleaned_prediction": "nice", "gt": "agr\u00e9able"}, {"input_prompt": "Input: august\nOutput:", "test_query": "august", "prediction": "august is the eighth month of the year in", "cleaned_prediction": "august is the eighth month of the year in", "gt": "ao\u00fbt"}, {"input_prompt": "Input: soviet\nOutput:", "test_query": "soviet", "prediction": "soviet\ninput: ussr\noutput: ussr", "cleaned_prediction": "soviet", "gt": "sovi\u00e9tique"}, {"input_prompt": "Input: answers\nOutput:", "test_query": "answers", "prediction": "answers\n\ndef calculate_sum_of_squares(numbers):", "cleaned_prediction": "answers", "gt": "r\u00e9ponses"}, {"input_prompt": "Input: personalities\nOutput:", "test_query": "personalities", "prediction": "4\nexplanation: we can choose the following", "cleaned_prediction": "4", "gt": "personnalit\u00e9s"}, {"input_prompt": "Input: seconds\nOutput:", "test_query": "seconds", "prediction": "formatted string\n\"\"\"\n\ndef format_seconds(seconds):", "cleaned_prediction": "formatted string", "gt": "secondes"}, {"input_prompt": "Input: load\nOutput:", "test_query": "load", "prediction": "load\nduration: 0:00:01", "cleaned_prediction": "load", "gt": "charger"}, {"input_prompt": "Input: accounts\nOutput:", "test_query": "accounts", "prediction": "minimum balance for each account\nconstraints: accounts is", "cleaned_prediction": "minimum balance for each account", "gt": "comptes"}, {"input_prompt": "Input: olympics\nOutput:", "test_query": "olympics", "prediction": "the olympic games, also known as the olympics,", "cleaned_prediction": "the olympic games, also known as the olympics,", "gt": "olympiques"}, {"input_prompt": "Input: founded\nOutput:", "test_query": "founded", "prediction": "founded\nerror: undefined\n  at object.<", "cleaned_prediction": "founded", "gt": "fond\u00e9"}, {"input_prompt": "Input: suspected\nOutput:", "test_query": "suspected", "prediction": "suspected\ndefinition: (verb) to suspect or", "cleaned_prediction": "suspected", "gt": "suspect\u00e9"}, {"input_prompt": "Input: chose\nOutput:", "test_query": "chose", "prediction": "chose\ninput: choose\noutput: choose", "cleaned_prediction": "chose", "gt": "choisi"}, {"input_prompt": "Input: claimed\nOutput:", "test_query": "claimed", "prediction": "claimed\ninput: claim\noutput: claim", "cleaned_prediction": "claimed", "gt": "revendiqu\u00e9"}, {"input_prompt": "Input: groups\nOutput:", "test_query": "groups", "prediction": "groups with the first element in each group sorted", "cleaned_prediction": "groups with the first element in each group sorted", "gt": "groupes"}, {"input_prompt": "Input: riding\nOutput:", "test_query": "riding", "prediction": "horseback\ninput: walking\noutput: on", "cleaned_prediction": "horseback", "gt": "\u00e9quitation"}, {"input_prompt": "Input: fails\nOutput:", "test_query": "fails", "prediction": "the input string contains only the following characters: f", "cleaned_prediction": "the input string contains only the following characters: f", "gt": "\u00e9choue"}, {"input_prompt": "Input: enough\nOutput:", "test_query": "enough", "prediction": "enough\ninput: enough\noutput: enough", "cleaned_prediction": "enough", "gt": "assez"}, {"input_prompt": "Input: removal\nOutput:", "test_query": "removal", "prediction": "removal\ndefinition: the act of taking away or", "cleaned_prediction": "removal", "gt": "enl\u00e8vement"}, {"input_prompt": "Input: satisfy\nOutput:", "test_query": "satisfy", "prediction": "satisfy\ninput: satisfy\noutput: satisfy", "cleaned_prediction": "satisfy", "gt": "satisfaire"}, {"input_prompt": "Input: extent\nOutput:", "test_query": "extent", "prediction": "extent\ninput: \n  - areas\noutput", "cleaned_prediction": "extent", "gt": "\u00e9tendue"}, {"input_prompt": "Input: friends\nOutput:", "test_query": "friends", "prediction": "['rafael', 'leia', '", "cleaned_prediction": "['rafael', 'leia', '", "gt": "amis"}, {"input_prompt": "Input: concerns\nOutput:", "test_query": "concerns", "prediction": "a set of suggested responses\nconcerns are statements", "cleaned_prediction": "a set of suggested responses", "gt": "pr\u00e9occupations"}, {"input_prompt": "Input: hey\nOutput:", "test_query": "hey", "prediction": "{ \"word\": \"hey\", \"length\":", "cleaned_prediction": "{ \"word\": \"hey\", \"length\":", "gt": "salut"}, {"input_prompt": "Input: thought\nOutput:", "test_query": "thought", "prediction": "\"thought\" is a noun. it refers to", "cleaned_prediction": "\"thought\" is a noun. it refers to", "gt": "pens\u00e9e"}, {"input_prompt": "Input: gardens\nOutput:", "test_query": "gardens", "prediction": "\"the gardens are beautiful.\"\n\nexplanation: the program", "cleaned_prediction": "\"the gardens are beautiful.\"", "gt": "jardins"}, {"input_prompt": "Input: creek\nOutput:", "test_query": "creek", "prediction": "a creek is a small, natural stream of water", "cleaned_prediction": "a creek is a small, natural stream of water", "gt": "ruisseau"}, {"input_prompt": "Input: path\nOutput:", "test_query": "path", "prediction": "(path, string)\ndescription: this function takes", "cleaned_prediction": "(path, string)", "gt": "chemin"}, {"input_prompt": "Input: requirement\nOutput:", "test_query": "requirement", "prediction": "requirement\nrequired input fields: requirement\noptional input", "cleaned_prediction": "requirement", "gt": "exigence"}, {"input_prompt": "Input: walk\nOutput:", "test_query": "walk", "prediction": "walk\ninput: walk\noutput: walk", "cleaned_prediction": "walk", "gt": "marcher"}, {"input_prompt": "Input: poems\nOutput:", "test_query": "poems", "prediction": "poetry\npoetry is a form of expression that", "cleaned_prediction": "poetry", "gt": "po\u00e8mes"}, {"input_prompt": "Input: orchestra\nOutput:", "test_query": "orchestra", "prediction": "orchestra\ninput: orchestra\noutput: orchestra", "cleaned_prediction": "orchestra", "gt": "orchestre"}, {"input_prompt": "Input: tenth\nOutput:", "test_query": "tenth", "prediction": "\"ten\"\ninput: one\noutput: \"", "cleaned_prediction": "\"ten\"", "gt": "dixi\u00e8me"}, {"input_prompt": "Input: papers\nOutput:", "test_query": "papers", "prediction": "papers\ninput: papers\noutput: papers", "cleaned_prediction": "papers", "gt": "papiers"}, {"input_prompt": "Input: hunt\nOutput:", "test_query": "hunt", "prediction": "hunt\noutput: hunt\ninput: hello", "cleaned_prediction": "hunt", "gt": "chasser"}, {"input_prompt": "Input: planets\nOutput:", "test_query": "planets", "prediction": "```\n[\n  {\n    \"id\":", "cleaned_prediction": "```", "gt": "plan\u00e8tes"}, {"input_prompt": "Input: handled\nOutput:", "test_query": "handled", "prediction": "handled\ntime complexity: o(1)\nspace", "cleaned_prediction": "handled", "gt": "g\u00e9r\u00e9"}, {"input_prompt": "Input: picture\nOutput:", "test_query": "picture", "prediction": "picture\ntasks to be performed:\n- convert picture", "cleaned_prediction": "picture", "gt": "image"}, {"input_prompt": "Input: gold\nOutput:", "test_query": "gold", "prediction": "\"gold is a chemical element with the symbol au", "cleaned_prediction": "\"gold is a chemical element with the symbol au", "gt": "or"}, {"input_prompt": "Input: husband\nOutput:", "test_query": "husband", "prediction": "partner\n\ninput: wife\noutput: partner", "cleaned_prediction": "partner", "gt": "mari"}, {"input_prompt": "Input: looking\nOutput:", "test_query": "looking", "prediction": "looking\n---\ninput: looking\noutput: looking", "cleaned_prediction": "looking", "gt": "regardant"}, {"input_prompt": "Input: argentina\nOutput:", "test_query": "argentina", "prediction": "argentina\nargentina\nargentina", "cleaned_prediction": "argentina", "gt": "argentine"}, {"input_prompt": "Input: symbols\nOutput:", "test_query": "symbols", "prediction": "symbols\ncompare: not comparable\nthe process of", "cleaned_prediction": "symbols", "gt": "symboles"}, {"input_prompt": "Input: taiwan\nOutput:", "test_query": "taiwan", "prediction": "taiwan\ninput: taiwanese\noutput:", "cleaned_prediction": "taiwan", "gt": "Ta\u00efwan"}, {"input_prompt": "Input: likewise\nOutput:", "test_query": "likewise", "prediction": "likewise\ndefinition: in the same way or manner", "cleaned_prediction": "likewise", "gt": "de m\u00eame"}, {"input_prompt": "Input: highly\nOutput:", "test_query": "highly", "prediction": "highly\ndefinition: in a high degree or measure", "cleaned_prediction": "highly", "gt": "hautement"}, {"input_prompt": "Input: kings\nOutput:", "test_query": "kings", "prediction": "king\ninput: abc\noutput: a", "cleaned_prediction": "king", "gt": "rois"}, {"input_prompt": "Input: fundamental\nOutput:", "test_query": "fundamental", "prediction": "fundamental\n##### step 1: understand the input", "cleaned_prediction": "fundamental", "gt": "fondamental"}, {"input_prompt": "Input: monastery\nOutput:", "test_query": "monastery", "prediction": "\"the monastery\"\nresult: the program should", "cleaned_prediction": "\"the monastery\"", "gt": "monast\u00e8re"}, {"input_prompt": "Input: sessions\nOutput:", "test_query": "sessions", "prediction": "sessions\ntasks:\n1. add a new session", "cleaned_prediction": "sessions", "gt": "s\u00e9ances"}, {"input_prompt": "Input: become\nOutput:", "test_query": "become", "prediction": "become\ninput: become\noutput: become", "cleaned_prediction": "become", "gt": "devenir"}, {"input_prompt": "Input: movement\nOutput:", "test_query": "movement", "prediction": "movement\ntypes: movement\ndescription: the movement", "cleaned_prediction": "movement", "gt": "mouvement"}, {"input_prompt": "Input: springs\nOutput:", "test_query": "springs", "prediction": "springs\ntypes: mechanical components\nfunctions: spring", "cleaned_prediction": "springs", "gt": "ressorts"}, {"input_prompt": "Input: dark\nOutput:", "test_query": "dark", "prediction": "dark\ndefinition: not illuminated; lacking light", "cleaned_prediction": "dark", "gt": "sombre"}, {"input_prompt": "Input: bet\nOutput:", "test_query": "bet", "prediction": "bet\ninput: abet\noutput: ab", "cleaned_prediction": "bet", "gt": "pari"}, {"input_prompt": "Input: painters\nOutput:", "test_query": "painters", "prediction": "4\nexplanation: \nthe given array is", "cleaned_prediction": "4", "gt": "peintres"}, {"input_prompt": "Input: stones\nOutput:", "test_query": "stones", "prediction": "stones[0] + stones[1] +", "cleaned_prediction": "stones[0] + stones[1] +", "gt": "pierres"}, {"input_prompt": "Input: frankfurt\nOutput:", "test_query": "frankfurt", "prediction": "frankfurt am main\ninput: moscow\noutput", "cleaned_prediction": "frankfurt am main", "gt": "Francfort"}, {"input_prompt": "Input: returns\nOutput:", "test_query": "returns", "prediction": "returns\nrevision: 4\ntags: #", "cleaned_prediction": "returns", "gt": "retours"}, {"input_prompt": "Input: carpenter\nOutput:", "test_query": "carpenter", "prediction": "carpenter\n\ninput: carpenter\noutput: carpenter", "cleaned_prediction": "carpenter", "gt": "charpentier"}, {"input_prompt": "Input: winner\nOutput:", "test_query": "winner", "prediction": "a string with the winner's name\n\n```python", "cleaned_prediction": "a string with the winner's name", "gt": "gagnant"}, {"input_prompt": "Input: reach\nOutput:", "test_query": "reach", "prediction": "reach\n================\n\n### description\n\nthe `reach", "cleaned_prediction": "reach", "gt": "atteindre"}, {"input_prompt": "Input: healthy\nOutput:", "test_query": "healthy", "prediction": "healthy\n\ninput: unhealthy\noutput: unhealthy", "cleaned_prediction": "healthy", "gt": "sain"}, {"input_prompt": "Input: march\nOutput:", "test_query": "march", "prediction": "the month of march is the third month of the", "cleaned_prediction": "the month of march is the third month of the", "gt": "mars"}, {"input_prompt": "Input: assessed\nOutput:", "test_query": "assessed", "prediction": "assessed\nassessed is a verb that means to", "cleaned_prediction": "assessed", "gt": "\u00e9valu\u00e9"}, {"input_prompt": "Input: story\nOutput:", "test_query": "story", "prediction": "story\nthe story of the 2011 australian", "cleaned_prediction": "story", "gt": "histoire"}, {"input_prompt": "Input: fifteen\nOutput:", "test_query": "fifteen", "prediction": "4\n\nexplanation: the number 15 has", "cleaned_prediction": "4", "gt": "quinze"}, {"input_prompt": "Input: elements\nOutput:", "test_query": "elements", "prediction": "array with elements\nrules:\n- use array methods", "cleaned_prediction": "array with elements", "gt": "\u00e9l\u00e9ments"}, {"input_prompt": "Input: problematic\nOutput:", "test_query": "problematic", "prediction": "problematic\ndifficulty: 5\n\nthis problem is", "cleaned_prediction": "problematic", "gt": "probl\u00e9matique"}, {"input_prompt": "Input: rebels\nOutput:", "test_query": "rebels", "prediction": "\"rebels\"\ninput: rebels\noutput", "cleaned_prediction": "\"rebels\"", "gt": "rebelles"}, {"input_prompt": "Input: talk\nOutput:", "test_query": "talk", "prediction": "to talk is to communicate through spoken words. it", "cleaned_prediction": "to talk is to communicate through spoken words. it", "gt": "parler"}, {"input_prompt": "Input: restoration\nOutput:", "test_query": "restoration", "prediction": "restoration\nsynonyms: repair, mend, fix", "cleaned_prediction": "restoration", "gt": "restauration"}, {"input_prompt": "Input: review\nOutput:", "test_query": "review", "prediction": "'i would like to know more about the review", "cleaned_prediction": "'i would like to know more about the review", "gt": "r\u00e9vision"}, {"input_prompt": "Input: adequate\nOutput:", "test_query": "adequate", "prediction": "adequate\ndefinition: (of a person or their", "cleaned_prediction": "adequate", "gt": "ad\u00e9quat"}, {"input_prompt": "Input: biblical\nOutput:", "test_query": "biblical", "prediction": "a man is a human male. a woman is", "cleaned_prediction": "a man is a human male. a woman is", "gt": "biblique"}, {"input_prompt": "Input: verifiable\nOutput:", "test_query": "verifiable", "prediction": "verifiable\ndomain: mathematics\nproblem: what", "cleaned_prediction": "verifiable", "gt": "v\u00e9rifiable"}, {"input_prompt": "Input: tobacco\nOutput:", "test_query": "tobacco", "prediction": "tobacco\ntobacco is a product prepared from", "cleaned_prediction": "tobacco", "gt": "tabac"}, {"input_prompt": "Input: austria\nOutput:", "test_query": "austria", "prediction": "austria\ninput: uk\noutput: united kingdom", "cleaned_prediction": "austria", "gt": "autriche"}, {"input_prompt": "Input: roller\nOutput:", "test_query": "roller", "prediction": "\"the roller is a type of mill used in", "cleaned_prediction": "\"the roller is a type of mill used in", "gt": "rouleau"}, {"input_prompt": "Input: journey\nOutput:", "test_query": "journey", "prediction": "journey\ninput: journey\noutput: journey", "cleaned_prediction": "journey", "gt": "voyage"}, {"input_prompt": "Input: big\nOutput:", "test_query": "big", "prediction": "big\ninput: 1\noutput:", "cleaned_prediction": "big", "gt": "grand"}, {"input_prompt": "Input: drummer\nOutput:", "test_query": "drummer", "prediction": "drummer\ninput: musician\noutput: musician", "cleaned_prediction": "drummer", "gt": "batteur"}, {"input_prompt": "Input: explained\nOutput:", "test_query": "explained", "prediction": "explained\ntheory: explained\nhow to explain something", "cleaned_prediction": "explained", "gt": "expliqu\u00e9"}, {"input_prompt": "Input: christianity\nOutput:", "test_query": "christianity", "prediction": "christianity is a monotheistic religion based on the", "cleaned_prediction": "christianity is a monotheistic religion based on the", "gt": "christianisme"}, {"input_prompt": "Input: ministers\nOutput:", "test_query": "ministers", "prediction": "ministers\nduration: 1\ndescription: this", "cleaned_prediction": "ministers", "gt": "ministres"}, {"input_prompt": "Input: difficulties\nOutput:", "test_query": "difficulties", "prediction": "difficulties\nerror: unable to find input\n\nthis", "cleaned_prediction": "difficulties", "gt": "difficult\u00e9s"}, {"input_prompt": "Input: template\nOutput:", "test_query": "template", "prediction": "template\nworkflow stage: analysis\nworkflow type:", "cleaned_prediction": "template", "gt": "mod\u00e8le"}, {"input_prompt": "Input: ethnicity\nOutput:", "test_query": "ethnicity", "prediction": "ethnicity\nthe concept of ethnicity is complex and multif", "cleaned_prediction": "ethnicity", "gt": "ethnicit\u00e9"}, {"input_prompt": "Input: dependent\nOutput:", "test_query": "dependent", "prediction": "independent\ndifficulty: medium\nmax score:", "cleaned_prediction": "independent", "gt": "d\u00e9pendant"}, {"input_prompt": "Input: charged\nOutput:", "test_query": "charged", "prediction": "charged\nwiki: https://en.wikipedia.org/wiki", "cleaned_prediction": "charged", "gt": "charg\u00e9"}, {"input_prompt": "Input: heights\nOutput:", "test_query": "heights", "prediction": "heights with all elements less than the maximum height moved", "cleaned_prediction": "heights with all elements less than the maximum height moved", "gt": "hauteurs"}, {"input_prompt": "Input: correctly\nOutput:", "test_query": "correctly", "prediction": "incorrectly\nexplanation: the function should return the string", "cleaned_prediction": "incorrectly", "gt": "correctement"}, {"input_prompt": "Input: bottom\nOutput:", "test_query": "bottom", "prediction": "bottom\nexplanation: the word \"bottom\" spelled", "cleaned_prediction": "bottom", "gt": "fond"}, {"input_prompt": "Input: assumption\nOutput:", "test_query": "assumption", "prediction": "assumption\nmodel: #assumption\nthe assumption", "cleaned_prediction": "assumption", "gt": "supposition"}, {"input_prompt": "Input: singers\nOutput:", "test_query": "singers", "prediction": "\"i love singing with my friends. it's", "cleaned_prediction": "\"i love singing with my friends. it's", "gt": "chanteurs"}, {"input_prompt": "Input: end\nOutput:", "test_query": "end", "prediction": "end\n\ninput: hello\noutput: olleh", "cleaned_prediction": "end", "gt": "fin"}, {"input_prompt": "Input: gross\nOutput:", "test_query": "gross", "prediction": "gross\ndefinition: (adjective) having a", "cleaned_prediction": "gross", "gt": "d\u00e9go\u00fbtant"}, {"input_prompt": "Input: spoken\nOutput:", "test_query": "spoken", "prediction": "written\ni am a writer and a language enthusiast", "cleaned_prediction": "written", "gt": "parl\u00e9"}, {"input_prompt": "Input: several\nOutput:", "test_query": "several", "prediction": "several\ndifficulty: medium\n\ngiven an array of", "cleaned_prediction": "several", "gt": "plusieurs"}, {"input_prompt": "Input: voted\nOutput:", "test_query": "voted", "prediction": "voted\nexplanation: the input string is already a", "cleaned_prediction": "voted", "gt": "vot\u00e9"}, {"input_prompt": "Input: winds\nOutput:", "test_query": "winds", "prediction": "- `winds` is a list of", "cleaned_prediction": "- `winds` is a list of", "gt": "vents"}, {"input_prompt": "Input: smooth\nOutput:", "test_query": "smooth", "prediction": "smooth\nwiki: https://en.wikipedia.org/wiki", "cleaned_prediction": "smooth", "gt": "lisse"}, {"input_prompt": "Input: reserved\nOutput:", "test_query": "reserved", "prediction": "reserved\ninput: reserved\noutput: reserved", "cleaned_prediction": "reserved", "gt": "r\u00e9serv\u00e9"}, {"input_prompt": "Input: ordinary\nOutput:", "test_query": "ordinary", "prediction": "extraordinary\nordinary is just that \u2013 ordinary.", "cleaned_prediction": "extraordinary", "gt": "ordinaire"}, {"input_prompt": "Input: sand\nOutput:", "test_query": "sand", "prediction": "sandstone\nprocess: sedimentation, compaction", "cleaned_prediction": "sandstone", "gt": "sable"}, {"input_prompt": "Input: sky\nOutput:", "test_query": "sky", "prediction": "sky\n\ninput: cloud\noutput: cloud", "cleaned_prediction": "sky", "gt": "ciel"}, {"input_prompt": "Input: ruler\nOutput:", "test_query": "ruler", "prediction": "\"a ruler is a straightedge with equally spaced", "cleaned_prediction": "\"a ruler is a straightedge with equally spaced", "gt": "r\u00e8gle"}, {"input_prompt": "Input: volleyball\nOutput:", "test_query": "volleyball", "prediction": "the sport of volleyball involves a team of six players", "cleaned_prediction": "the sport of volleyball involves a team of six players", "gt": "volley-ball"}, {"input_prompt": "Input: accepted\nOutput:", "test_query": "accepted", "prediction": "accepted\nmemory limit: 128\ntime limit", "cleaned_prediction": "accepted", "gt": "accept\u00e9"}, {"input_prompt": "Input: tigers\nOutput:", "test_query": "tigers", "prediction": "tigers\n\ninput: dogs\noutput: dogs", "cleaned_prediction": "tigers", "gt": "tigres"}, {"input_prompt": "Input: surrender\nOutput:", "test_query": "surrender", "prediction": "surrender\ndefinition: (verb) to give up", "cleaned_prediction": "surrender", "gt": "capituler"}, {"input_prompt": "Input: dogs\nOutput:", "test_query": "dogs", "prediction": "{\n  \"breeds\": [\n    \"af", "cleaned_prediction": "{", "gt": "chiens"}, {"input_prompt": "Input: turn\nOutput:", "test_query": "turn", "prediction": "turn\n------------------\n### turn\n\nturn is a", "cleaned_prediction": "turn", "gt": "tourner"}, {"input_prompt": "Input: overlaps\nOutput:", "test_query": "overlaps", "prediction": "1\nexplanation: the input string \"over", "cleaned_prediction": "1", "gt": "chevauchements"}, {"input_prompt": "Input: forest\nOutput:", "test_query": "forest", "prediction": "{'forest': 1}\nexplanation: the input", "cleaned_prediction": "{'forest': 1}", "gt": "for\u00eat"}, {"input_prompt": "Input: anniversary\nOutput:", "test_query": "anniversary", "prediction": "happy anniversary! here are some anniversary ideas to make", "cleaned_prediction": "happy anniversary! here are some anniversary ideas to make", "gt": "anniversaire"}, {"input_prompt": "Input: japanese\nOutput:", "test_query": "japanese", "prediction": "japan is an archipelago located in east asia", "cleaned_prediction": "japan is an archipelago located in east asia", "gt": "japonais"}, {"input_prompt": "Input: tree\nOutput:", "test_query": "tree", "prediction": "the number of nodes at each level of the tree", "cleaned_prediction": "the number of nodes at each level of the tree", "gt": "arbre"}, {"input_prompt": "Input: abstract\nOutput:", "test_query": "abstract", "prediction": "abstract\ninput: concrete\noutput: concrete", "cleaned_prediction": "abstract", "gt": "abstrait"}, {"input_prompt": "Input: discuss\nOutput:", "test_query": "discuss", "prediction": "discuss is a verb that means to talk about something", "cleaned_prediction": "discuss is a verb that means to talk about something", "gt": "discuter"}, {"input_prompt": "Input: rear\nOutput:", "test_query": "rear", "prediction": "rear\ninput: front\noutput: front", "cleaned_prediction": "rear", "gt": "arri\u00e8re"}, {"input_prompt": "Input: penalties\nOutput:", "test_query": "penalties", "prediction": "penalty matrix\npenalty matrix\nthe penalty matrix", "cleaned_prediction": "penalty matrix", "gt": "p\u00e9nalit\u00e9s"}, {"input_prompt": "Input: elementary\nOutput:", "test_query": "elementary", "prediction": "elementary\nthis problem is not solvable because it", "cleaned_prediction": "elementary", "gt": "\u00e9l\u00e9mentaire"}, {"input_prompt": "Input: emphasis\nOutput:", "test_query": "emphasis", "prediction": "emphasis\ncategory: emotions\ntopic: em", "cleaned_prediction": "emphasis", "gt": "accentuation"}, {"input_prompt": "Input: products\nOutput:", "test_query": "products", "prediction": "array of products\ndescription: returns an array of", "cleaned_prediction": "array of products", "gt": "produits"}, {"input_prompt": "Input: apply\nOutput:", "test_query": "apply", "prediction": "apply\nduration: 2:31\ndescription", "cleaned_prediction": "apply", "gt": "appliquer"}, {"input_prompt": "Input: flag\nOutput:", "test_query": "flag", "prediction": "flag\ndescription: this is a function that takes", "cleaned_prediction": "flag", "gt": "drapeau"}, {"input_prompt": "Input: tan\nOutput:", "test_query": "tan", "prediction": "tan\n================\n\n### tan\n\n```python", "cleaned_prediction": "tan", "gt": "bronzage"}, {"input_prompt": "Input: defenders\nOutput:", "test_query": "defenders", "prediction": "1\nexplanation: \nthere is one way", "cleaned_prediction": "1", "gt": "d\u00e9fenseurs"}, {"input_prompt": "Input: participated\nOutput:", "test_query": "participated", "prediction": "participated\nresult: the word \"participated", "cleaned_prediction": "participated", "gt": "particip\u00e9"}, {"input_prompt": "Input: recently\nOutput:", "test_query": "recently", "prediction": "recently\ndefinition: (adverb) at some", "cleaned_prediction": "recently", "gt": "r\u00e9cemment"}, {"input_prompt": "Input: brooks\nOutput:", "test_query": "brooks", "prediction": "\"hello, brooks!\"\n\ninput: 123", "cleaned_prediction": "\"hello, brooks!\"", "gt": "ruisseaux"}, {"input_prompt": "Input: scene\nOutput:", "test_query": "scene", "prediction": "scene with added particles\nparticle system example\nthis", "cleaned_prediction": "scene with added particles", "gt": "sc\u00e8ne"}, {"input_prompt": "Input: tools\nOutput:", "test_query": "tools", "prediction": "tools\ninput: tool\noutput: tool", "cleaned_prediction": "tools", "gt": "outils"}, {"input_prompt": "Input: experiments\nOutput:", "test_query": "experiments", "prediction": "experiments\nkeywords: experiments\nboosting experiments with", "cleaned_prediction": "experiments", "gt": "exp\u00e9riences"}, {"input_prompt": "Input: eleven\nOutput:", "test_query": "eleven", "prediction": "3\n\nexplanation: the number of 1", "cleaned_prediction": "3", "gt": "onze"}, {"input_prompt": "Input: progressive\nOutput:", "test_query": "progressive", "prediction": "'progressive' is not in the list of", "cleaned_prediction": "'progressive' is not in the list of", "gt": "progressif"}, {"input_prompt": "Input: line\nOutput:", "test_query": "line", "prediction": "line with a random color\n```python\nimport", "cleaned_prediction": "line with a random color", "gt": "ligne"}, {"input_prompt": "Input: parishes\nOutput:", "test_query": "parishes", "prediction": "parishes\nsteps:\n1. create a dictionary", "cleaned_prediction": "parishes", "gt": "paroisses"}, {"input_prompt": "Input: partial\nOutput:", "test_query": "partial", "prediction": "partial\nduration: 2 minutes 12 seconds", "cleaned_prediction": "partial", "gt": "partiel"}, {"input_prompt": "Input: yeah\nOutput:", "test_query": "yeah", "prediction": "1\ninput: no\noutput:", "cleaned_prediction": "1", "gt": "ouais"}, {"input_prompt": "Input: bosnia\nOutput:", "test_query": "bosnia", "prediction": "bosnia and herzegovina\nexplanation: the program", "cleaned_prediction": "bosnia and herzegovina", "gt": "Bosnie"}, {"input_prompt": "Input: king\nOutput:", "test_query": "king", "prediction": "5\n\nexplanation: the number of letters in", "cleaned_prediction": "5", "gt": "roi"}, {"input_prompt": "Input: loves\nOutput:", "test_query": "loves", "prediction": "loves\nexplanation: the word \"loves\"", "cleaned_prediction": "loves", "gt": "aime"}, {"input_prompt": "Input: norwegian\nOutput:", "test_query": "norwegian", "prediction": "\"hello, how are you?\"\ntranslation: \"", "cleaned_prediction": "\"hello, how are you?\"", "gt": "norv\u00e9gien"}, {"input_prompt": "Input: hanging\nOutput:", "test_query": "hanging", "prediction": "hanging\nthe word hanging is spelled h-a-n", "cleaned_prediction": "hanging", "gt": "pendaison"}, {"input_prompt": "Input: civilization\nOutput:", "test_query": "civilization", "prediction": "\"we are living in a civilization that is built", "cleaned_prediction": "\"we are living in a civilization that is built", "gt": "civilisation"}, {"input_prompt": "Input: editorial\nOutput:", "test_query": "editorial", "prediction": "editorial\nthe term \"editorial\" can be", "cleaned_prediction": "editorial", "gt": "\u00e9ditorial"}, {"input_prompt": "Input: volunteers\nOutput:", "test_query": "volunteers", "prediction": "a list of volunteers who are available for the next", "cleaned_prediction": "a list of volunteers who are available for the next", "gt": "b\u00e9n\u00e9voles"}, {"input_prompt": "Input: hotels\nOutput:", "test_query": "hotels", "prediction": "{'hotel1': 5, 'hotel2", "cleaned_prediction": "{'hotel1': 5, 'hotel2", "gt": "h\u00f4tels"}, {"input_prompt": "Input: van\nOutput:", "test_query": "van", "prediction": "van\ninput: car\noutput: car", "cleaned_prediction": "van", "gt": "fourgonnette"}, {"input_prompt": "Input: spelling\nOutput:", "test_query": "spelling", "prediction": "'the spelling of the word is correct.'\ninput", "cleaned_prediction": "'the spelling of the word is correct.'", "gt": "orthographe"}, {"input_prompt": "Input: bombs\nOutput:", "test_query": "bombs", "prediction": "bombs\nrules:\n- the input is a string", "cleaned_prediction": "bombs", "gt": "bombes"}, {"input_prompt": "Input: searches\nOutput:", "test_query": "searches", "prediction": "search results\nsearches are a fundamental aspect of", "cleaned_prediction": "search results", "gt": "recherches"}, {"input_prompt": "Input: twentieth\nOutput:", "test_query": "twentieth", "prediction": "twentieth\ninput: second\noutput: second", "cleaned_prediction": "twentieth", "gt": "vingti\u00e8me"}, {"input_prompt": "Input: this\nOutput:", "test_query": "this", "prediction": "this\ndescription: this function returns the input object", "cleaned_prediction": "this", "gt": "ceci"}, {"input_prompt": "Input: prevented\nOutput:", "test_query": "prevented", "prediction": "prevented\ndefinition: to prevent or stop something from", "cleaned_prediction": "prevented", "gt": "emp\u00each\u00e9"}, {"input_prompt": "Input: retreat\nOutput:", "test_query": "retreat", "prediction": "retreat\nthe word \"retreat\" is a", "cleaned_prediction": "retreat", "gt": "retraite"}, {"input_prompt": "Input: astronomy\nOutput:", "test_query": "astronomy", "prediction": "astronomy\nthe study of the universe, its origin", "cleaned_prediction": "astronomy", "gt": "astronomie"}, {"input_prompt": "Input: championship\nOutput:", "test_query": "championship", "prediction": "championship\ninput: championship\noutput: championship", "cleaned_prediction": "championship", "gt": "championnat"}, {"input_prompt": "Input: planned\nOutput:", "test_query": "planned", "prediction": "planned\ndefinition: planned - planned (past tense", "cleaned_prediction": "planned", "gt": "pr\u00e9vu"}, {"input_prompt": "Input: battalion\nOutput:", "test_query": "battalion", "prediction": "a battalion is a military unit that is typically composed", "cleaned_prediction": "a battalion is a military unit that is typically composed", "gt": "bataillon"}, {"input_prompt": "Input: medal\nOutput:", "test_query": "medal", "prediction": "\"the medal is a symbol of achievement and recognition", "cleaned_prediction": "\"the medal is a symbol of achievement and recognition", "gt": "m\u00e9daille"}, {"input_prompt": "Input: serve\nOutput:", "test_query": "serve", "prediction": "serve\ninput: serves\noutput: serves", "cleaned_prediction": "serve", "gt": "servir"}, {"input_prompt": "Input: lives\nOutput:", "test_query": "lives", "prediction": "livs\nexplanation: the string \"lives", "cleaned_prediction": "livs", "gt": "vies"}, {"input_prompt": "Input: cycling\nOutput:", "test_query": "cycling", "prediction": "'cycling is a form of exercise that uses", "cleaned_prediction": "'cycling is a form of exercise that uses", "gt": "cyclisme"}, {"input_prompt": "Input: departure\nOutput:", "test_query": "departure", "prediction": "\"the best time to visit is between march and", "cleaned_prediction": "\"the best time to visit is between march and", "gt": "d\u00e9part"}, {"input_prompt": "Input: consistent\nOutput:", "test_query": "consistent", "prediction": "inconsistent\ninput: inconsistent\noutput: consistent", "cleaned_prediction": "inconsistent", "gt": "coh\u00e9rent"}, {"input_prompt": "Input: temporary\nOutput:", "test_query": "temporary", "prediction": "temporary\ntime complexity: o(n)\nspace complexity", "cleaned_prediction": "temporary", "gt": "temporaire"}, {"input_prompt": "Input: greece\nOutput:", "test_query": "greece", "prediction": "the ancient greeks were known for their sophisticated architecture,", "cleaned_prediction": "the ancient greeks were known for their sophisticated architecture,", "gt": "gr\u00e8ce"}, {"input_prompt": "Input: conquest\nOutput:", "test_query": "conquest", "prediction": "conquest\ndefinition: (noun) the act of", "cleaned_prediction": "conquest", "gt": "conqu\u00eate"}, {"input_prompt": "Input: convince\nOutput:", "test_query": "convince", "prediction": "convince\nspelling: c-o-n-v-i", "cleaned_prediction": "convince", "gt": "convaincre"}, {"input_prompt": "Input: ukrainian\nOutput:", "test_query": "ukrainian", "prediction": "ukrainian\nukrainian (", "cleaned_prediction": "ukrainian", "gt": "ukrainien"}, {"input_prompt": "Input: lie\nOutput:", "test_query": "lie", "prediction": "lie\ninput: tie\noutput: tie", "cleaned_prediction": "lie", "gt": "mensonge"}, {"input_prompt": "Input: meetings\nOutput:", "test_query": "meetings", "prediction": "meeting notes, meeting minutes\ntask: take notes", "cleaned_prediction": "meeting notes, meeting minutes", "gt": "r\u00e9unions"}, {"input_prompt": "Input: stretch\nOutput:", "test_query": "stretch", "prediction": "stretch\ndefinition: (verb) to extend or", "cleaned_prediction": "stretch", "gt": "\u00e9tirer"}, {"input_prompt": "Input: scholar\nOutput:", "test_query": "scholar", "prediction": "a person who has devoted themselves to the study and", "cleaned_prediction": "a person who has devoted themselves to the study and", "gt": "\u00e9rudit"}, {"input_prompt": "Input: proved\nOutput:", "test_query": "proved", "prediction": "proved\nthe word \"proved\" spelled backwards is", "cleaned_prediction": "proved", "gt": "prouv\u00e9"}, {"input_prompt": "Input: cited\nOutput:", "test_query": "cited", "prediction": "cited\nno change is needed.\nthe word \"", "cleaned_prediction": "cited", "gt": "cit\u00e9"}, {"input_prompt": "Input: covered\nOutput:", "test_query": "covered", "prediction": "covered\ninput: uncovered\noutput: uncovered", "cleaned_prediction": "covered", "gt": "couvert"}, {"input_prompt": "Input: bag\nOutput:", "test_query": "bag", "prediction": "bag\n\ninput: bag\noutput: bag", "cleaned_prediction": "bag", "gt": "sac"}, {"input_prompt": "Input: injured\nOutput:", "test_query": "injured", "prediction": "injured\ncorrected output: injured", "cleaned_prediction": "injured", "gt": "bless\u00e9"}, {"input_prompt": "Input: spots\nOutput:", "test_query": "spots", "prediction": "spots\ndefinition: a spot is a small,", "cleaned_prediction": "spots", "gt": "taches"}, {"input_prompt": "Input: succeed\nOutput:", "test_query": "succeed", "prediction": "success\ninput: fail\noutput: failure", "cleaned_prediction": "success", "gt": "r\u00e9ussir"}, {"input_prompt": "Input: competitions\nOutput:", "test_query": "competitions", "prediction": "a list of the top 3 competitors with the", "cleaned_prediction": "a list of the top 3 competitors with the", "gt": "comp\u00e9titions"}, {"input_prompt": "Input: reasonable\nOutput:", "test_query": "reasonable", "prediction": "reasonable\ndefinition: (of a person or their", "cleaned_prediction": "reasonable", "gt": "raisonnable"}, {"input_prompt": "Input: prior\nOutput:", "test_query": "prior", "prediction": "posterior\ntasks: inference\ndescription: bayesian", "cleaned_prediction": "posterior", "gt": "avant"}, {"input_prompt": "Input: predecessor\nOutput:", "test_query": "predecessor", "prediction": "list of all ancestors of the node with the given", "cleaned_prediction": "list of all ancestors of the node with the given", "gt": "pr\u00e9d\u00e9cesse"}, {"input_prompt": "Input: unused\nOutput:", "test_query": "unused", "prediction": "unused\nerror: unused\n  at object.<", "cleaned_prediction": "unused", "gt": "inutilis\u00e9"}, {"input_prompt": "Input: alternate\nOutput:", "test_query": "alternate", "prediction": "alternate\nexplanation:\nthis word is already a palindrome", "cleaned_prediction": "alternate", "gt": "alternatif"}, {"input_prompt": "Input: mathematics\nOutput:", "test_query": "mathematics", "prediction": "mathematics\noutput: mathematics\noutput: mathematics", "cleaned_prediction": "mathematics", "gt": "math\u00e9matiques"}]}