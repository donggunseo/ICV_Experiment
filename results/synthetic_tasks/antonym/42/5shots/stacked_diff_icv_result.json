{
    "score": {
        "exact_match": 0.5815899581589958
    },
    "result": [
        {
            "input_prompt": "Input: further\nOutput:",
            "test_query": "further",
            "prediction": "less\nspelled backwards: resruh\ndefinition",
            "cleaned_prediction": "less",
            "gt": "closer"
        },
        {
            "input_prompt": "Input: fact\nOutput:",
            "test_query": "fact",
            "prediction": "unfact\ninput: fact\noutput: unfact",
            "cleaned_prediction": "unfact",
            "gt": "fiction"
        },
        {
            "input_prompt": "Input: universal\nOutput:",
            "test_query": "universal",
            "prediction": "particular\ninput: specific\noutput: general\ninput",
            "cleaned_prediction": "particular",
            "gt": "specific"
        },
        {
            "input_prompt": "Input: medial\nOutput:",
            "test_query": "medial",
            "prediction": "lateral\njunction: right\ninput: medial",
            "cleaned_prediction": "lateral",
            "gt": "lateral"
        },
        {
            "input_prompt": "Input: excellent\nOutput:",
            "test_query": "excellent",
            "prediction": "poor\nexplanation: the model is overfitting to",
            "cleaned_prediction": "poor",
            "gt": "poor"
        },
        {
            "input_prompt": "Input: require\nOutput:",
            "test_query": "require",
            "prediction": "deny\nexplanation:\nthe problem is asking us to write",
            "cleaned_prediction": "deny",
            "gt": "exempt"
        },
        {
            "input_prompt": "Input: convoluted\nOutput:",
            "test_query": "convoluted",
            "prediction": "simple\ndifficulty: hard\n\nyou are given an array",
            "cleaned_prediction": "simple",
            "gt": "straightforward"
        },
        {
            "input_prompt": "Input: proceed\nOutput:",
            "test_query": "proceed",
            "prediction": "cease\ninput: repress\noutput: release",
            "cleaned_prediction": "cease",
            "gt": "halt"
        },
        {
            "input_prompt": "Input: promote\nOutput:",
            "test_query": "promote",
            "prediction": "demote\nclue: lower in rank\nthe",
            "cleaned_prediction": "demote",
            "gt": "demote"
        },
        {
            "input_prompt": "Input: set\nOutput:",
            "test_query": "set",
            "prediction": "subset\ninput: subset\noutput: element\ninput",
            "cleaned_prediction": "subset",
            "gt": "unset"
        },
        {
            "input_prompt": "Input: matter\nOutput:",
            "test_query": "matter",
            "prediction": "antimatter\nprocess: nuclear fusion\nresult: energy",
            "cleaned_prediction": "antimatter",
            "gt": "antimatter"
        },
        {
            "input_prompt": "Input: commercial\nOutput:",
            "test_query": "commercial",
            "prediction": "non-commercial\ninput: commercial\noutput: non-commercial",
            "cleaned_prediction": "non-commercial",
            "gt": "residential"
        },
        {
            "input_prompt": "Input: upper\nOutput:",
            "test_query": "upper",
            "prediction": "lower\ninput: lower\noutput: upper\ninput",
            "cleaned_prediction": "lower",
            "gt": "lower"
        },
        {
            "input_prompt": "Input: neutral\nOutput:",
            "test_query": "neutral",
            "prediction": "biased\ncomment: the question is a bit ambiguous and",
            "cleaned_prediction": "biased",
            "gt": "biased"
        },
        {
            "input_prompt": "Input: arrive\nOutput:",
            "test_query": "arrive",
            "prediction": "depart\nexplanation: the word \u201carrive\u201d spelled",
            "cleaned_prediction": "depart",
            "gt": "depart"
        },
        {
            "input_prompt": "Input: socialist\nOutput:",
            "test_query": "socialist",
            "prediction": "capitalist\nthe word \"socialist\" has a con",
            "cleaned_prediction": "capitalist",
            "gt": "capitalist"
        },
        {
            "input_prompt": "Input: distrust\nOutput:",
            "test_query": "distrust",
            "prediction": "trust\nchange from input to output: 100%",
            "cleaned_prediction": "trust",
            "gt": "trust"
        },
        {
            "input_prompt": "Input: chaotic\nOutput:",
            "test_query": "chaotic",
            "prediction": "organized\ninput: disarray\noutput: order",
            "cleaned_prediction": "organized",
            "gt": "orderly"
        },
        {
            "input_prompt": "Input: obedience\nOutput:",
            "test_query": "obedience",
            "prediction": "defiance\nthe word \"obedience\" is associated",
            "cleaned_prediction": "defiance",
            "gt": "disobedience"
        },
        {
            "input_prompt": "Input: lender\nOutput:",
            "test_query": "lender",
            "prediction": "borrower\nchange one letter to get a new word",
            "cleaned_prediction": "borrower",
            "gt": "borrower"
        },
        {
            "input_prompt": "Input: intellectual\nOutput:",
            "test_query": "intellectual",
            "prediction": "ignorant\nthe input is an intellectual, and the output",
            "cleaned_prediction": "ignorant",
            "gt": "unintellectual"
        },
        {
            "input_prompt": "Input: hold\nOutput:",
            "test_query": "hold",
            "prediction": "release\n---\n\n### hold and release\n\nthe `hold",
            "cleaned_prediction": "release",
            "gt": "release"
        },
        {
            "input_prompt": "Input: fugitive\nOutput:",
            "test_query": "fugitive",
            "prediction": "captive\n\ninput: escaped\noutput: captive\n\ninput",
            "cleaned_prediction": "captive",
            "gt": "law-abiding citizen"
        },
        {
            "input_prompt": "Input: infinite\nOutput:",
            "test_query": "infinite",
            "prediction": "finite\nexplanation: the input is an infinite sequence of",
            "cleaned_prediction": "finite",
            "gt": "finite"
        },
        {
            "input_prompt": "Input: offence\nOutput:",
            "test_query": "offence",
            "prediction": "defence\nsynonyms: protection, safeguard, shield",
            "cleaned_prediction": "defence",
            "gt": "defence"
        },
        {
            "input_prompt": "Input: outlaw\nOutput:",
            "test_query": "outlaw",
            "prediction": "law\ndefinition: a person who has broken the law",
            "cleaned_prediction": "law",
            "gt": "law-abiding citizen"
        },
        {
            "input_prompt": "Input: sour\nOutput:",
            "test_query": "sour",
            "prediction": "sweet\ninput: happy\noutput: sad\ninput",
            "cleaned_prediction": "sweet",
            "gt": "sweet"
        },
        {
            "input_prompt": "Input: cause\nOutput:",
            "test_query": "cause",
            "prediction": "effect\noutput: cause\ninput: effect\noutput",
            "cleaned_prediction": "effect",
            "gt": "effect"
        },
        {
            "input_prompt": "Input: assail\nOutput:",
            "test_query": "assail",
            "prediction": "assailant\n\n## step 1: determine the part",
            "cleaned_prediction": "assailant",
            "gt": "defend"
        },
        {
            "input_prompt": "Input: dirty\nOutput:",
            "test_query": "dirty",
            "prediction": "clean\n\ninput: dirty\noutput: clean\n\ninput",
            "cleaned_prediction": "clean",
            "gt": "clean"
        },
        {
            "input_prompt": "Input: chilly\nOutput:",
            "test_query": "chilly",
            "prediction": "warm\n\ninput: warm\noutput: hot\n\ninput",
            "cleaned_prediction": "warm",
            "gt": "warm"
        },
        {
            "input_prompt": "Input: incompatible\nOutput:",
            "test_query": "incompatible",
            "prediction": "compatible\ndiscussion: the input is not a valid",
            "cleaned_prediction": "compatible",
            "gt": "compatible"
        },
        {
            "input_prompt": "Input: insufficient\nOutput:",
            "test_query": "insufficient",
            "prediction": "sufficient\nexplanation: a company wants to determine the number",
            "cleaned_prediction": "sufficient",
            "gt": "sufficient"
        },
        {
            "input_prompt": "Input: accept\nOutput:",
            "test_query": "accept",
            "prediction": "reject\ninput: reject\noutput: accept\ninput",
            "cleaned_prediction": "reject",
            "gt": "reject"
        },
        {
            "input_prompt": "Input: awake\nOutput:",
            "test_query": "awake",
            "prediction": "asleep\ninput: sleeping\noutput: awake\ninput",
            "cleaned_prediction": "asleep",
            "gt": "asleep"
        },
        {
            "input_prompt": "Input: bogus\nOutput:",
            "test_query": "bogus",
            "prediction": "valid\n\nexplanation: the string \"bogus\"",
            "cleaned_prediction": "valid",
            "gt": "authentic"
        },
        {
            "input_prompt": "Input: spurious\nOutput:",
            "test_query": "spurious",
            "prediction": "genuine\ninput: fake\noutput: real\ninput",
            "cleaned_prediction": "genuine",
            "gt": "authentic"
        },
        {
            "input_prompt": "Input: mild\nOutput:",
            "test_query": "mild",
            "prediction": "extreme\ninput: mild\noutput: extreme\ninput",
            "cleaned_prediction": "extreme",
            "gt": "severe"
        },
        {
            "input_prompt": "Input: incoming\nOutput:",
            "test_query": "incoming",
            "prediction": "outgoing\ninput: incoming\noutput: outgoing\ninput",
            "cleaned_prediction": "outgoing",
            "gt": "outgoing"
        },
        {
            "input_prompt": "Input: advanced\nOutput:",
            "test_query": "advanced",
            "prediction": "primitive\ntoday i had a bit of a rough day",
            "cleaned_prediction": "primitive",
            "gt": "basic"
        },
        {
            "input_prompt": "Input: admit\nOutput:",
            "test_query": "admit",
            "prediction": "deny\ninput: deny\noutput: admit\ninput",
            "cleaned_prediction": "deny",
            "gt": "deny"
        },
        {
            "input_prompt": "Input: someone\nOutput:",
            "test_query": "someone",
            "prediction": "nobody\ninput: nobody\noutput: somebody\ninput",
            "cleaned_prediction": "nobody",
            "gt": "no one"
        },
        {
            "input_prompt": "Input: clumsy\nOutput:",
            "test_query": "clumsy",
            "prediction": "precise\ninput: rough\noutput: refined\ninput",
            "cleaned_prediction": "precise",
            "gt": "graceful"
        },
        {
            "input_prompt": "Input: falsehood\nOutput:",
            "test_query": "falsehood",
            "prediction": "truth\ninput: lies\noutput: truth\ninput",
            "cleaned_prediction": "truth",
            "gt": "truth"
        },
        {
            "input_prompt": "Input: refined\nOutput:",
            "test_query": "refined",
            "prediction": "unrefined\ninput: unrefined\noutput",
            "cleaned_prediction": "unrefined",
            "gt": "crude"
        },
        {
            "input_prompt": "Input: bitter\nOutput:",
            "test_query": "bitter",
            "prediction": "sweet\ninput: cold\noutput: warm\ninput",
            "cleaned_prediction": "sweet",
            "gt": "sweet"
        },
        {
            "input_prompt": "Input: let\nOutput:",
            "test_query": "let",
            "prediction": "not\nexplanation\nthe input string \"let\" can",
            "cleaned_prediction": "not",
            "gt": "prevent"
        },
        {
            "input_prompt": "Input: familiar\nOutput:",
            "test_query": "familiar",
            "prediction": "unfamiliar\nin the past, people used to travel to",
            "cleaned_prediction": "unfamiliar",
            "gt": "unfamiliar"
        },
        {
            "input_prompt": "Input: humility\nOutput:",
            "test_query": "humility",
            "prediction": "arrogance\ninput: kindness\noutput: cruelty\ninput",
            "cleaned_prediction": "arrogance",
            "gt": "pride"
        },
        {
            "input_prompt": "Input: dense\nOutput:",
            "test_query": "dense",
            "prediction": "sparse\nstatus: fixed\ntags: dense, sparse",
            "cleaned_prediction": "sparse",
            "gt": "sparse"
        },
        {
            "input_prompt": "Input: miss\nOutput:",
            "test_query": "miss",
            "prediction": "dismiss\nexplanation: we need to replace the first character",
            "cleaned_prediction": "dismiss",
            "gt": "hit"
        },
        {
            "input_prompt": "Input: optional\nOutput:",
            "test_query": "optional",
            "prediction": "none\npurpose: the purpose of this function is to",
            "cleaned_prediction": "none",
            "gt": "mandatory"
        },
        {
            "input_prompt": "Input: local\nOutput:",
            "test_query": "local",
            "prediction": "remote\nfailed tests:\n1. test_1",
            "cleaned_prediction": "remote",
            "gt": "foreign"
        },
        {
            "input_prompt": "Input: uneasy\nOutput:",
            "test_query": "uneasy",
            "prediction": "secure\ntrust is the foundation of any relationship, whether",
            "cleaned_prediction": "secure",
            "gt": "comfortable"
        },
        {
            "input_prompt": "Input: wisdom\nOutput:",
            "test_query": "wisdom",
            "prediction": "foolishness\nin the beginning, there was only one",
            "cleaned_prediction": "foolishness",
            "gt": "foolishness"
        },
        {
            "input_prompt": "Input: speed\nOutput:",
            "test_query": "speed",
            "prediction": "slow\n\n# problem\na function that takes in a",
            "cleaned_prediction": "slow",
            "gt": "slowness"
        },
        {
            "input_prompt": "Input: catalyst\nOutput:",
            "test_query": "catalyst",
            "prediction": "inhibitor\nmodel: chemical reaction\na catalyst is a",
            "cleaned_prediction": "inhibitor",
            "gt": "inhibitor"
        },
        {
            "input_prompt": "Input: protagonist\nOutput:",
            "test_query": "protagonist",
            "prediction": "antagonist\nchange one letter from \"protagonist\"",
            "cleaned_prediction": "antagonist",
            "gt": "antagonist"
        },
        {
            "input_prompt": "Input: white\nOutput:",
            "test_query": "white",
            "prediction": "black\ninput: gray\noutput: black\ninput",
            "cleaned_prediction": "black",
            "gt": "black"
        },
        {
            "input_prompt": "Input: specified\nOutput:",
            "test_query": "specified",
            "prediction": "vague\nerror: specified\noutput: vague\nerror",
            "cleaned_prediction": "vague",
            "gt": "unspecified"
        },
        {
            "input_prompt": "Input: rude\nOutput:",
            "test_query": "rude",
            "prediction": "polite\nchange the tone of a text to make it",
            "cleaned_prediction": "polite",
            "gt": "polite"
        },
        {
            "input_prompt": "Input: tall\nOutput:",
            "test_query": "tall",
            "prediction": "short\n\ninput: short\noutput: tall\n\ninput",
            "cleaned_prediction": "short",
            "gt": "short"
        },
        {
            "input_prompt": "Input: sink\nOutput:",
            "test_query": "sink",
            "prediction": "source\nlevel: 1\ncategory: water",
            "cleaned_prediction": "source",
            "gt": "float"
        },
        {
            "input_prompt": "Input: intelligent\nOutput:",
            "test_query": "intelligent",
            "prediction": "stupid\ninput: complex\noutput: simple\ninput",
            "cleaned_prediction": "stupid",
            "gt": "unintelligent"
        },
        {
            "input_prompt": "Input: overt\nOutput:",
            "test_query": "overt",
            "prediction": "covert\ndefinition: (adjective) done or intended",
            "cleaned_prediction": "covert",
            "gt": "covert"
        },
        {
            "input_prompt": "Input: foul\nOutput:",
            "test_query": "foul",
            "prediction": "clean\ndefinition: (adjective) having a strong",
            "cleaned_prediction": "clean",
            "gt": "fair"
        },
        {
            "input_prompt": "Input: improvement\nOutput:",
            "test_query": "improvement",
            "prediction": "deterioration\nmodel: deterioration\nin this example, the",
            "cleaned_prediction": "deterioration",
            "gt": "deterioration"
        },
        {
            "input_prompt": "Input: terrestrial\nOutput:",
            "test_query": "terrestrial",
            "prediction": "aquatic\ninput: terrestrial\noutput: aquatic\ninput",
            "cleaned_prediction": "aquatic",
            "gt": "aquatic"
        },
        {
            "input_prompt": "Input: martial\nOutput:",
            "test_query": "martial",
            "prediction": "civilian\ninput: military\noutput: civilian\ninput",
            "cleaned_prediction": "civilian",
            "gt": "civilian"
        },
        {
            "input_prompt": "Input: front\nOutput:",
            "test_query": "front",
            "prediction": "back\ninput: help\noutput: help\ninput",
            "cleaned_prediction": "back",
            "gt": "back"
        },
        {
            "input_prompt": "Input: lie\nOutput:",
            "test_query": "lie",
            "prediction": "truth\ninput: true\noutput: truth\ninput",
            "cleaned_prediction": "truth",
            "gt": "truth"
        },
        {
            "input_prompt": "Input: northwest\nOutput:",
            "test_query": "northwest",
            "prediction": "southeast\ninput: southwest\noutput: northeast\ninput",
            "cleaned_prediction": "southeast",
            "gt": "southeast"
        },
        {
            "input_prompt": "Input: red\nOutput:",
            "test_query": "red",
            "prediction": "blue\n\ninput: green\noutput: yellow\n\ninput",
            "cleaned_prediction": "blue",
            "gt": "blue"
        },
        {
            "input_prompt": "Input: worn\nOutput:",
            "test_query": "worn",
            "prediction": "new\nthe word \"worn\" is an adjective",
            "cleaned_prediction": "new",
            "gt": "new"
        },
        {
            "input_prompt": "Input: kid\nOutput:",
            "test_query": "kid",
            "prediction": "adult\ninput: adult\noutput: adult\n\ndef",
            "cleaned_prediction": "adult",
            "gt": "adult"
        },
        {
            "input_prompt": "Input: periodic\nOutput:",
            "test_query": "periodic",
            "prediction": "aperiodic\ncomment: this is a simple example",
            "cleaned_prediction": "aperiodic",
            "gt": "aperiodic"
        },
        {
            "input_prompt": "Input: misconception\nOutput:",
            "test_query": "misconception",
            "prediction": "understanding\nthe word \u201cmisconception\u201d means a",
            "cleaned_prediction": "understanding",
            "gt": "understanding"
        },
        {
            "input_prompt": "Input: difficult\nOutput:",
            "test_query": "difficult",
            "prediction": "easy\nexplanation: the string \"difficult\" has",
            "cleaned_prediction": "easy",
            "gt": "easy"
        },
        {
            "input_prompt": "Input: lower\nOutput:",
            "test_query": "lower",
            "prediction": "higher\ninput: 1\noutput: higher",
            "cleaned_prediction": "higher",
            "gt": "upper"
        },
        {
            "input_prompt": "Input: drunk\nOutput:",
            "test_query": "drunk",
            "prediction": "sober\ninput: thirsty\noutput: hydrated\ninput",
            "cleaned_prediction": "sober",
            "gt": "sober"
        },
        {
            "input_prompt": "Input: unorthodox\nOutput:",
            "test_query": "unorthodox",
            "prediction": "conventional\ndefinition: (adjective) not according to",
            "cleaned_prediction": "conventional",
            "gt": "orthodox"
        },
        {
            "input_prompt": "Input: union\nOutput:",
            "test_query": "union",
            "prediction": "separate\ninput: union\noutput: separate\ninput",
            "cleaned_prediction": "separate",
            "gt": "division"
        },
        {
            "input_prompt": "Input: stuff\nOutput:",
            "test_query": "stuff",
            "prediction": "nothing\ndescription: this function is used to create a",
            "cleaned_prediction": "nothing",
            "gt": "empty"
        },
        {
            "input_prompt": "Input: major\nOutput:",
            "test_query": "major",
            "prediction": "minor\ninput: minor\noutput: major\ninput",
            "cleaned_prediction": "minor",
            "gt": "minor"
        },
        {
            "input_prompt": "Input: peripheral\nOutput:",
            "test_query": "peripheral",
            "prediction": "central\nperipheral device: any device that is connected to",
            "cleaned_prediction": "central",
            "gt": "central"
        },
        {
            "input_prompt": "Input: worldly\nOutput:",
            "test_query": "worldly",
            "prediction": "unworldly\nsynonyms: worldly\nantonyms",
            "cleaned_prediction": "unworldly",
            "gt": "spiritual"
        },
        {
            "input_prompt": "Input: rapid\nOutput:",
            "test_query": "rapid",
            "prediction": "slow\ninput: fast\noutput: slow\ninput",
            "cleaned_prediction": "slow",
            "gt": "slow"
        },
        {
            "input_prompt": "Input: unmarked\nOutput:",
            "test_query": "unmarked",
            "prediction": "marked\nsteps: 1\ndescription: unmarked",
            "cleaned_prediction": "marked",
            "gt": "marked"
        },
        {
            "input_prompt": "Input: ladies\nOutput:",
            "test_query": "ladies",
            "prediction": "gentlemen\ninput: man\noutput: gentleman\ninput",
            "cleaned_prediction": "gentlemen",
            "gt": "gentlemen"
        },
        {
            "input_prompt": "Input: lesbian\nOutput:",
            "test_query": "lesbian",
            "prediction": "straight\ninput: gay\noutput: straight\ninput",
            "cleaned_prediction": "straight",
            "gt": "straight"
        },
        {
            "input_prompt": "Input: plain\nOutput:",
            "test_query": "plain",
            "prediction": "fancy\ninput: fancy\noutput: plain\n\n##",
            "cleaned_prediction": "fancy",
            "gt": "fancy"
        },
        {
            "input_prompt": "Input: head\nOutput:",
            "test_query": "head",
            "prediction": "tail\ninput: head\noutput: tail\n\n#",
            "cleaned_prediction": "tail",
            "gt": "tail"
        },
        {
            "input_prompt": "Input: displeasure\nOutput:",
            "test_query": "displeasure",
            "prediction": "satisfaction\nhow to achieve satisfaction in life?\nsatisfaction",
            "cleaned_prediction": "satisfaction",
            "gt": "pleasure"
        },
        {
            "input_prompt": "Input: arise\nOutput:",
            "test_query": "arise",
            "prediction": "decline\nconverse: rise\n\nthe word arise is",
            "cleaned_prediction": "decline",
            "gt": "settle"
        },
        {
            "input_prompt": "Input: symptom\nOutput:",
            "test_query": "symptom",
            "prediction": "symptom-free\ninput: illness\noutput: healthy",
            "cleaned_prediction": "symptom-free",
            "gt": "cure"
        },
        {
            "input_prompt": "Input: dusty\nOutput:",
            "test_query": "dusty",
            "prediction": "clean\ninput: clean\noutput: clean\ninput",
            "cleaned_prediction": "clean",
            "gt": "clean"
        },
        {
            "input_prompt": "Input: location\nOutput:",
            "test_query": "location",
            "prediction": "opposite location\ndefinition: the location opposite a given location",
            "cleaned_prediction": "opposite location",
            "gt": "displacement"
        },
        {
            "input_prompt": "Input: coloured\nOutput:",
            "test_query": "coloured",
            "prediction": "monochrome\noutput: monochrome\noutput: mon",
            "cleaned_prediction": "monochrome",
            "gt": "monochrome"
        },
        {
            "input_prompt": "Input: retrieve\nOutput:",
            "test_query": "retrieve",
            "prediction": "release\ninput: capture\noutput: capture\ninput",
            "cleaned_prediction": "release",
            "gt": "discard"
        },
        {
            "input_prompt": "Input: mad\nOutput:",
            "test_query": "mad",
            "prediction": "sane\n\nexplanation: the string \"mad\" is not",
            "cleaned_prediction": "sane",
            "gt": "sane"
        },
        {
            "input_prompt": "Input: dark\nOutput:",
            "test_query": "dark",
            "prediction": "light\ninput: light\noutput: dark\ninput",
            "cleaned_prediction": "light",
            "gt": "light"
        },
        {
            "input_prompt": "Input: constructive\nOutput:",
            "test_query": "constructive",
            "prediction": "destructive\ninput: constructive\noutput: destructive\ninput",
            "cleaned_prediction": "destructive",
            "gt": "destructive"
        },
        {
            "input_prompt": "Input: shallow\nOutput:",
            "test_query": "shallow",
            "prediction": "deep\ndifficulty\nthis problem is relatively easy.\nthe",
            "cleaned_prediction": "deep",
            "gt": "deep"
        },
        {
            "input_prompt": "Input: genuine\nOutput:",
            "test_query": "genuine",
            "prediction": "fake\ninput: real\noutput: fake\ninput",
            "cleaned_prediction": "fake",
            "gt": "fake"
        },
        {
            "input_prompt": "Input: short\nOutput:",
            "test_query": "short",
            "prediction": "long\nconstraints: 0 <= s <= 3",
            "cleaned_prediction": "long",
            "gt": "long"
        },
        {
            "input_prompt": "Input: evolution\nOutput:",
            "test_query": "evolution",
            "prediction": "devolution\nrelated: entropy, evolution, information,",
            "cleaned_prediction": "devolution",
            "gt": "devolution"
        },
        {
            "input_prompt": "Input: line\nOutput:",
            "test_query": "line",
            "prediction": "output\ninput: line2\noutput: output2",
            "cleaned_prediction": "output",
            "gt": "curve"
        },
        {
            "input_prompt": "Input: field\nOutput:",
            "test_query": "field",
            "prediction": "opposite field\ntransitive property of equality\nif a",
            "cleaned_prediction": "opposite field",
            "gt": "city"
        },
        {
            "input_prompt": "Input: convergence\nOutput:",
            "test_query": "convergence",
            "prediction": "divergence\nrelevance: 1\n_____________________",
            "cleaned_prediction": "divergence",
            "gt": "divergence"
        },
        {
            "input_prompt": "Input: dim\nOutput:",
            "test_query": "dim",
            "prediction": "volume\nthe volume of a cube is given by the",
            "cleaned_prediction": "volume",
            "gt": "bright"
        },
        {
            "input_prompt": "Input: venerable\nOutput:",
            "test_query": "venerable",
            "prediction": "ignoble\nclue: a word that is the",
            "cleaned_prediction": "ignoble",
            "gt": "disreputable"
        },
        {
            "input_prompt": "Input: irresponsible\nOutput:",
            "test_query": "irresponsible",
            "prediction": "responsible\nchange the input to responsible and output to irresponsible",
            "cleaned_prediction": "responsible",
            "gt": "responsible"
        },
        {
            "input_prompt": "Input: northwestern\nOutput:",
            "test_query": "northwestern",
            "prediction": "southeastern\ninput: southwestern\noutput: northeastern\ninput",
            "cleaned_prediction": "southeastern",
            "gt": "southeastern"
        },
        {
            "input_prompt": "Input: defensive\nOutput:",
            "test_query": "defensive",
            "prediction": "offensive\nsynonyms: defensive, protective, shielding,",
            "cleaned_prediction": "offensive",
            "gt": "offensive"
        },
        {
            "input_prompt": "Input: original\nOutput:",
            "test_query": "original",
            "prediction": "modified\nfailed = 0\ndef modify_list(input",
            "cleaned_prediction": "modified",
            "gt": "copy"
        },
        {
            "input_prompt": "Input: subconscious\nOutput:",
            "test_query": "subconscious",
            "prediction": "conscious\nthis is the way of the brain, and",
            "cleaned_prediction": "conscious",
            "gt": "conscious"
        },
        {
            "input_prompt": "Input: copy\nOutput:",
            "test_query": "copy",
            "prediction": "delete\ninput: ala\noutput: a",
            "cleaned_prediction": "delete",
            "gt": "original"
        },
        {
            "input_prompt": "Input: attract\nOutput:",
            "test_query": "attract",
            "prediction": "repel\ninput: repel\noutput: attract",
            "cleaned_prediction": "repel",
            "gt": "repel"
        },
        {
            "input_prompt": "Input: magnetic\nOutput:",
            "test_query": "magnetic",
            "prediction": "nonmagnetic\ntechnology: magnetic separation\nmagnetic",
            "cleaned_prediction": "nonmagnetic",
            "gt": "nonmagnetic"
        },
        {
            "input_prompt": "Input: injustice\nOutput:",
            "test_query": "injustice",
            "prediction": "justice\nthe word \"injustice\" is the opposite",
            "cleaned_prediction": "justice",
            "gt": "justice"
        },
        {
            "input_prompt": "Input: mortality\nOutput:",
            "test_query": "mortality",
            "prediction": "longevity\nthe concept of mortality is often seen as the",
            "cleaned_prediction": "longevity",
            "gt": "immortality"
        },
        {
            "input_prompt": "Input: laughter\nOutput:",
            "test_query": "laughter",
            "prediction": "silence\nthis is the silence that follows a joke.",
            "cleaned_prediction": "silence",
            "gt": "tears"
        },
        {
            "input_prompt": "Input: inhuman\nOutput:",
            "test_query": "inhuman",
            "prediction": "humane\nthe word \"inhuman\" is the ant",
            "cleaned_prediction": "humane",
            "gt": "human"
        },
        {
            "input_prompt": "Input: heavenly\nOutput:",
            "test_query": "heavenly",
            "prediction": "hellish\nthe antonym of \"heavenly",
            "cleaned_prediction": "hellish",
            "gt": "hellish"
        },
        {
            "input_prompt": "Input: half\nOutput:",
            "test_query": "half",
            "prediction": "whole\ndefinition: a half is a unit of measurement",
            "cleaned_prediction": "whole",
            "gt": "full"
        },
        {
            "input_prompt": "Input: unpopular\nOutput:",
            "test_query": "unpopular",
            "prediction": "popular\ninput: popular\noutput: unpopular\ninput",
            "cleaned_prediction": "popular",
            "gt": "popular"
        },
        {
            "input_prompt": "Input: recession\nOutput:",
            "test_query": "recession",
            "prediction": "prosperity\ninput: war\noutput: peace\ninput",
            "cleaned_prediction": "prosperity",
            "gt": "boom"
        },
        {
            "input_prompt": "Input: poor\nOutput:",
            "test_query": "poor",
            "prediction": "rich\ninput: hello\noutput: olleh",
            "cleaned_prediction": "rich",
            "gt": "rich"
        },
        {
            "input_prompt": "Input: noisy\nOutput:",
            "test_query": "noisy",
            "prediction": "clear\nbeetroot is a root vegetable that is",
            "cleaned_prediction": "clear",
            "gt": "quiet"
        },
        {
            "input_prompt": "Input: specialize\nOutput:",
            "test_query": "specialize",
            "prediction": "generalize\ninput: simplify\noutput: complicate",
            "cleaned_prediction": "generalize",
            "gt": "generalize"
        },
        {
            "input_prompt": "Input: polite\nOutput:",
            "test_query": "polite",
            "prediction": "impolite\nthe word \"polite\" is",
            "cleaned_prediction": "impolite",
            "gt": "rude"
        },
        {
            "input_prompt": "Input: spacious\nOutput:",
            "test_query": "spacious",
            "prediction": "cramped\n\ninput: organized\noutput: cluttered",
            "cleaned_prediction": "cramped",
            "gt": "cramped"
        },
        {
            "input_prompt": "Input: hideous\nOutput:",
            "test_query": "hideous",
            "prediction": "beautiful\ninput: disgusting\noutput: lovely\ninput",
            "cleaned_prediction": "beautiful",
            "gt": "beautiful"
        },
        {
            "input_prompt": "Input: judicial\nOutput:",
            "test_query": "judicial",
            "prediction": "judicial\nthe word judicial is spelled the same way forwards",
            "cleaned_prediction": "judicial",
            "gt": "extrajudicial"
        },
        {
            "input_prompt": "Input: observational\nOutput:",
            "test_query": "observational",
            "prediction": "theoretical\ntheory: the system's behavior can be modeled",
            "cleaned_prediction": "theoretical",
            "gt": "theoretical"
        },
        {
            "input_prompt": "Input: shorten\nOutput:",
            "test_query": "shorten",
            "prediction": "shorten\nerror: no explanation provided for this example.",
            "cleaned_prediction": "shorten",
            "gt": "lengthen"
        },
        {
            "input_prompt": "Input: gay\nOutput:",
            "test_query": "gay",
            "prediction": "straight\ninput: straight\noutput: gay\ninput",
            "cleaned_prediction": "straight",
            "gt": "straight"
        },
        {
            "input_prompt": "Input: insignificant\nOutput:",
            "test_query": "insignificant",
            "prediction": "significant\ninput: significant\noutput: insignificant\ninput",
            "cleaned_prediction": "significant",
            "gt": "significant"
        },
        {
            "input_prompt": "Input: stable\nOutput:",
            "test_query": "stable",
            "prediction": "unstable\ninput: unstable\noutput: stable\ninput",
            "cleaned_prediction": "unstable",
            "gt": "unstable"
        },
        {
            "input_prompt": "Input: concentration\nOutput:",
            "test_query": "concentration",
            "prediction": "dilution\ndefault: 100 mg/l\nunits",
            "cleaned_prediction": "dilution",
            "gt": "distraction"
        },
        {
            "input_prompt": "Input: fertile\nOutput:",
            "test_query": "fertile",
            "prediction": "barren\n\ninput: rich\noutput: poor\n\ninput",
            "cleaned_prediction": "barren",
            "gt": "infertile"
        },
        {
            "input_prompt": "Input: delete\nOutput:",
            "test_query": "delete",
            "prediction": "add\ninput: add\noutput: delete\ninput",
            "cleaned_prediction": "add",
            "gt": "save"
        },
        {
            "input_prompt": "Input: powdered\nOutput:",
            "test_query": "powdered",
            "prediction": "solid\nchange in state: from solid to liquid",
            "cleaned_prediction": "solid",
            "gt": "solid"
        },
        {
            "input_prompt": "Input: conserve\nOutput:",
            "test_query": "conserve",
            "prediction": "waste\nthe word \"conserve\" is a verb",
            "cleaned_prediction": "waste",
            "gt": "waste"
        },
        {
            "input_prompt": "Input: central\nOutput:",
            "test_query": "central",
            "prediction": "peripheral\n'''\n\n\nimport os\nimport re\nimport",
            "cleaned_prediction": "peripheral",
            "gt": "peripheral"
        },
        {
            "input_prompt": "Input: bulky\nOutput:",
            "test_query": "bulky",
            "prediction": "compact\nthe term \"bulky\" typically refers to",
            "cleaned_prediction": "compact",
            "gt": "compact"
        },
        {
            "input_prompt": "Input: downhill\nOutput:",
            "test_query": "downhill",
            "prediction": "uphill\nthe word \"downhill\" is a synonym",
            "cleaned_prediction": "uphill",
            "gt": "uphill"
        },
        {
            "input_prompt": "Input: alter\nOutput:",
            "test_query": "alter",
            "prediction": "alter\ninput: alger\noutput: alger",
            "cleaned_prediction": "alter",
            "gt": "preserve"
        },
        {
            "input_prompt": "Input: note\nOutput:",
            "test_query": "note",
            "prediction": "opposite\ninput: left\noutput: right\ninput",
            "cleaned_prediction": "opposite",
            "gt": "silence"
        },
        {
            "input_prompt": "Input: death\nOutput:",
            "test_query": "death",
            "prediction": "life\ninput: kill\noutput: save\ninput",
            "cleaned_prediction": "life",
            "gt": "life"
        },
        {
            "input_prompt": "Input: sister\nOutput:",
            "test_query": "sister",
            "prediction": "brother\ninput: cat\noutput: dog\ninput",
            "cleaned_prediction": "brother",
            "gt": "brother"
        },
        {
            "input_prompt": "Input: income\nOutput:",
            "test_query": "income",
            "prediction": "debt\nfunction: calculatedebt\n\n## step",
            "cleaned_prediction": "debt",
            "gt": "expense"
        },
        {
            "input_prompt": "Input: output\nOutput:",
            "test_query": "output",
            "prediction": "input\ninput: output\noutput: input\n\ndef",
            "cleaned_prediction": "input",
            "gt": "input"
        },
        {
            "input_prompt": "Input: objective\nOutput:",
            "test_query": "objective",
            "prediction": "subjective\nobjective vs. subjective\nthe terms objective",
            "cleaned_prediction": "subjective",
            "gt": "subjective"
        },
        {
            "input_prompt": "Input: beast\nOutput:",
            "test_query": "beast",
            "prediction": "tame\nthe word \"beast\" is often used",
            "cleaned_prediction": "tame",
            "gt": "beauty"
        },
        {
            "input_prompt": "Input: everything\nOutput:",
            "test_query": "everything",
            "prediction": "nothing\ninput: nothing\noutput: everything\ninput",
            "cleaned_prediction": "nothing",
            "gt": "nothing"
        },
        {
            "input_prompt": "Input: nationalist\nOutput:",
            "test_query": "nationalist",
            "prediction": "internationalist\nthe term \"nationalist\" refers to",
            "cleaned_prediction": "internationalist",
            "gt": "internationalist"
        },
        {
            "input_prompt": "Input: appear\nOutput:",
            "test_query": "appear",
            "prediction": "disappear\ninput: rise\noutput: fall\ninput",
            "cleaned_prediction": "disappear",
            "gt": "disappear"
        },
        {
            "input_prompt": "Input: favorable\nOutput:",
            "test_query": "favorable",
            "prediction": "unfavorable\ninput: neutral\noutput: neutral\ninput",
            "cleaned_prediction": "unfavorable",
            "gt": "unfavorable"
        },
        {
            "input_prompt": "Input: tomorrow\nOutput:",
            "test_query": "tomorrow",
            "prediction": "yesterday\nthe word \"tomorrow\" is a noun",
            "cleaned_prediction": "yesterday",
            "gt": "yesterday"
        },
        {
            "input_prompt": "Input: homeless\nOutput:",
            "test_query": "homeless",
            "prediction": "housed\nchange: stability\nimpact: reduced stress,",
            "cleaned_prediction": "housed",
            "gt": "housed"
        },
        {
            "input_prompt": "Input: unmanned\nOutput:",
            "test_query": "unmanned",
            "prediction": "manned\nchange: manned\n\nthe word \"unm",
            "cleaned_prediction": "manned",
            "gt": "manned"
        },
        {
            "input_prompt": "Input: reward\nOutput:",
            "test_query": "reward",
            "prediction": "penalty\nmodel: logistic_regression\nparameters: learning_rate",
            "cleaned_prediction": "penalty",
            "gt": "punishment"
        },
        {
            "input_prompt": "Input: absurd\nOutput:",
            "test_query": "absurd",
            "prediction": "reasonable\na man walked into a library and asked the",
            "cleaned_prediction": "reasonable",
            "gt": "sensible"
        },
        {
            "input_prompt": "Input: confused\nOutput:",
            "test_query": "confused",
            "prediction": "clear\n\ninput: unclear\noutput: clear\n\ninput",
            "cleaned_prediction": "clear",
            "gt": "clear-minded"
        },
        {
            "input_prompt": "Input: believable\nOutput:",
            "test_query": "believable",
            "prediction": "unbelievable\na recent study suggests that a large portion of",
            "cleaned_prediction": "unbelievable",
            "gt": "unbelievable"
        },
        {
            "input_prompt": "Input: harass\nOutput:",
            "test_query": "harass",
            "prediction": "respect\na word that is the opposite of harass.",
            "cleaned_prediction": "respect",
            "gt": "comfort"
        },
        {
            "input_prompt": "Input: background\nOutput:",
            "test_query": "background",
            "prediction": "foreground\ninput: background\noutput: foreground\ninput",
            "cleaned_prediction": "foreground",
            "gt": "foreground"
        },
        {
            "input_prompt": "Input: fertility\nOutput:",
            "test_query": "fertility",
            "prediction": "infertility\nsynonyms: barrenness, childlessness,",
            "cleaned_prediction": "infertility",
            "gt": "infertility"
        },
        {
            "input_prompt": "Input: dotted\nOutput:",
            "test_query": "dotted",
            "prediction": "undotted\ninput: undotted\noutput: und",
            "cleaned_prediction": "undotted",
            "gt": "solid"
        },
        {
            "input_prompt": "Input: civilian\nOutput:",
            "test_query": "civilian",
            "prediction": "military\ninput: civilian\noutput: military\ninput",
            "cleaned_prediction": "military",
            "gt": "military"
        },
        {
            "input_prompt": "Input: expenditure\nOutput:",
            "test_query": "expenditure",
            "prediction": "income\nexpenditure is the amount of money spent",
            "cleaned_prediction": "income",
            "gt": "income"
        },
        {
            "input_prompt": "Input: intentional\nOutput:",
            "test_query": "intentional",
            "prediction": "unintentional\ndifficulty: medium\naccount: guest",
            "cleaned_prediction": "unintentional",
            "gt": "accidental"
        },
        {
            "input_prompt": "Input: criticize\nOutput:",
            "test_query": "criticize",
            "prediction": "praise\nthe word \"criticize\" is a",
            "cleaned_prediction": "praise",
            "gt": "praise"
        },
        {
            "input_prompt": "Input: discomfort\nOutput:",
            "test_query": "discomfort",
            "prediction": "comfort\nchange: the change that occurs when we move",
            "cleaned_prediction": "comfort",
            "gt": "comfort"
        },
        {
            "input_prompt": "Input: relax\nOutput:",
            "test_query": "relax",
            "prediction": "tense\ninput: relax\noutput: tense\n\n#",
            "cleaned_prediction": "tense",
            "gt": "stress"
        },
        {
            "input_prompt": "Input: extra\nOutput:",
            "test_query": "extra",
            "prediction": "normal\ninput: extra\noutput: normal\ninput",
            "cleaned_prediction": "normal",
            "gt": "lacking"
        },
        {
            "input_prompt": "Input: sacred\nOutput:",
            "test_query": "sacred",
            "prediction": "profane\nspelling of the word'sac",
            "cleaned_prediction": "profane",
            "gt": "profane"
        },
        {
            "input_prompt": "Input: plentiful\nOutput:",
            "test_query": "plentiful",
            "prediction": "scarce\nenvision a world where the resources we need",
            "cleaned_prediction": "scarce",
            "gt": "scarce"
        },
        {
            "input_prompt": "Input: moral\nOutput:",
            "test_query": "moral",
            "prediction": "immoral\nsynonyms: virtuous, righteous, ethical",
            "cleaned_prediction": "immoral",
            "gt": "immoral"
        },
        {
            "input_prompt": "Input: smart\nOutput:",
            "test_query": "smart",
            "prediction": "dumb\nthe term \"smart\" is often used to",
            "cleaned_prediction": "dumb",
            "gt": "dumb"
        },
        {
            "input_prompt": "Input: mark\nOutput:",
            "test_query": "mark",
            "prediction": "unmarked\ninput: abc\noutput: abc",
            "cleaned_prediction": "unmarked",
            "gt": "unmark"
        },
        {
            "input_prompt": "Input: entire\nOutput:",
            "test_query": "entire",
            "prediction": "partial\ninput: partial\noutput: entire\ninput",
            "cleaned_prediction": "partial",
            "gt": "partial"
        },
        {
            "input_prompt": "Input: treacherous\nOutput:",
            "test_query": "treacherous",
            "prediction": "harmless\ninput: frightening\noutput: harmless\ninput",
            "cleaned_prediction": "harmless",
            "gt": "trustworthy"
        },
        {
            "input_prompt": "Input: inaccessible\nOutput:",
            "test_query": "inaccessible",
            "prediction": "accessible\ninput: accessible\noutput: inaccessible\n\n```",
            "cleaned_prediction": "accessible",
            "gt": "accessible"
        },
        {
            "input_prompt": "Input: inexpensive\nOutput:",
            "test_query": "inexpensive",
            "prediction": "expensive\ninput: luxurious\noutput: cheap\ninput",
            "cleaned_prediction": "expensive",
            "gt": "expensive"
        },
        {
            "input_prompt": "Input: classify\nOutput:",
            "test_query": "classify",
            "prediction": "categorize\ninterdependence: categorize\nsynonyms",
            "cleaned_prediction": "categorize",
            "gt": "disorganize"
        },
        {
            "input_prompt": "Input: historical\nOutput:",
            "test_query": "historical",
            "prediction": "modern\ncategory: architecture\ndescription: the design of",
            "cleaned_prediction": "modern",
            "gt": "contemporary"
        },
        {
            "input_prompt": "Input: grow\nOutput:",
            "test_query": "grow",
            "prediction": "shrink\ninput: shrink\noutput: grow\ninput",
            "cleaned_prediction": "shrink",
            "gt": "shrink"
        },
        {
            "input_prompt": "Input: repair\nOutput:",
            "test_query": "repair",
            "prediction": "repair\ninput: repairs\noutput: repairs\ninput",
            "cleaned_prediction": "repair",
            "gt": "damage"
        },
        {
            "input_prompt": "Input: decrease\nOutput:",
            "test_query": "decrease",
            "prediction": "increase\ninput: increase\noutput: decrease\ninput",
            "cleaned_prediction": "increase",
            "gt": "increase"
        },
        {
            "input_prompt": "Input: visual\nOutput:",
            "test_query": "visual",
            "prediction": "aural\nskills needed: listening, comprehension, memory",
            "cleaned_prediction": "aural",
            "gt": "auditory"
        },
        {
            "input_prompt": "Input: secret\nOutput:",
            "test_query": "secret",
            "prediction": "open\ntransition: secret -> open\ntransition: open",
            "cleaned_prediction": "open",
            "gt": "public"
        },
        {
            "input_prompt": "Input: unclear\nOutput:",
            "test_query": "unclear",
            "prediction": "clear\nthe function takes an input, which is unclear",
            "cleaned_prediction": "clear",
            "gt": "clear"
        },
        {
            "input_prompt": "Input: capable\nOutput:",
            "test_query": "capable",
            "prediction": "incapable\ninput: good\noutput: good\ninput",
            "cleaned_prediction": "incapable",
            "gt": "incapable"
        },
        {
            "input_prompt": "Input: feature\nOutput:",
            "test_query": "feature",
            "prediction": "output\ndescription: this task represents a feature extraction task",
            "cleaned_prediction": "output",
            "gt": "bug"
        },
        {
            "input_prompt": "Input: functional\nOutput:",
            "test_query": "functional",
            "prediction": "dysfunctional\ninput: functional\noutput: dysfunctional\ninput",
            "cleaned_prediction": "dysfunctional",
            "gt": "dysfunctional"
        },
        {
            "input_prompt": "Input: subdued\nOutput:",
            "test_query": "subdued",
            "prediction": "vibrant\ninput: calm\noutput: dynamic\ninput",
            "cleaned_prediction": "vibrant",
            "gt": "vibrant"
        },
        {
            "input_prompt": "Input: wake\nOutput:",
            "test_query": "wake",
            "prediction": "sleep\ninput: run\noutput: walk\ninput",
            "cleaned_prediction": "sleep",
            "gt": "sleep"
        },
        {
            "input_prompt": "Input: decline\nOutput:",
            "test_query": "decline",
            "prediction": "increase\nchange in quantity of a variable (e.g",
            "cleaned_prediction": "increase",
            "gt": "increase"
        },
        {
            "input_prompt": "Input: tolerance\nOutput:",
            "test_query": "tolerance",
            "prediction": "precision\nconstraint: the output should be a string of",
            "cleaned_prediction": "precision",
            "gt": "intolerance"
        },
        {
            "input_prompt": "Input: rest\nOutput:",
            "test_query": "rest",
            "prediction": "active\ninput: eat\noutput: active\ninput",
            "cleaned_prediction": "active",
            "gt": "work"
        },
        {
            "input_prompt": "Input: shameful\nOutput:",
            "test_query": "shameful",
            "prediction": "honorable\nwe all know that in the bible, the",
            "cleaned_prediction": "honorable",
            "gt": "honorable"
        },
        {
            "input_prompt": "Input: main\nOutput:",
            "test_query": "main",
            "prediction": "opposite\nproblem id: 1049\n---\n\nclass",
            "cleaned_prediction": "opposite",
            "gt": "secondary"
        },
        {
            "input_prompt": "Input: analysis\nOutput:",
            "test_query": "analysis",
            "prediction": "synthesis\nthe process of breaking down a complex system into",
            "cleaned_prediction": "synthesis",
            "gt": "synthesis"
        },
        {
            "input_prompt": "Input: soil\nOutput:",
            "test_query": "soil",
            "prediction": "barren\noutput: fertile\noutput: poor\noutput",
            "cleaned_prediction": "barren",
            "gt": "sky"
        },
        {
            "input_prompt": "Input: downside\nOutput:",
            "test_query": "downside",
            "prediction": "upside\n================\n\n### description\n\nthis code is a",
            "cleaned_prediction": "upside",
            "gt": "upside"
        },
        {
            "input_prompt": "Input: tail\nOutput:",
            "test_query": "tail",
            "prediction": "head\ninput: head\noutput: tail\ninput",
            "cleaned_prediction": "head",
            "gt": "head"
        },
        {
            "input_prompt": "Input: contradict\nOutput:",
            "test_query": "contradict",
            "prediction": "agree\ninput: disagree\noutput: contradict\ninput",
            "cleaned_prediction": "agree",
            "gt": "agree"
        },
        {
            "input_prompt": "Input: medieval\nOutput:",
            "test_query": "medieval",
            "prediction": "modern\nthe term \"medieval\" has evolved over",
            "cleaned_prediction": "modern",
            "gt": "modern"
        },
        {
            "input_prompt": "Input: antagonist\nOutput:",
            "test_query": "antagonist",
            "prediction": "protagonist\nthe word \"antagonist\" is a",
            "cleaned_prediction": "protagonist",
            "gt": "protagonist"
        },
        {
            "input_prompt": "Input: lineman\nOutput:",
            "test_query": "lineman",
            "prediction": "lineman\ndefinition: (noun) a person employed to",
            "cleaned_prediction": "lineman",
            "gt": "receiver"
        },
        {
            "input_prompt": "Input: differentiate\nOutput:",
            "test_query": "differentiate",
            "prediction": "integrate\nonion: the onion - america's fin",
            "cleaned_prediction": "integrate",
            "gt": "integrate"
        },
        {
            "input_prompt": "Input: colored\nOutput:",
            "test_query": "colored",
            "prediction": "monochrome\noutput (formatted): <table><tr",
            "cleaned_prediction": "monochrome",
            "gt": "colorless"
        },
        {
            "input_prompt": "Input: file\nOutput:",
            "test_query": "file",
            "prediction": "output\nerror: error\n\n# introduction\n\nthis is",
            "cleaned_prediction": "output",
            "gt": "delete"
        },
        {
            "input_prompt": "Input: solid\nOutput:",
            "test_query": "solid",
            "prediction": "hollow\ninput: hollow\noutput: solid\n\nexplanation",
            "cleaned_prediction": "hollow",
            "gt": "liquid"
        },
        {
            "input_prompt": "Input: playful\nOutput:",
            "test_query": "playful",
            "prediction": "dull\ninput: lively\noutput: dull\ninput",
            "cleaned_prediction": "dull",
            "gt": "serious"
        },
        {
            "input_prompt": "Input: mistaken\nOutput:",
            "test_query": "mistaken",
            "prediction": "correct\ninput: accurate\noutput: correct\ninput",
            "cleaned_prediction": "correct",
            "gt": "correct"
        },
        {
            "input_prompt": "Input: imaginative\nOutput:",
            "test_query": "imaginative",
            "prediction": "mundane\nthe word \"imaginative\" has a positive",
            "cleaned_prediction": "mundane",
            "gt": "practical"
        },
        {
            "input_prompt": "Input: marvelous\nOutput:",
            "test_query": "marvelous",
            "prediction": "ordinary\ninput: fantastic\noutput: average\ninput",
            "cleaned_prediction": "ordinary",
            "gt": "terrible"
        },
        {
            "input_prompt": "Input: condemn\nOutput:",
            "test_query": "condemn",
            "prediction": "approve\nthe antonym of \"condemn\"",
            "cleaned_prediction": "approve",
            "gt": "praise"
        },
        {
            "input_prompt": "Input: outfield\nOutput:",
            "test_query": "outfield",
            "prediction": "infield\ninput: infield\noutput: outfield\n\ninput",
            "cleaned_prediction": "infield",
            "gt": "infield"
        },
        {
            "input_prompt": "Input: procedural\nOutput:",
            "test_query": "procedural",
            "prediction": "random\nwaterfall is a term that is used in",
            "cleaned_prediction": "random",
            "gt": "conceptual"
        },
        {
            "input_prompt": "Input: nuclear\nOutput:",
            "test_query": "nuclear",
            "prediction": "atomic\nsynonyms: nuclear, atomic, nuclear,",
            "cleaned_prediction": "atomic",
            "gt": "renewable"
        },
        {
            "input_prompt": "Input: charge\nOutput:",
            "test_query": "charge",
            "prediction": "discharge\nmodel: electric field\n## step 1",
            "cleaned_prediction": "discharge",
            "gt": "discharge"
        },
        {
            "input_prompt": "Input: undergraduate\nOutput:",
            "test_query": "undergraduate",
            "prediction": "graduate\ninput: phd\noutput: postgraduate",
            "cleaned_prediction": "graduate",
            "gt": "graduate"
        },
        {
            "input_prompt": "Input: new\nOutput:",
            "test_query": "new",
            "prediction": "old\nexplanation: this problem is asking us to find",
            "cleaned_prediction": "old",
            "gt": "old"
        },
        {
            "input_prompt": "Input: penal\nOutput:",
            "test_query": "penal",
            "prediction": "non-penal\ninput: non-penal\noutput",
            "cleaned_prediction": "non-penal",
            "gt": "rewarding"
        },
        {
            "input_prompt": "Input: meaningful\nOutput:",
            "test_query": "meaningful",
            "prediction": "meaningless\ninput: meaningless\noutput: meaningless\ninput",
            "cleaned_prediction": "meaningless",
            "gt": "meaningless"
        },
        {
            "input_prompt": "Input: thin\nOutput:",
            "test_query": "thin",
            "prediction": "thick\n===\n\n### problem: 1244",
            "cleaned_prediction": "thick",
            "gt": "thick"
        },
        {
            "input_prompt": "Input: rivalry\nOutput:",
            "test_query": "rivalry",
            "prediction": "harmony\ninput: chaos\noutput: order\ninput",
            "cleaned_prediction": "harmony",
            "gt": "cooperation"
        },
        {
            "input_prompt": "Input: run\nOutput:",
            "test_query": "run",
            "prediction": "stop\nexplanation: the command \"run\" is a",
            "cleaned_prediction": "stop",
            "gt": "walk"
        },
        {
            "input_prompt": "Input: spiritual\nOutput:",
            "test_query": "spiritual",
            "prediction": "material\nthe spiritual and material are two different realms of",
            "cleaned_prediction": "material",
            "gt": "materialistic"
        },
        {
            "input_prompt": "Input: comparative\nOutput:",
            "test_query": "comparative",
            "prediction": "comparative\nrelated to: comparative\ndefinition: relating to",
            "cleaned_prediction": "comparative",
            "gt": "superlative"
        },
        {
            "input_prompt": "Input: probable\nOutput:",
            "test_query": "probable",
            "prediction": "improbable\nrelated: unlikely, improbable, impossible, unlikely",
            "cleaned_prediction": "improbable",
            "gt": "improbable"
        },
        {
            "input_prompt": "Input: circular\nOutput:",
            "test_query": "circular",
            "prediction": "linear\nconstraints: \n*   the input array is",
            "cleaned_prediction": "linear",
            "gt": "square"
        },
        {
            "input_prompt": "Input: recreational\nOutput:",
            "test_query": "recreational",
            "prediction": "professional\nchange one letter to get from recreational to professional",
            "cleaned_prediction": "professional",
            "gt": "professional"
        },
        {
            "input_prompt": "Input: many\nOutput:",
            "test_query": "many",
            "prediction": "few\ndifficulty: easy\nmax mistakes: 1",
            "cleaned_prediction": "few",
            "gt": "few"
        },
        {
            "input_prompt": "Input: relative\nOutput:",
            "test_query": "relative",
            "prediction": "absolute\ninput: absolute\noutput: relative\ninput",
            "cleaned_prediction": "absolute",
            "gt": "absolute"
        }
    ]
}