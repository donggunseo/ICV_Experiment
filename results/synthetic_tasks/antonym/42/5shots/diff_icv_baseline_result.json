{
    "score": {
        "exact_match": 0.5899581589958159
    },
    "intervention_layer": 13,
    "result": [
        {
            "input_prompt": "Input: further\nOutput:",
            "test_query": "further",
            "prediction": "less\ninput: fewer\noutput: less\ninput",
            "cleaned_prediction": "less",
            "gt": "closer"
        },
        {
            "input_prompt": "Input: fact\nOutput:",
            "test_query": "fact",
            "prediction": "fiction\ninput: act\noutput: action\ninput",
            "cleaned_prediction": "fiction",
            "gt": "fiction"
        },
        {
            "input_prompt": "Input: universal\nOutput:",
            "test_query": "universal",
            "prediction": "particular\ncomment: this example illustrates how a universal proposition",
            "cleaned_prediction": "particular",
            "gt": "specific"
        },
        {
            "input_prompt": "Input: medial\nOutput:",
            "test_query": "medial",
            "prediction": "lateral\nthe term medial is used to describe something that",
            "cleaned_prediction": "lateral",
            "gt": "lateral"
        },
        {
            "input_prompt": "Input: excellent\nOutput:",
            "test_query": "excellent",
            "prediction": "poor\nreason: the model is not able to generalize",
            "cleaned_prediction": "poor",
            "gt": "poor"
        },
        {
            "input_prompt": "Input: require\nOutput:",
            "test_query": "require",
            "prediction": "require\ntest: require('fs').readfilesync('",
            "cleaned_prediction": "require",
            "gt": "exempt"
        },
        {
            "input_prompt": "Input: convoluted\nOutput:",
            "test_query": "convoluted",
            "prediction": "unconvoluted\ndefinition: (adjective)",
            "cleaned_prediction": "unconvoluted",
            "gt": "straightforward"
        },
        {
            "input_prompt": "Input: proceed\nOutput:",
            "test_query": "proceed",
            "prediction": "conclude\nsynonyms: finish, terminate, stop,",
            "cleaned_prediction": "conclude",
            "gt": "halt"
        },
        {
            "input_prompt": "Input: promote\nOutput:",
            "test_query": "promote",
            "prediction": "demote\nthe antonym of \"promote\"",
            "cleaned_prediction": "demote",
            "gt": "demote"
        },
        {
            "input_prompt": "Input: set\nOutput:",
            "test_query": "set",
            "prediction": "set\ntask: return the intersection of the two sets",
            "cleaned_prediction": "set",
            "gt": "unset"
        },
        {
            "input_prompt": "Input: matter\nOutput:",
            "test_query": "matter",
            "prediction": "antimatter\na process in which a particle or a",
            "cleaned_prediction": "antimatter",
            "gt": "antimatter"
        },
        {
            "input_prompt": "Input: commercial\nOutput:",
            "test_query": "commercial",
            "prediction": "residential\nin a city with a rapidly growing population,",
            "cleaned_prediction": "residential",
            "gt": "residential"
        },
        {
            "input_prompt": "Input: upper\nOutput:",
            "test_query": "upper",
            "prediction": "lower\ninput: lower\noutput: lower\ninput",
            "cleaned_prediction": "lower",
            "gt": "lower"
        },
        {
            "input_prompt": "Input: neutral\nOutput:",
            "test_query": "neutral",
            "prediction": "positive\ngloss: the phrase is used to describe",
            "cleaned_prediction": "positive",
            "gt": "biased"
        },
        {
            "input_prompt": "Input: arrive\nOutput:",
            "test_query": "arrive",
            "prediction": "depart\ninput: arrive\noutput: depart\ninput",
            "cleaned_prediction": "depart",
            "gt": "depart"
        },
        {
            "input_prompt": "Input: socialist\nOutput:",
            "test_query": "socialist",
            "prediction": "capitalist\na common misconception is that socialism is the opposite",
            "cleaned_prediction": "capitalist",
            "gt": "capitalist"
        },
        {
            "input_prompt": "Input: distrust\nOutput:",
            "test_query": "distrust",
            "prediction": "trust\na transformation of distrust to trust is possible through",
            "cleaned_prediction": "trust",
            "gt": "trust"
        },
        {
            "input_prompt": "Input: chaotic\nOutput:",
            "test_query": "chaotic",
            "prediction": "harmonious\nhow does this happen? it seems to",
            "cleaned_prediction": "harmonious",
            "gt": "orderly"
        },
        {
            "input_prompt": "Input: obedience\nOutput:",
            "test_query": "obedience",
            "prediction": "disobedience\nthe word \"obedience\" is",
            "cleaned_prediction": "disobedience",
            "gt": "disobedience"
        },
        {
            "input_prompt": "Input: lender\nOutput:",
            "test_query": "lender",
            "prediction": "borrower\ninput: borrow\noutput: lender\ninput",
            "cleaned_prediction": "borrower",
            "gt": "borrower"
        },
        {
            "input_prompt": "Input: intellectual\nOutput:",
            "test_query": "intellectual",
            "prediction": "intellectual\ninput: intellectual\noutput: intellectual\ninput",
            "cleaned_prediction": "intellectual",
            "gt": "unintellectual"
        },
        {
            "input_prompt": "Input: hold\nOutput:",
            "test_query": "hold",
            "prediction": "hold\nduration: 1 ms\nfuzziness",
            "cleaned_prediction": "hold",
            "gt": "release"
        },
        {
            "input_prompt": "Input: fugitive\nOutput:",
            "test_query": "fugitive",
            "prediction": "wanted\n\ninput: \n    aaa\n    bbb",
            "cleaned_prediction": "wanted",
            "gt": "law-abiding citizen"
        },
        {
            "input_prompt": "Input: infinite\nOutput:",
            "test_query": "infinite",
            "prediction": "finite\nreasoning skill: inductive reasoning",
            "cleaned_prediction": "finite",
            "gt": "finite"
        },
        {
            "input_prompt": "Input: offence\nOutput:",
            "test_query": "offence",
            "prediction": "defence\ninput: defense\noutput: defence\ninput",
            "cleaned_prediction": "defence",
            "gt": "defence"
        },
        {
            "input_prompt": "Input: outlaw\nOutput:",
            "test_query": "outlaw",
            "prediction": "lawbreaker\nsynonyms: lawbreaker, outlaw,",
            "cleaned_prediction": "lawbreaker",
            "gt": "law-abiding citizen"
        },
        {
            "input_prompt": "Input: sour\nOutput:",
            "test_query": "sour",
            "prediction": "sweet\ninput: bitter\noutput: sweet\ninput",
            "cleaned_prediction": "sweet",
            "gt": "sweet"
        },
        {
            "input_prompt": "Input: cause\nOutput:",
            "test_query": "cause",
            "prediction": "effect\ninput: effect\noutput: cause\ninput",
            "cleaned_prediction": "effect",
            "gt": "effect"
        },
        {
            "input_prompt": "Input: assail\nOutput:",
            "test_query": "assail",
            "prediction": "assail\ninput: assail\noutput: assail\n\n#",
            "cleaned_prediction": "assail",
            "gt": "defend"
        },
        {
            "input_prompt": "Input: dirty\nOutput:",
            "test_query": "dirty",
            "prediction": "clean\ninput: clean\noutput: dirty\n\n```",
            "cleaned_prediction": "clean",
            "gt": "clean"
        },
        {
            "input_prompt": "Input: chilly\nOutput:",
            "test_query": "chilly",
            "prediction": "warm\n\nexplanation:\nthe input \"chilly\" is",
            "cleaned_prediction": "warm",
            "gt": "warm"
        },
        {
            "input_prompt": "Input: incompatible\nOutput:",
            "test_query": "incompatible",
            "prediction": "compatible\nexplanation:\nthe input string \"incompatible\"",
            "cleaned_prediction": "compatible",
            "gt": "compatible"
        },
        {
            "input_prompt": "Input: insufficient\nOutput:",
            "test_query": "insufficient",
            "prediction": "sufficient\ninput: insufficient\noutput: sufficient\ninput",
            "cleaned_prediction": "sufficient",
            "gt": "sufficient"
        },
        {
            "input_prompt": "Input: accept\nOutput:",
            "test_query": "accept",
            "prediction": "reject\nreason: acceptance of the proposed changes would",
            "cleaned_prediction": "reject",
            "gt": "reject"
        },
        {
            "input_prompt": "Input: awake\nOutput:",
            "test_query": "awake",
            "prediction": "asleep\ninput: sleepy\noutput: awake\ninput",
            "cleaned_prediction": "asleep",
            "gt": "asleep"
        },
        {
            "input_prompt": "Input: bogus\nOutput:",
            "test_query": "bogus",
            "prediction": "valid\nexplanation: the input \"bogus\"",
            "cleaned_prediction": "valid",
            "gt": "authentic"
        },
        {
            "input_prompt": "Input: spurious\nOutput:",
            "test_query": "spurious",
            "prediction": "genuine\ninput: fake\noutput: genuine\ninput",
            "cleaned_prediction": "genuine",
            "gt": "authentic"
        },
        {
            "input_prompt": "Input: mild\nOutput:",
            "test_query": "mild",
            "prediction": "severe\ninput: moderate\noutput: severe\ninput",
            "cleaned_prediction": "severe",
            "gt": "severe"
        },
        {
            "input_prompt": "Input: incoming\nOutput:",
            "test_query": "incoming",
            "prediction": "outgoing\ninput: outgoing\noutput: incoming\n\ninput",
            "cleaned_prediction": "outgoing",
            "gt": "outgoing"
        },
        {
            "input_prompt": "Input: advanced\nOutput:",
            "test_query": "advanced",
            "prediction": "basic\nsolve: the word \"advanced\" has",
            "cleaned_prediction": "basic",
            "gt": "basic"
        },
        {
            "input_prompt": "Input: admit\nOutput:",
            "test_query": "admit",
            "prediction": "deny\ninput: deny\noutput: admit\n\ninput",
            "cleaned_prediction": "deny",
            "gt": "deny"
        },
        {
            "input_prompt": "Input: someone\nOutput:",
            "test_query": "someone",
            "prediction": "someone\ni am someone who is not a person.",
            "cleaned_prediction": "someone",
            "gt": "no one"
        },
        {
            "input_prompt": "Input: clumsy\nOutput:",
            "test_query": "clumsy",
            "prediction": "agile\ninput: awkward\noutput: nimble",
            "cleaned_prediction": "agile",
            "gt": "graceful"
        },
        {
            "input_prompt": "Input: falsehood\nOutput:",
            "test_query": "falsehood",
            "prediction": "truth\ninput: lie\noutput: fact\ninput",
            "cleaned_prediction": "truth",
            "gt": "truth"
        },
        {
            "input_prompt": "Input: refined\nOutput:",
            "test_query": "refined",
            "prediction": "unrefined\ndescription: this process is used to",
            "cleaned_prediction": "unrefined",
            "gt": "crude"
        },
        {
            "input_prompt": "Input: bitter\nOutput:",
            "test_query": "bitter",
            "prediction": "sweet\nthe sweet and bitter taste receptors on the tongue",
            "cleaned_prediction": "sweet",
            "gt": "sweet"
        },
        {
            "input_prompt": "Input: let\nOutput:",
            "test_query": "let",
            "prediction": "get\nfailure: let\n\ninput: get\noutput",
            "cleaned_prediction": "get",
            "gt": "prevent"
        },
        {
            "input_prompt": "Input: familiar\nOutput:",
            "test_query": "familiar",
            "prediction": "unfamiliar\ninput: normal\noutput: unusual\ninput",
            "cleaned_prediction": "unfamiliar",
            "gt": "unfamiliar"
        },
        {
            "input_prompt": "Input: humility\nOutput:",
            "test_query": "humility",
            "prediction": "pride\ninput: love\noutput: hate\ninput",
            "cleaned_prediction": "pride",
            "gt": "pride"
        },
        {
            "input_prompt": "Input: dense\nOutput:",
            "test_query": "dense",
            "prediction": "sparse\ninput shape: (10, 784)",
            "cleaned_prediction": "sparse",
            "gt": "sparse"
        },
        {
            "input_prompt": "Input: miss\nOutput:",
            "test_query": "miss",
            "prediction": "hit\ninput: \"hello\"\noutput: \"hol",
            "cleaned_prediction": "hit",
            "gt": "hit"
        },
        {
            "input_prompt": "Input: optional\nOutput:",
            "test_query": "optional",
            "prediction": "required\nin the context of a chatbot or a",
            "cleaned_prediction": "required",
            "gt": "mandatory"
        },
        {
            "input_prompt": "Input: local\nOutput:",
            "test_query": "local",
            "prediction": "global\nfault: false\ncomment: \n```patch",
            "cleaned_prediction": "global",
            "gt": "foreign"
        },
        {
            "input_prompt": "Input: uneasy\nOutput:",
            "test_query": "uneasy",
            "prediction": "serene\nserene is the opposite of uneasy, which",
            "cleaned_prediction": "serene",
            "gt": "comfortable"
        },
        {
            "input_prompt": "Input: wisdom\nOutput:",
            "test_query": "wisdom",
            "prediction": "foolishness\ninput: wisdom\noutput: foolishness",
            "cleaned_prediction": "foolishness",
            "gt": "foolishness"
        },
        {
            "input_prompt": "Input: speed\nOutput:",
            "test_query": "speed",
            "prediction": "time\nspeed is a scalar quantity that describes the rate",
            "cleaned_prediction": "time",
            "gt": "slowness"
        },
        {
            "input_prompt": "Input: catalyst\nOutput:",
            "test_query": "catalyst",
            "prediction": "inhibitor\nmodel type: supervised learning\nmodel:",
            "cleaned_prediction": "inhibitor",
            "gt": "inhibitor"
        },
        {
            "input_prompt": "Input: protagonist\nOutput:",
            "test_query": "protagonist",
            "prediction": "antagonist\nchange one letter from \"protagonist\"",
            "cleaned_prediction": "antagonist",
            "gt": "antagonist"
        },
        {
            "input_prompt": "Input: white\nOutput:",
            "test_query": "white",
            "prediction": "black\ninput: black\noutput: white\ninput",
            "cleaned_prediction": "black",
            "gt": "black"
        },
        {
            "input_prompt": "Input: specified\nOutput:",
            "test_query": "specified",
            "prediction": "specified\ntime: 2021-12-31",
            "cleaned_prediction": "specified",
            "gt": "unspecified"
        },
        {
            "input_prompt": "Input: rude\nOutput:",
            "test_query": "rude",
            "prediction": "polite\nthe tone of the response can be adjusted to",
            "cleaned_prediction": "polite",
            "gt": "polite"
        },
        {
            "input_prompt": "Input: tall\nOutput:",
            "test_query": "tall",
            "prediction": "short\nexplanation: the string \"tall\" spelled",
            "cleaned_prediction": "short",
            "gt": "short"
        },
        {
            "input_prompt": "Input: sink\nOutput:",
            "test_query": "sink",
            "prediction": "source\nthe source is the point from which a river",
            "cleaned_prediction": "source",
            "gt": "float"
        },
        {
            "input_prompt": "Input: intelligent\nOutput:",
            "test_query": "intelligent",
            "prediction": "stupid\ninput: intelligent\noutput: stupid\ninput",
            "cleaned_prediction": "stupid",
            "gt": "unintelligent"
        },
        {
            "input_prompt": "Input: overt\nOutput:",
            "test_query": "overt",
            "prediction": "covert\nchange one letter from \"overt\" to",
            "cleaned_prediction": "covert",
            "gt": "covert"
        },
        {
            "input_prompt": "Input: foul\nOutput:",
            "test_query": "foul",
            "prediction": "sweet\ninput: bitter\noutput: sweet\ninput",
            "cleaned_prediction": "sweet",
            "gt": "fair"
        },
        {
            "input_prompt": "Input: improvement\nOutput:",
            "test_query": "improvement",
            "prediction": "deterioration\ndeterioration of the environment is the",
            "cleaned_prediction": "deterioration",
            "gt": "deterioration"
        },
        {
            "input_prompt": "Input: terrestrial\nOutput:",
            "test_query": "terrestrial",
            "prediction": "celestial\nthe word \"terrestrial\" uses 11",
            "cleaned_prediction": "celestial",
            "gt": "aquatic"
        },
        {
            "input_prompt": "Input: martial\nOutput:",
            "test_query": "martial",
            "prediction": "martial\ninput: martials\noutput: martials",
            "cleaned_prediction": "martial",
            "gt": "civilian"
        },
        {
            "input_prompt": "Input: front\nOutput:",
            "test_query": "front",
            "prediction": "back\ninput: back\noutput: front\n\ndef",
            "cleaned_prediction": "back",
            "gt": "back"
        },
        {
            "input_prompt": "Input: lie\nOutput:",
            "test_query": "lie",
            "prediction": "truth\ninput: false\noutput: truth\ninput",
            "cleaned_prediction": "truth",
            "gt": "truth"
        },
        {
            "input_prompt": "Input: northwest\nOutput:",
            "test_query": "northwest",
            "prediction": "southeast\ninput: northeast\noutput: southwest\ninput",
            "cleaned_prediction": "southeast",
            "gt": "southeast"
        },
        {
            "input_prompt": "Input: red\nOutput:",
            "test_query": "red",
            "prediction": "blue\n\ninput: green\noutput: yellow\n\ninput",
            "cleaned_prediction": "blue",
            "gt": "blue"
        },
        {
            "input_prompt": "Input: worn\nOutput:",
            "test_query": "worn",
            "prediction": "new\nsynonyms: fresh, unused, unworn",
            "cleaned_prediction": "new",
            "gt": "new"
        },
        {
            "input_prompt": "Input: kid\nOutput:",
            "test_query": "kid",
            "prediction": "adult\n\ninput: baby\noutput: child\n\ninput",
            "cleaned_prediction": "adult",
            "gt": "adult"
        },
        {
            "input_prompt": "Input: periodic\nOutput:",
            "test_query": "periodic",
            "prediction": "aperiodic\nperiodic vs aperiodic",
            "cleaned_prediction": "aperiodic",
            "gt": "aperiodic"
        },
        {
            "input_prompt": "Input: misconception\nOutput:",
            "test_query": "misconception",
            "prediction": "misconception\ndefinition: a mistaken or incorrect idea or understanding",
            "cleaned_prediction": "misconception",
            "gt": "understanding"
        },
        {
            "input_prompt": "Input: difficult\nOutput:",
            "test_query": "difficult",
            "prediction": "easy\nexplanation: the string \"difficult\" spelled",
            "cleaned_prediction": "easy",
            "gt": "easy"
        },
        {
            "input_prompt": "Input: lower\nOutput:",
            "test_query": "lower",
            "prediction": "higher\ninput: 5\noutput: higher",
            "cleaned_prediction": "higher",
            "gt": "upper"
        },
        {
            "input_prompt": "Input: drunk\nOutput:",
            "test_query": "drunk",
            "prediction": "sober\nexplanation: the function takes a string as input",
            "cleaned_prediction": "sober",
            "gt": "sober"
        },
        {
            "input_prompt": "Input: unorthodox\nOutput:",
            "test_query": "unorthodox",
            "prediction": "conventional\ndefinition: (adjective) not according to",
            "cleaned_prediction": "conventional",
            "gt": "orthodox"
        },
        {
            "input_prompt": "Input: union\nOutput:",
            "test_query": "union",
            "prediction": "intersection\ninput: intersection\noutput: union\ninput",
            "cleaned_prediction": "intersection",
            "gt": "division"
        },
        {
            "input_prompt": "Input: stuff\nOutput:",
            "test_query": "stuff",
            "prediction": "nothing\nnote: i was trying to get the input",
            "cleaned_prediction": "nothing",
            "gt": "empty"
        },
        {
            "input_prompt": "Input: major\nOutput:",
            "test_query": "major",
            "prediction": "minor\ninput: minor\noutput: major\ninput",
            "cleaned_prediction": "minor",
            "gt": "minor"
        },
        {
            "input_prompt": "Input: peripheral\nOutput:",
            "test_query": "peripheral",
            "prediction": "central\ntype: sensor\ndescription: measures temperature,",
            "cleaned_prediction": "central",
            "gt": "central"
        },
        {
            "input_prompt": "Input: worldly\nOutput:",
            "test_query": "worldly",
            "prediction": "unworldly\ndefinition: not worldly; unac",
            "cleaned_prediction": "unworldly",
            "gt": "spiritual"
        },
        {
            "input_prompt": "Input: rapid\nOutput:",
            "test_query": "rapid",
            "prediction": "slow\n---\n\ninput: slow\noutput: rapid",
            "cleaned_prediction": "slow",
            "gt": "slow"
        },
        {
            "input_prompt": "Input: unmarked\nOutput:",
            "test_query": "unmarked",
            "prediction": "marked\ninput: marked\noutput: marked\ninput",
            "cleaned_prediction": "marked",
            "gt": "marked"
        },
        {
            "input_prompt": "Input: ladies\nOutput:",
            "test_query": "ladies",
            "prediction": "gentlemen\nexplanation: the word \"ladies\" is",
            "cleaned_prediction": "gentlemen",
            "gt": "gentlemen"
        },
        {
            "input_prompt": "Input: lesbian\nOutput:",
            "test_query": "lesbian",
            "prediction": "gay\nthe word \"lesbian\" is a noun",
            "cleaned_prediction": "gay",
            "gt": "straight"
        },
        {
            "input_prompt": "Input: plain\nOutput:",
            "test_query": "plain",
            "prediction": "formatted\ninput: formatted\noutput: formatted\ninput",
            "cleaned_prediction": "formatted",
            "gt": "fancy"
        },
        {
            "input_prompt": "Input: head\nOutput:",
            "test_query": "head",
            "prediction": "head\n\nexplanation: the linked list is empty, so",
            "cleaned_prediction": "head",
            "gt": "tail"
        },
        {
            "input_prompt": "Input: displeasure\nOutput:",
            "test_query": "displeasure",
            "prediction": "satisfaction\ninput: discontent\noutput: contentment",
            "cleaned_prediction": "satisfaction",
            "gt": "pleasure"
        },
        {
            "input_prompt": "Input: arise\nOutput:",
            "test_query": "arise",
            "prediction": "arise\ngender: none\nsubmission date: 202",
            "cleaned_prediction": "arise",
            "gt": "settle"
        },
        {
            "input_prompt": "Input: symptom\nOutput:",
            "test_query": "symptom",
            "prediction": "symptom\ninput: pain\noutput: pain\ninput",
            "cleaned_prediction": "symptom",
            "gt": "cure"
        },
        {
            "input_prompt": "Input: dusty\nOutput:",
            "test_query": "dusty",
            "prediction": "clean\nthe word \"dusty\" is an ant",
            "cleaned_prediction": "clean",
            "gt": "clean"
        },
        {
            "input_prompt": "Input: location\nOutput:",
            "test_query": "location",
            "prediction": "location\nreturn the coordinates of the point that is the",
            "cleaned_prediction": "location",
            "gt": "displacement"
        },
        {
            "input_prompt": "Input: coloured\nOutput:",
            "test_query": "coloured",
            "prediction": "monochrome\noutput: monochrome\noutput: mon",
            "cleaned_prediction": "monochrome",
            "gt": "monochrome"
        },
        {
            "input_prompt": "Input: retrieve\nOutput:",
            "test_query": "retrieve",
            "prediction": "insert\noutput: retrieve\noutput: insert\noutput",
            "cleaned_prediction": "insert",
            "gt": "discard"
        },
        {
            "input_prompt": "Input: mad\nOutput:",
            "test_query": "mad",
            "prediction": "sad\nexplanation: we need to reverse the string \"",
            "cleaned_prediction": "sad",
            "gt": "sane"
        },
        {
            "input_prompt": "Input: dark\nOutput:",
            "test_query": "dark",
            "prediction": "light\nchange in: illumination\nchange by:",
            "cleaned_prediction": "light",
            "gt": "light"
        },
        {
            "input_prompt": "Input: constructive\nOutput:",
            "test_query": "constructive",
            "prediction": "destructive\nexplanation:\nthe input is \"constructive\",",
            "cleaned_prediction": "destructive",
            "gt": "destructive"
        },
        {
            "input_prompt": "Input: shallow\nOutput:",
            "test_query": "shallow",
            "prediction": "deep\ninput: deep\noutput: shallow\ninput",
            "cleaned_prediction": "deep",
            "gt": "deep"
        },
        {
            "input_prompt": "Input: genuine\nOutput:",
            "test_query": "genuine",
            "prediction": "fake\ninput: real\noutput: fake\ninput",
            "cleaned_prediction": "fake",
            "gt": "fake"
        },
        {
            "input_prompt": "Input: short\nOutput:",
            "test_query": "short",
            "prediction": "long\ninput: long\noutput: long\ninput",
            "cleaned_prediction": "long",
            "gt": "long"
        },
        {
            "input_prompt": "Input: evolution\nOutput:",
            "test_query": "evolution",
            "prediction": "devolution\nrelated: devolution\nthe process of",
            "cleaned_prediction": "devolution",
            "gt": "devolution"
        },
        {
            "input_prompt": "Input: line\nOutput:",
            "test_query": "line",
            "prediction": "line with \"hello\" at the beginning and a newline",
            "cleaned_prediction": "line with \"hello\" at the beginning and a newline",
            "gt": "curve"
        },
        {
            "input_prompt": "Input: field\nOutput:",
            "test_query": "field",
            "prediction": "field\ninput: 2\noutput: 2",
            "cleaned_prediction": "field",
            "gt": "city"
        },
        {
            "input_prompt": "Input: convergence\nOutput:",
            "test_query": "convergence",
            "prediction": "divergence\ncomment: this example is a variation of the",
            "cleaned_prediction": "divergence",
            "gt": "divergence"
        },
        {
            "input_prompt": "Input: dim\nOutput:",
            "test_query": "dim",
            "prediction": "dim\npurpose: to get the dimension of a vector",
            "cleaned_prediction": "dim",
            "gt": "bright"
        },
        {
            "input_prompt": "Input: venerable\nOutput:",
            "test_query": "venerable",
            "prediction": "ancient\nsynonyms: antiquated, archaic,",
            "cleaned_prediction": "ancient",
            "gt": "disreputable"
        },
        {
            "input_prompt": "Input: irresponsible\nOutput:",
            "test_query": "irresponsible",
            "prediction": "responsible\nin the dictionary definition of responsible, it says",
            "cleaned_prediction": "responsible",
            "gt": "responsible"
        },
        {
            "input_prompt": "Input: northwestern\nOutput:",
            "test_query": "northwestern",
            "prediction": "southeastern\nexplanation: the word \u201cnorthwestern\u201d spelled",
            "cleaned_prediction": "southeastern",
            "gt": "southeastern"
        },
        {
            "input_prompt": "Input: defensive\nOutput:",
            "test_query": "defensive",
            "prediction": "offensive\ndefinition: (of a player or team)",
            "cleaned_prediction": "offensive",
            "gt": "offensive"
        },
        {
            "input_prompt": "Input: original\nOutput:",
            "test_query": "original",
            "prediction": "modified\ninput: original\noutput: modified\ninput",
            "cleaned_prediction": "modified",
            "gt": "copy"
        },
        {
            "input_prompt": "Input: subconscious\nOutput:",
            "test_query": "subconscious",
            "prediction": "conscious\nprocess: reflection\n\nin order to make a",
            "cleaned_prediction": "conscious",
            "gt": "conscious"
        },
        {
            "input_prompt": "Input: copy\nOutput:",
            "test_query": "copy",
            "prediction": "paste\ninput: cut\noutput: cut\ninput",
            "cleaned_prediction": "paste",
            "gt": "original"
        },
        {
            "input_prompt": "Input: attract\nOutput:",
            "test_query": "attract",
            "prediction": "repel\ninput: attract\noutput: repel",
            "cleaned_prediction": "repel",
            "gt": "repel"
        },
        {
            "input_prompt": "Input: magnetic\nOutput:",
            "test_query": "magnetic",
            "prediction": "electric\ndevice: generator\nthe process of converting magnetic",
            "cleaned_prediction": "electric",
            "gt": "nonmagnetic"
        },
        {
            "input_prompt": "Input: injustice\nOutput:",
            "test_query": "injustice",
            "prediction": "justice\ninput: wrong\noutput: right\ninput",
            "cleaned_prediction": "justice",
            "gt": "justice"
        },
        {
            "input_prompt": "Input: mortality\nOutput:",
            "test_query": "mortality",
            "prediction": "longevity\nrelated: lifespan, life expectancy, aging,",
            "cleaned_prediction": "longevity",
            "gt": "immortality"
        },
        {
            "input_prompt": "Input: laughter\nOutput:",
            "test_query": "laughter",
            "prediction": "tears\nthe relationship between input and output is not always",
            "cleaned_prediction": "tears",
            "gt": "tears"
        },
        {
            "input_prompt": "Input: inhuman\nOutput:",
            "test_query": "inhuman",
            "prediction": "human\na machine that can transform inhuman entities into",
            "cleaned_prediction": "human",
            "gt": "human"
        },
        {
            "input_prompt": "Input: heavenly\nOutput:",
            "test_query": "heavenly",
            "prediction": "hellish\nthe antonym of the word \"he",
            "cleaned_prediction": "hellish",
            "gt": "hellish"
        },
        {
            "input_prompt": "Input: half\nOutput:",
            "test_query": "half",
            "prediction": "half\ninput: quarter\noutput: quarter\ninput",
            "cleaned_prediction": "half",
            "gt": "full"
        },
        {
            "input_prompt": "Input: unpopular\nOutput:",
            "test_query": "unpopular",
            "prediction": "popular\nexplanation: the word \"unpopular\" spelled",
            "cleaned_prediction": "popular",
            "gt": "popular"
        },
        {
            "input_prompt": "Input: recession\nOutput:",
            "test_query": "recession",
            "prediction": "boom\nexplanation: the economy is in a recession,",
            "cleaned_prediction": "boom",
            "gt": "boom"
        },
        {
            "input_prompt": "Input: poor\nOutput:",
            "test_query": "poor",
            "prediction": "rich\ninput: happy\noutput: sad\ninput",
            "cleaned_prediction": "rich",
            "gt": "rich"
        },
        {
            "input_prompt": "Input: noisy\nOutput:",
            "test_query": "noisy",
            "prediction": "clear\nnoise: 1.00\nnoise reduction",
            "cleaned_prediction": "clear",
            "gt": "quiet"
        },
        {
            "input_prompt": "Input: specialize\nOutput:",
            "test_query": "specialize",
            "prediction": "generalize\ninput: generalize\noutput: specialize\n\nthis",
            "cleaned_prediction": "generalize",
            "gt": "generalize"
        },
        {
            "input_prompt": "Input: polite\nOutput:",
            "test_query": "polite",
            "prediction": "impolite\ninput: courteous\noutput: discour",
            "cleaned_prediction": "impolite",
            "gt": "rude"
        },
        {
            "input_prompt": "Input: spacious\nOutput:",
            "test_query": "spacious",
            "prediction": "cramped\n\nthe word \"spacious\" is an ant",
            "cleaned_prediction": "cramped",
            "gt": "cramped"
        },
        {
            "input_prompt": "Input: hideous\nOutput:",
            "test_query": "hideous",
            "prediction": "beautiful\na new trend is emerging in the world of",
            "cleaned_prediction": "beautiful",
            "gt": "beautiful"
        },
        {
            "input_prompt": "Input: judicial\nOutput:",
            "test_query": "judicial",
            "prediction": "judicial\nthe word judicial has 7 letters.\nthe",
            "cleaned_prediction": "judicial",
            "gt": "extrajudicial"
        },
        {
            "input_prompt": "Input: observational\nOutput:",
            "test_query": "observational",
            "prediction": "theoretical\nobservational astronomy\nobservational astronomy is the",
            "cleaned_prediction": "theoretical",
            "gt": "theoretical"
        },
        {
            "input_prompt": "Input: shorten\nOutput:",
            "test_query": "shorten",
            "prediction": "lengthen\nthe word \"shorten\" is a",
            "cleaned_prediction": "lengthen",
            "gt": "lengthen"
        },
        {
            "input_prompt": "Input: gay\nOutput:",
            "test_query": "gay",
            "prediction": "straight\ninput: lesbian\noutput: straight\ninput",
            "cleaned_prediction": "straight",
            "gt": "straight"
        },
        {
            "input_prompt": "Input: insignificant\nOutput:",
            "test_query": "insignificant",
            "prediction": "significant\ninput: 1.23\noutput:",
            "cleaned_prediction": "significant",
            "gt": "significant"
        },
        {
            "input_prompt": "Input: stable\nOutput:",
            "test_query": "stable",
            "prediction": "unstable\ninput: unstable\noutput: unstable\ninput",
            "cleaned_prediction": "unstable",
            "gt": "unstable"
        },
        {
            "input_prompt": "Input: concentration\nOutput:",
            "test_query": "concentration",
            "prediction": "dilution\nfinding the dilution of a solution is",
            "cleaned_prediction": "dilution",
            "gt": "distraction"
        },
        {
            "input_prompt": "Input: fertile\nOutput:",
            "test_query": "fertile",
            "prediction": "infertile\ndefinition: (of a soil,",
            "cleaned_prediction": "infertile",
            "gt": "infertile"
        },
        {
            "input_prompt": "Input: delete\nOutput:",
            "test_query": "delete",
            "prediction": "insert\nexplanation: the problem is asking for a function",
            "cleaned_prediction": "insert",
            "gt": "save"
        },
        {
            "input_prompt": "Input: powdered\nOutput:",
            "test_query": "powdered",
            "prediction": "solid\nchange: solidification\n\nthe process of turning",
            "cleaned_prediction": "solid",
            "gt": "solid"
        },
        {
            "input_prompt": "Input: conserve\nOutput:",
            "test_query": "conserve",
            "prediction": "waste\nthe word \"conserve\" has a similar",
            "cleaned_prediction": "waste",
            "gt": "waste"
        },
        {
            "input_prompt": "Input: central\nOutput:",
            "test_query": "central",
            "prediction": "peripheral\ninput: peripheral\noutput: central\ninput",
            "cleaned_prediction": "peripheral",
            "gt": "peripheral"
        },
        {
            "input_prompt": "Input: bulky\nOutput:",
            "test_query": "bulky",
            "prediction": "slender\nchange: slender -> bulky\n\ninput: bulky",
            "cleaned_prediction": "slender",
            "gt": "compact"
        },
        {
            "input_prompt": "Input: downhill\nOutput:",
            "test_query": "downhill",
            "prediction": "uphill\nthe word \"downhill\" is a word",
            "cleaned_prediction": "uphill",
            "gt": "uphill"
        },
        {
            "input_prompt": "Input: alter\nOutput:",
            "test_query": "alter",
            "prediction": "alter\ninput: hello\noutput: hll",
            "cleaned_prediction": "alter",
            "gt": "preserve"
        },
        {
            "input_prompt": "Input: note\nOutput:",
            "test_query": "note",
            "prediction": "note\n# note\na note is a symbol that",
            "cleaned_prediction": "note",
            "gt": "silence"
        },
        {
            "input_prompt": "Input: death\nOutput:",
            "test_query": "death",
            "prediction": "life\ninput: darkness\noutput: light\ninput",
            "cleaned_prediction": "life",
            "gt": "life"
        },
        {
            "input_prompt": "Input: sister\nOutput:",
            "test_query": "sister",
            "prediction": "brother\ninput: sister\noutput: brother\ninput",
            "cleaned_prediction": "brother",
            "gt": "brother"
        },
        {
            "input_prompt": "Input: income\nOutput:",
            "test_query": "income",
            "prediction": "expenses\n\n## step 1: determine the percentage of",
            "cleaned_prediction": "expenses",
            "gt": "expense"
        },
        {
            "input_prompt": "Input: output\nOutput:",
            "test_query": "output",
            "prediction": "input\nin a typical scenario, the input is the",
            "cleaned_prediction": "input",
            "gt": "input"
        },
        {
            "input_prompt": "Input: objective\nOutput:",
            "test_query": "objective",
            "prediction": "subjective\nin the realm of personal finance, the line",
            "cleaned_prediction": "subjective",
            "gt": "subjective"
        },
        {
            "input_prompt": "Input: beast\nOutput:",
            "test_query": "beast",
            "prediction": "creature\nsynonyms: monster, creature, animal,",
            "cleaned_prediction": "creature",
            "gt": "beauty"
        },
        {
            "input_prompt": "Input: everything\nOutput:",
            "test_query": "everything",
            "prediction": "nothing\n\ni'm not sure what you want me to",
            "cleaned_prediction": "nothing",
            "gt": "nothing"
        },
        {
            "input_prompt": "Input: nationalist\nOutput:",
            "test_query": "nationalist",
            "prediction": "internationalist\ndefinition: an internationalist is a person",
            "cleaned_prediction": "internationalist",
            "gt": "internationalist"
        },
        {
            "input_prompt": "Input: appear\nOutput:",
            "test_query": "appear",
            "prediction": "disappear\nthe word \"appear\" is a verb that",
            "cleaned_prediction": "disappear",
            "gt": "disappear"
        },
        {
            "input_prompt": "Input: favorable\nOutput:",
            "test_query": "favorable",
            "prediction": "unfavorable\ninput: unfavorable\noutput: favorable\ninput",
            "cleaned_prediction": "unfavorable",
            "gt": "unfavorable"
        },
        {
            "input_prompt": "Input: tomorrow\nOutput:",
            "test_query": "tomorrow",
            "prediction": "yesterday\nexplanation: the word \"tomorrow\" spelled",
            "cleaned_prediction": "yesterday",
            "gt": "yesterday"
        },
        {
            "input_prompt": "Input: homeless\nOutput:",
            "test_query": "homeless",
            "prediction": "housed\nchange: stable income, support system, and",
            "cleaned_prediction": "housed",
            "gt": "housed"
        },
        {
            "input_prompt": "Input: unmanned\nOutput:",
            "test_query": "unmanned",
            "prediction": "manned\nchange one letter from unmanned to manned.\ninput",
            "cleaned_prediction": "manned",
            "gt": "manned"
        },
        {
            "input_prompt": "Input: reward\nOutput:",
            "test_query": "reward",
            "prediction": "cost\noutput: cost\n\n## step 1:",
            "cleaned_prediction": "cost",
            "gt": "punishment"
        },
        {
            "input_prompt": "Input: absurd\nOutput:",
            "test_query": "absurd",
            "prediction": "rational\nthe absurdity of rationality\nthe",
            "cleaned_prediction": "rational",
            "gt": "sensible"
        },
        {
            "input_prompt": "Input: confused\nOutput:",
            "test_query": "confused",
            "prediction": "clear\ninput: unsure\noutput: certain\ninput",
            "cleaned_prediction": "clear",
            "gt": "clear-minded"
        },
        {
            "input_prompt": "Input: believable\nOutput:",
            "test_query": "believable",
            "prediction": "unbelievable\nthe word \"believable\" is an adjective",
            "cleaned_prediction": "unbelievable",
            "gt": "unbelievable"
        },
        {
            "input_prompt": "Input: harass\nOutput:",
            "test_query": "harass",
            "prediction": "harass\ndefinition: to annoy or disturb someone repeatedly",
            "cleaned_prediction": "harass",
            "gt": "comfort"
        },
        {
            "input_prompt": "Input: background\nOutput:",
            "test_query": "background",
            "prediction": "foreground\noutput: background\noutput: background\ninput",
            "cleaned_prediction": "foreground",
            "gt": "foreground"
        },
        {
            "input_prompt": "Input: fertility\nOutput:",
            "test_query": "fertility",
            "prediction": "infertility\nspelling mistake\na spelling mistake in a",
            "cleaned_prediction": "infertility",
            "gt": "infertility"
        },
        {
            "input_prompt": "Input: dotted\nOutput:",
            "test_query": "dotted",
            "prediction": "undotted\ninput: undotted\noutput: dotted",
            "cleaned_prediction": "undotted",
            "gt": "solid"
        },
        {
            "input_prompt": "Input: civilian\nOutput:",
            "test_query": "civilian",
            "prediction": "military\nthe term \"civilian\" refers to a",
            "cleaned_prediction": "military",
            "gt": "military"
        },
        {
            "input_prompt": "Input: expenditure\nOutput:",
            "test_query": "expenditure",
            "prediction": "income\nmethod: to calculate the income from expenditure,",
            "cleaned_prediction": "income",
            "gt": "income"
        },
        {
            "input_prompt": "Input: intentional\nOutput:",
            "test_query": "intentional",
            "prediction": "unintentional\nthis is the third in a series of",
            "cleaned_prediction": "unintentional",
            "gt": "accidental"
        },
        {
            "input_prompt": "Input: criticize\nOutput:",
            "test_query": "criticize",
            "prediction": "praise\ndefinition: express approval or admiration for someone or",
            "cleaned_prediction": "praise",
            "gt": "praise"
        },
        {
            "input_prompt": "Input: discomfort\nOutput:",
            "test_query": "discomfort",
            "prediction": "comfort\ninput: pain\noutput: relief\ninput",
            "cleaned_prediction": "comfort",
            "gt": "comfort"
        },
        {
            "input_prompt": "Input: relax\nOutput:",
            "test_query": "relax",
            "prediction": "tense\ninput: tense\noutput: relax\n\ninput",
            "cleaned_prediction": "tense",
            "gt": "stress"
        },
        {
            "input_prompt": "Input: extra\nOutput:",
            "test_query": "extra",
            "prediction": "extra\nexplanation: the string \"extra\" is a",
            "cleaned_prediction": "extra",
            "gt": "lacking"
        },
        {
            "input_prompt": "Input: sacred\nOutput:",
            "test_query": "sacred",
            "prediction": "profane\nthe word \"sacred\" is",
            "cleaned_prediction": "profane",
            "gt": "profane"
        },
        {
            "input_prompt": "Input: plentiful\nOutput:",
            "test_query": "plentiful",
            "prediction": "scarce\ndifference: the difference between plentiful and scarce is",
            "cleaned_prediction": "scarce",
            "gt": "scarce"
        },
        {
            "input_prompt": "Input: moral\nOutput:",
            "test_query": "moral",
            "prediction": "immoral\ndefinition: not in accordance with moral principles;",
            "cleaned_prediction": "immoral",
            "gt": "immoral"
        },
        {
            "input_prompt": "Input: smart\nOutput:",
            "test_query": "smart",
            "prediction": "dumb\ninput: smart\noutput: dumb\n\ninput",
            "cleaned_prediction": "dumb",
            "gt": "dumb"
        },
        {
            "input_prompt": "Input: mark\nOutput:",
            "test_query": "mark",
            "prediction": "mark\ninput: \"mark\"\noutput: \"mark",
            "cleaned_prediction": "mark",
            "gt": "unmark"
        },
        {
            "input_prompt": "Input: entire\nOutput:",
            "test_query": "entire",
            "prediction": "partial\npartial order is a relation that is reflexive",
            "cleaned_prediction": "partial",
            "gt": "partial"
        },
        {
            "input_prompt": "Input: treacherous\nOutput:",
            "test_query": "treacherous",
            "prediction": "harmless\ninput: precarious\noutput: harmless\ninput",
            "cleaned_prediction": "harmless",
            "gt": "trustworthy"
        },
        {
            "input_prompt": "Input: inaccessible\nOutput:",
            "test_query": "inaccessible",
            "prediction": "accessible\nthe input is inaccessible because it is not a",
            "cleaned_prediction": "accessible",
            "gt": "accessible"
        },
        {
            "input_prompt": "Input: inexpensive\nOutput:",
            "test_query": "inexpensive",
            "prediction": "expensive\nthe process of making something more valuable or desirable",
            "cleaned_prediction": "expensive",
            "gt": "expensive"
        },
        {
            "input_prompt": "Input: classify\nOutput:",
            "test_query": "classify",
            "prediction": "classify\nconfidence: 1\nexplanation: the",
            "cleaned_prediction": "classify",
            "gt": "disorganize"
        },
        {
            "input_prompt": "Input: historical\nOutput:",
            "test_query": "historical",
            "prediction": "contemporary\nprocess: 1. the input is a",
            "cleaned_prediction": "contemporary",
            "gt": "contemporary"
        },
        {
            "input_prompt": "Input: grow\nOutput:",
            "test_query": "grow",
            "prediction": "shrink\ninput: shrink\noutput: grow\ninput",
            "cleaned_prediction": "shrink",
            "gt": "shrink"
        },
        {
            "input_prompt": "Input: repair\nOutput:",
            "test_query": "repair",
            "prediction": "fix\ninput: repair\noutput: fix\ninput",
            "cleaned_prediction": "fix",
            "gt": "damage"
        },
        {
            "input_prompt": "Input: decrease\nOutput:",
            "test_query": "decrease",
            "prediction": "increase\n================\n\n### problem explanation\n\nthe problem requires",
            "cleaned_prediction": "increase",
            "gt": "increase"
        },
        {
            "input_prompt": "Input: visual\nOutput:",
            "test_query": "visual",
            "prediction": "visual\npublished by alex bell on august 21,",
            "cleaned_prediction": "visual",
            "gt": "auditory"
        },
        {
            "input_prompt": "Input: secret\nOutput:",
            "test_query": "secret",
            "prediction": "public\ninput: secret\noutput: public\ninput",
            "cleaned_prediction": "public",
            "gt": "public"
        },
        {
            "input_prompt": "Input: unclear\nOutput:",
            "test_query": "unclear",
            "prediction": "clear\nthe input is unclear, but the output is",
            "cleaned_prediction": "clear",
            "gt": "clear"
        },
        {
            "input_prompt": "Input: capable\nOutput:",
            "test_query": "capable",
            "prediction": "incapable\ncapable is the opposite of incapable. cap",
            "cleaned_prediction": "incapable",
            "gt": "incapable"
        },
        {
            "input_prompt": "Input: feature\nOutput:",
            "test_query": "feature",
            "prediction": "feature\ntype: feature\ndescription: a feature of",
            "cleaned_prediction": "feature",
            "gt": "bug"
        },
        {
            "input_prompt": "Input: functional\nOutput:",
            "test_query": "functional",
            "prediction": "nonfunctional\ndifficulty: medium\ncategory: data structures",
            "cleaned_prediction": "nonfunctional",
            "gt": "dysfunctional"
        },
        {
            "input_prompt": "Input: subdued\nOutput:",
            "test_query": "subdued",
            "prediction": "vibrant\na small town in rural ohio, usa,",
            "cleaned_prediction": "vibrant",
            "gt": "vibrant"
        },
        {
            "input_prompt": "Input: wake\nOutput:",
            "test_query": "wake",
            "prediction": "sleep\ninput: sleep\noutput: wake\ninput",
            "cleaned_prediction": "sleep",
            "gt": "sleep"
        },
        {
            "input_prompt": "Input: decline\nOutput:",
            "test_query": "decline",
            "prediction": "rise\nchange: upward\nchange: upward\nchange",
            "cleaned_prediction": "rise",
            "gt": "increase"
        },
        {
            "input_prompt": "Input: tolerance\nOutput:",
            "test_query": "tolerance",
            "prediction": "precision\nprecision is a measure of how accurately a value",
            "cleaned_prediction": "precision",
            "gt": "intolerance"
        },
        {
            "input_prompt": "Input: rest\nOutput:",
            "test_query": "rest",
            "prediction": "rest\ninput: hello\noutput: hello\n\ndef",
            "cleaned_prediction": "rest",
            "gt": "work"
        },
        {
            "input_prompt": "Input: shameful\nOutput:",
            "test_query": "shameful",
            "prediction": "proud\ni am proud to be a woman of color",
            "cleaned_prediction": "proud",
            "gt": "honorable"
        },
        {
            "input_prompt": "Input: main\nOutput:",
            "test_query": "main",
            "prediction": "main\nmemory limit: 256 megabytes\ndifficulty",
            "cleaned_prediction": "main",
            "gt": "secondary"
        },
        {
            "input_prompt": "Input: analysis\nOutput:",
            "test_query": "analysis",
            "prediction": "synthesis\nthe two words are antonyms.\nantonyms",
            "cleaned_prediction": "synthesis",
            "gt": "synthesis"
        },
        {
            "input_prompt": "Input: soil\nOutput:",
            "test_query": "soil",
            "prediction": "soil\nduration: 1 day\ndescription: this",
            "cleaned_prediction": "soil",
            "gt": "sky"
        },
        {
            "input_prompt": "Input: downside\nOutput:",
            "test_query": "downside",
            "prediction": "upside\n```\ndef fix_downside(input_str):",
            "cleaned_prediction": "upside",
            "gt": "upside"
        },
        {
            "input_prompt": "Input: tail\nOutput:",
            "test_query": "tail",
            "prediction": "head\ninput: head\noutput: tail\n\nclass",
            "cleaned_prediction": "head",
            "gt": "head"
        },
        {
            "input_prompt": "Input: contradict\nOutput:",
            "test_query": "contradict",
            "prediction": "agree\nthe word \"contradict\" means to",
            "cleaned_prediction": "agree",
            "gt": "agree"
        },
        {
            "input_prompt": "Input: medieval\nOutput:",
            "test_query": "medieval",
            "prediction": "modern\nthe medieval period was a time of great change",
            "cleaned_prediction": "modern",
            "gt": "modern"
        },
        {
            "input_prompt": "Input: antagonist\nOutput:",
            "test_query": "antagonist",
            "prediction": "protagonist\nchange one letter to solve the puzzle.\nthe",
            "cleaned_prediction": "protagonist",
            "gt": "protagonist"
        },
        {
            "input_prompt": "Input: lineman\nOutput:",
            "test_query": "lineman",
            "prediction": "lineman\ninput: linemen\noutput: linemen",
            "cleaned_prediction": "lineman",
            "gt": "receiver"
        },
        {
            "input_prompt": "Input: differentiate\nOutput:",
            "test_query": "differentiate",
            "prediction": "integrate\ndifficulty\nis this a good problem?\nyes",
            "cleaned_prediction": "integrate",
            "gt": "integrate"
        },
        {
            "input_prompt": "Input: colored\nOutput:",
            "test_query": "colored",
            "prediction": "monochrome\noutput: monochrome\noutput: mon",
            "cleaned_prediction": "monochrome",
            "gt": "colorless"
        },
        {
            "input_prompt": "Input: file\nOutput:",
            "test_query": "file",
            "prediction": "file\ntime: 10 min\nspace:",
            "cleaned_prediction": "file",
            "gt": "delete"
        },
        {
            "input_prompt": "Input: solid\nOutput:",
            "test_query": "solid",
            "prediction": "liquid\nchange in state: solid to liquid\nprocess",
            "cleaned_prediction": "liquid",
            "gt": "liquid"
        },
        {
            "input_prompt": "Input: playful\nOutput:",
            "test_query": "playful",
            "prediction": "serious\nthe word \"playful\" has a somewhat",
            "cleaned_prediction": "serious",
            "gt": "serious"
        },
        {
            "input_prompt": "Input: mistaken\nOutput:",
            "test_query": "mistaken",
            "prediction": "correct\ninput: incorrect\noutput: correct\ninput",
            "cleaned_prediction": "correct",
            "gt": "correct"
        },
        {
            "input_prompt": "Input: imaginative\nOutput:",
            "test_query": "imaginative",
            "prediction": "unimaginative\nthe word imaginative is a bit of an",
            "cleaned_prediction": "unimaginative",
            "gt": "practical"
        },
        {
            "input_prompt": "Input: marvelous\nOutput:",
            "test_query": "marvelous",
            "prediction": "ordinary\ninput: supercalifragilisticexp",
            "cleaned_prediction": "ordinary",
            "gt": "terrible"
        },
        {
            "input_prompt": "Input: condemn\nOutput:",
            "test_query": "condemn",
            "prediction": "approve\nsynonyms for \"condemn\" are",
            "cleaned_prediction": "approve",
            "gt": "praise"
        },
        {
            "input_prompt": "Input: outfield\nOutput:",
            "test_query": "outfield",
            "prediction": "infield\ninput: infield\noutput: outfield\n\ninput",
            "cleaned_prediction": "infield",
            "gt": "infield"
        },
        {
            "input_prompt": "Input: procedural\nOutput:",
            "test_query": "procedural",
            "prediction": "declarative\ndescription: the procedural approach to programming is",
            "cleaned_prediction": "declarative",
            "gt": "conceptual"
        },
        {
            "input_prompt": "Input: nuclear\nOutput:",
            "test_query": "nuclear",
            "prediction": "nuclear\n------------------\ninput: nuclear\noutput: nuclear",
            "cleaned_prediction": "nuclear",
            "gt": "renewable"
        },
        {
            "input_prompt": "Input: charge\nOutput:",
            "test_query": "charge",
            "prediction": "discharge\nthe process of recharging a battery is the",
            "cleaned_prediction": "discharge",
            "gt": "discharge"
        },
        {
            "input_prompt": "Input: undergraduate\nOutput:",
            "test_query": "undergraduate",
            "prediction": "graduate\ninput: junior\noutput: senior\ninput",
            "cleaned_prediction": "graduate",
            "gt": "graduate"
        },
        {
            "input_prompt": "Input: new\nOutput:",
            "test_query": "new",
            "prediction": "old\nexplanation: the new object is a new instance",
            "cleaned_prediction": "old",
            "gt": "old"
        },
        {
            "input_prompt": "Input: penal\nOutput:",
            "test_query": "penal",
            "prediction": "penal\npenalty is a term used in various contexts",
            "cleaned_prediction": "penal",
            "gt": "rewarding"
        },
        {
            "input_prompt": "Input: meaningful\nOutput:",
            "test_query": "meaningful",
            "prediction": "meaningless\nin the 1930s, a young",
            "cleaned_prediction": "meaningless",
            "gt": "meaningless"
        },
        {
            "input_prompt": "Input: thin\nOutput:",
            "test_query": "thin",
            "prediction": "thick\ninput: thin\noutput: thick\ninput",
            "cleaned_prediction": "thick",
            "gt": "thick"
        },
        {
            "input_prompt": "Input: rivalry\nOutput:",
            "test_query": "rivalry",
            "prediction": "friendship\nin the realm of competition, one would assume",
            "cleaned_prediction": "friendship",
            "gt": "cooperation"
        },
        {
            "input_prompt": "Input: run\nOutput:",
            "test_query": "run",
            "prediction": "stop\ninput: walk\noutput: stop\ninput",
            "cleaned_prediction": "stop",
            "gt": "walk"
        },
        {
            "input_prompt": "Input: spiritual\nOutput:",
            "test_query": "spiritual",
            "prediction": "material\nthe problem is that the input of spiritual is",
            "cleaned_prediction": "material",
            "gt": "materialistic"
        },
        {
            "input_prompt": "Input: comparative\nOutput:",
            "test_query": "comparative",
            "prediction": "comparative\ninput: comparatives\noutput: comparatives",
            "cleaned_prediction": "comparative",
            "gt": "superlative"
        },
        {
            "input_prompt": "Input: probable\nOutput:",
            "test_query": "probable",
            "prediction": "improbable\nthe word \"probable\" uses 8",
            "cleaned_prediction": "improbable",
            "gt": "improbable"
        },
        {
            "input_prompt": "Input: circular\nOutput:",
            "test_query": "circular",
            "prediction": "linear\ndescription: this transformation takes a circular array and",
            "cleaned_prediction": "linear",
            "gt": "square"
        },
        {
            "input_prompt": "Input: recreational\nOutput:",
            "test_query": "recreational",
            "prediction": "professional\nthe word \"recreational\" refers to",
            "cleaned_prediction": "professional",
            "gt": "professional"
        },
        {
            "input_prompt": "Input: many\nOutput:",
            "test_query": "many",
            "prediction": "few\nthe problem is that the model is not able",
            "cleaned_prediction": "few",
            "gt": "few"
        },
        {
            "input_prompt": "Input: relative\nOutput:",
            "test_query": "relative",
            "prediction": "absolute\nstatus: public\nauthor: kevin",
            "cleaned_prediction": "absolute",
            "gt": "absolute"
        }
    ],
    "val_f1_per_layer": {
        "0": 0.05439330543933055,
        "1": 0.058577405857740586,
        "2": 0.06694560669456066,
        "3": 0.07112970711297072,
        "4": 0.07112970711297072,
        "5": 0.06276150627615062,
        "6": 0.04602510460251046,
        "7": 0.07531380753138076,
        "8": 0.11297071129707113,
        "9": 0.21338912133891214,
        "10": 0.2928870292887029,
        "11": 0.3723849372384937,
        "12": 0.42677824267782427,
        "13": 0.606694560669456,
        "14": 0.5564853556485355,
        "15": 0.5481171548117155,
        "16": 0.5355648535564853,
        "17": 0.4435146443514644,
        "18": 0.3389121338912134,
        "19": 0.26778242677824265,
        "20": 0.17573221757322174,
        "21": 0.1297071129707113,
        "22": 0.11297071129707113,
        "23": 0.10460251046025104,
        "24": 0.1087866108786611,
        "25": 0.09623430962343096,
        "26": 0.09205020920502092,
        "27": 0.07531380753138076,
        "28": 0.06694560669456066,
        "29": 0.058577405857740586,
        "30": 0.058577405857740586,
        "31": 0.029288702928870293
    }
}